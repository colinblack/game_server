// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace User {

namespace {

const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* Building_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Building_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* Science_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Science_reflection_ = NULL;
const ::google::protobuf::Descriptor* Weapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Weapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCPass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCPass_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* MineItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MineItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeLimtPropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeLimtPropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteNPCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteNPCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteNPCInfoAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteNPCInfoAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tutorial_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tutorial_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCashReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCashReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCashResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCashResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenNormalGifgBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenNormalGifgBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenLuckGifgBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenLuckGifgBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGifgBagResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGifgBagResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseTimeLimitPropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseTimeLimitPropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseTimeLimitPropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseTimeLimitPropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseUpdateSmeltPropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseUpdateSmeltPropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseUpdateSmeltPropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseUpdateSmeltPropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSpecificSmeltPropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSpecificSmeltPropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSpecificSmeltPropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSpecificSmeltPropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteNPCPushReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteNPCPushReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_User_2eproto() {
  protobuf_AddDesc_User_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "User.proto");
  GOOGLE_CHECK(file != NULL);
  Base_descriptor_ = file->message_type(0);
  static const int Base_offsets_[71] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, register_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, register_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, invite_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, last_login_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, login_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, last_active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, last_off_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbid_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbid_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, invite_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, today_invite_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, tutorial_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, acccharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, silk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, preward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, loyal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, sacrifice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, bmarketcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, banquet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, eshopintimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, eshopcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, arefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, harmmer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, up_res_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, rests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, rewardb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mp3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, npc_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, flamen_coins_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, flamem_wood_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, flamem_food_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, flamem_iron_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, first_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, auto_build_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, integral_time_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mission_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, vip_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, ladder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, ladder_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, job_reward_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, token_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, daily_refresh_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, daily_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, daily_free_times_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  Building_descriptor_ = file->message_type(1);
  static const int Building_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, yield_),
  };
  Building_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Building_descriptor_,
      Building::default_instance_,
      Building_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Building, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Building));
  Hero_descriptor_ = file->message_type(2);
  static const int Hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, soldiers_),
  };
  Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hero_descriptor_,
      Hero::default_instance_,
      Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hero));
  Science_descriptor_ = file->message_type(3);
  static const int Science_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, recruit_hero_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, soldiers_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, soldiers_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, exploit_box_level_),
  };
  Science_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Science_descriptor_,
      Science::default_instance_,
      Science_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Science));
  Weapon_descriptor_ = file->message_type(4);
  static const int Weapon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, items_),
  };
  Weapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Weapon_descriptor_,
      Weapon::default_instance_,
      Weapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Weapon));
  NPCPass_descriptor_ = file->message_type(5);
  static const int NPCPass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, items_),
  };
  NPCPass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCPass_descriptor_,
      NPCPass::default_instance_,
      NPCPass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCPass));
  ActivityItem_descriptor_ = file->message_type(6);
  static const int ActivityItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, bts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, ets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, ver_),
  };
  ActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityItem_descriptor_,
      ActivityItem::default_instance_,
      ActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityItem));
  Activity_descriptor_ = file->message_type(7);
  static const int Activity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, act_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  MineItem_descriptor_ = file->message_type(8);
  static const int MineItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, mine_reward_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, mine_kingdom_status_),
  };
  MineItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MineItem_descriptor_,
      MineItem::default_instance_,
      MineItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MineItem));
  TimeLimtPropItem_descriptor_ = file->message_type(9);
  static const int TimeLimtPropItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimtPropItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimtPropItem, expire_time_),
  };
  TimeLimtPropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeLimtPropItem_descriptor_,
      TimeLimtPropItem::default_instance_,
      TimeLimtPropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimtPropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimtPropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeLimtPropItem));
  EliteNPCInfo_descriptor_ = file->message_type(10);
  static const int EliteNPCInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfo, type_),
  };
  EliteNPCInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteNPCInfo_descriptor_,
      EliteNPCInfo::default_instance_,
      EliteNPCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteNPCInfo));
  EliteNPCInfoAll_descriptor_ = file->message_type(11);
  static const int EliteNPCInfoAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfoAll, npc_),
  };
  EliteNPCInfoAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteNPCInfoAll_descriptor_,
      EliteNPCInfoAll::default_instance_,
      EliteNPCInfoAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfoAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCInfoAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteNPCInfoAll));
  User_descriptor_ = file->message_type(12);
  static const int User_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, equipshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, science_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, yellowvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, npcpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, cumulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, foggates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, mine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, dailymissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, time_limit_props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, producecomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, achievements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, elitenpcs_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Tutorial_stage_descriptor_ = file->message_type(13);
  static const int Tutorial_stage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorial_stage, tutorial_stage_),
  };
  Tutorial_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tutorial_stage_descriptor_,
      Tutorial_stage::default_instance_,
      Tutorial_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorial_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorial_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tutorial_stage));
  ServerTime_descriptor_ = file->message_type(14);
  static const int ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, ts_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
  CostCashReq_descriptor_ = file->message_type(15);
  static const int CostCashReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, operation_),
  };
  CostCashReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCashReq_descriptor_,
      CostCashReq::default_instance_,
      CostCashReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCashReq));
  CostCashResp_descriptor_ = file->message_type(16);
  static const int CostCashResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, operation_),
  };
  CostCashResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCashResp_descriptor_,
      CostCashResp::default_instance_,
      CostCashResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCashResp));
  OpenNormalGifgBagReq_descriptor_ = file->message_type(17);
  static const int OpenNormalGifgBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNormalGifgBagReq, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNormalGifgBagReq, equd_),
  };
  OpenNormalGifgBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenNormalGifgBagReq_descriptor_,
      OpenNormalGifgBagReq::default_instance_,
      OpenNormalGifgBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNormalGifgBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNormalGifgBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenNormalGifgBagReq));
  OpenLuckGifgBagReq_descriptor_ = file->message_type(18);
  static const int OpenLuckGifgBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLuckGifgBagReq, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLuckGifgBagReq, equd_),
  };
  OpenLuckGifgBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenLuckGifgBagReq_descriptor_,
      OpenLuckGifgBagReq::default_instance_,
      OpenLuckGifgBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLuckGifgBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLuckGifgBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenLuckGifgBagReq));
  OpenGifgBagResp_descriptor_ = file->message_type(19);
  static const int OpenGifgBagResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGifgBagResp, equd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGifgBagResp, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGifgBagResp, bag_info_),
  };
  OpenGifgBagResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGifgBagResp_descriptor_,
      OpenGifgBagResp::default_instance_,
      OpenGifgBagResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGifgBagResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGifgBagResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGifgBagResp));
  RewardBagInfo_descriptor_ = file->message_type(20);
  static const int RewardBagInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardBagInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardBagInfo, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardBagInfo, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardBagInfo, components_),
  };
  RewardBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardBagInfo_descriptor_,
      RewardBagInfo::default_instance_,
      RewardBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardBagInfo));
  UseTimeLimitPropReq_descriptor_ = file->message_type(21);
  static const int UseTimeLimitPropReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropReq, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropReq, equd_),
  };
  UseTimeLimitPropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseTimeLimitPropReq_descriptor_,
      UseTimeLimitPropReq::default_instance_,
      UseTimeLimitPropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseTimeLimitPropReq));
  UseTimeLimitPropResp_descriptor_ = file->message_type(22);
  static const int UseTimeLimitPropResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropResp, equd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropResp, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropResp, item_),
  };
  UseTimeLimitPropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseTimeLimitPropResp_descriptor_,
      UseTimeLimitPropResp::default_instance_,
      UseTimeLimitPropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimeLimitPropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseTimeLimitPropResp));
  UseUpdateSmeltPropReq_descriptor_ = file->message_type(23);
  static const int UseUpdateSmeltPropReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropReq, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropReq, prop_ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropReq, equip_ud_),
  };
  UseUpdateSmeltPropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseUpdateSmeltPropReq_descriptor_,
      UseUpdateSmeltPropReq::default_instance_,
      UseUpdateSmeltPropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseUpdateSmeltPropReq));
  UseUpdateSmeltPropResp_descriptor_ = file->message_type(24);
  static const int UseUpdateSmeltPropResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropResp, prop_ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropResp, prop_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropResp, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropResp, hero_),
  };
  UseUpdateSmeltPropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseUpdateSmeltPropResp_descriptor_,
      UseUpdateSmeltPropResp::default_instance_,
      UseUpdateSmeltPropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseUpdateSmeltPropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseUpdateSmeltPropResp));
  UseSpecificSmeltPropReq_descriptor_ = file->message_type(25);
  static const int UseSpecificSmeltPropReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropReq, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropReq, prop_ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropReq, equip_ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropReq, type_),
  };
  UseSpecificSmeltPropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSpecificSmeltPropReq_descriptor_,
      UseSpecificSmeltPropReq::default_instance_,
      UseSpecificSmeltPropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSpecificSmeltPropReq));
  UseSpecificSmeltPropResp_descriptor_ = file->message_type(26);
  static const int UseSpecificSmeltPropResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropResp, prop_ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropResp, prop_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropResp, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropResp, hero_),
  };
  UseSpecificSmeltPropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSpecificSmeltPropResp_descriptor_,
      UseSpecificSmeltPropResp::default_instance_,
      UseSpecificSmeltPropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSpecificSmeltPropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSpecificSmeltPropResp));
  EliteNPCPushReq_descriptor_ = file->message_type(27);
  static const int EliteNPCPushReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCPushReq, npcs_),
  };
  EliteNPCPushReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteNPCPushReq_descriptor_,
      EliteNPCPushReq::default_instance_,
      EliteNPCPushReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCPushReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteNPCPushReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteNPCPushReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_User_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Building_descriptor_, &Building::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hero_descriptor_, &Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Science_descriptor_, &Science::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Weapon_descriptor_, &Weapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCPass_descriptor_, &NPCPass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityItem_descriptor_, &ActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MineItem_descriptor_, &MineItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeLimtPropItem_descriptor_, &TimeLimtPropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteNPCInfo_descriptor_, &EliteNPCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteNPCInfoAll_descriptor_, &EliteNPCInfoAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tutorial_stage_descriptor_, &Tutorial_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCashReq_descriptor_, &CostCashReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCashResp_descriptor_, &CostCashResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenNormalGifgBagReq_descriptor_, &OpenNormalGifgBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenLuckGifgBagReq_descriptor_, &OpenLuckGifgBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGifgBagResp_descriptor_, &OpenGifgBagResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardBagInfo_descriptor_, &RewardBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseTimeLimitPropReq_descriptor_, &UseTimeLimitPropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseTimeLimitPropResp_descriptor_, &UseTimeLimitPropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseUpdateSmeltPropReq_descriptor_, &UseUpdateSmeltPropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseUpdateSmeltPropResp_descriptor_, &UseUpdateSmeltPropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSpecificSmeltPropReq_descriptor_, &UseSpecificSmeltPropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSpecificSmeltPropResp_descriptor_, &UseSpecificSmeltPropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteNPCPushReq_descriptor_, &EliteNPCPushReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_User_2eproto() {
  delete Base::default_instance_;
  delete Base_reflection_;
  delete Building::default_instance_;
  delete Building_reflection_;
  delete Hero::default_instance_;
  delete Hero_reflection_;
  delete Science::default_instance_;
  delete Science_reflection_;
  delete Weapon::default_instance_;
  delete Weapon_reflection_;
  delete NPCPass::default_instance_;
  delete NPCPass_reflection_;
  delete ActivityItem::default_instance_;
  delete ActivityItem_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete MineItem::default_instance_;
  delete MineItem_reflection_;
  delete TimeLimtPropItem::default_instance_;
  delete TimeLimtPropItem_reflection_;
  delete EliteNPCInfo::default_instance_;
  delete EliteNPCInfo_reflection_;
  delete EliteNPCInfoAll::default_instance_;
  delete EliteNPCInfoAll_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete Tutorial_stage::default_instance_;
  delete Tutorial_stage_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
  delete CostCashReq::default_instance_;
  delete CostCashReq_reflection_;
  delete CostCashResp::default_instance_;
  delete CostCashResp_reflection_;
  delete OpenNormalGifgBagReq::default_instance_;
  delete OpenNormalGifgBagReq_reflection_;
  delete OpenLuckGifgBagReq::default_instance_;
  delete OpenLuckGifgBagReq_reflection_;
  delete OpenGifgBagResp::default_instance_;
  delete OpenGifgBagResp_reflection_;
  delete RewardBagInfo::default_instance_;
  delete RewardBagInfo_reflection_;
  delete UseTimeLimitPropReq::default_instance_;
  delete UseTimeLimitPropReq_reflection_;
  delete UseTimeLimitPropResp::default_instance_;
  delete UseTimeLimitPropResp_reflection_;
  delete UseUpdateSmeltPropReq::default_instance_;
  delete UseUpdateSmeltPropReq_reflection_;
  delete UseUpdateSmeltPropResp::default_instance_;
  delete UseUpdateSmeltPropResp_reflection_;
  delete UseSpecificSmeltPropReq::default_instance_;
  delete UseSpecificSmeltPropReq_reflection_;
  delete UseSpecificSmeltPropResp::default_instance_;
  delete UseSpecificSmeltPropResp_reflection_;
  delete EliteNPCPushReq::default_instance_;
  delete EliteNPCPushReq_reflection_;
}

void protobuf_AddDesc_User_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuilding::protobuf_AddDesc_ProtoBuilding_2eproto();
  ::ProtoBattleField::protobuf_AddDesc_ProtoBattleField_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::ProtoMission::protobuf_AddDesc_ProtoMission_2eproto();
  ::ProtoScience::protobuf_AddDesc_ProtoScience_2eproto();
  ::ProtoYellowVip::protobuf_AddDesc_ProtoYellowVip_2eproto();
  ::ProtoMarket::protobuf_AddDesc_ProtoMarket_2eproto();
  ::ProtoWeapon::protobuf_AddDesc_ProtoWeapon_2eproto();
  ::ProtoPass::protobuf_AddDesc_ProtoPass_2eproto();
  ::ProtoCumulation::protobuf_AddDesc_ProtoCumulation_2eproto();
  ::ProtoOfficial::protobuf_AddDesc_ProtoOfficial_2eproto();
  ::ProtoFogGate::protobuf_AddDesc_ProtoFogGate_2eproto();
  ::ProtoDailyMission::protobuf_AddDesc_ProtoDailyMission_2eproto();
  ::ProtoComponent::protobuf_AddDesc_ProtoComponent_2eproto();
  ::ProtoAchievement::protobuf_AddDesc_ProtoAchievement_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUser.proto\022\004User\032\023ProtoBuilding.proto\032"
    "\026ProtoBattleField.proto\032\020DataCommon.prot"
    "o\032\017ProtoHero.proto\032\022ProtoMission.proto\032\022"
    "ProtoScience.proto\032\024ProtoYellowVip.proto"
    "\032\021ProtoMarket.proto\032\021ProtoWeapon.proto\032\017"
    "ProtoPass.proto\032\025ProtoCumulation.proto\032\023"
    "ProtoOfficial.proto\032\022ProtoFogGate.proto\032"
    "\027ProtoDailyMission.proto\032\024ProtoComponent"
    ".proto\032\026ProtoAchievement.proto\"\333\n\n\004Base\022"
    "\031\n\021register_platform\030\001 \002(\r\022\025\n\rregister_t"
    "ime\030\002 \002(\r\022\022\n\ninvite_uid\030\003 \002(\r\022\033\n\023last_lo"
    "gin_platform\030\004 \002(\r\022\027\n\017last_login_time\030\005 "
    "\002(\r\022\023\n\013login_times\030\006 \002(\r\022\022\n\nlogin_days\030\007"
    " \002(\r\022\030\n\020last_active_time\030\010 \002(\r\022\025\n\rlast_o"
    "ff_time\030\t \002(\r\022\021\n\tforbid_ts\030\n \002(\r\022\025\n\rforb"
    "id_reason\030\013 \002(\014\022\024\n\014invite_count\030\014 \002(\r\022\032\n"
    "\022today_invite_count\030\r \002(\r\022\026\n\016tutorial_st"
    "age\030\016 \002(\r\022\014\n\004name\030\017 \002(\014\022\013\n\003fig\030\020 \002(\014\022\017\n\007"
    "kingdom\030\021 \002(\r\022\013\n\003exp\030\022 \002(\004\022\r\n\005level\030\023 \002("
    "\r\022\021\n\tacccharge\030\024 \002(\r\022\020\n\010viplevel\030\025 \002(\r\022\014"
    "\n\004cash\030\026 \002(\r\022\014\n\004coin\030\027 \002(\r\022\014\n\004wood\030\030 \002(\r"
    "\022\014\n\004food\030\031 \002(\r\022\014\n\004iron\030\032 \002(\r\022\016\n\006ticket\030\033"
    " \002(\r\022\014\n\004silk\030\034 \002(\r\022\r\n\005order\030\035 \002(\r\022\013\n\003bag"
    "\030\036 \002(\r\022\017\n\007preward\030\037 \002(\r\022\r\n\005loyal\030  \002(\r\022\021"
    "\n\tsacrifice\030! \002(\r\022\016\n\006market\030\" \002(\r\022\021\n\tbma"
    "rketcd\030# \002(\r\022\017\n\007banquet\030$ \002(\r\022\025\n\reshopin"
    "timacy\030% \002(\r\022\017\n\007eshopcd\030& \002(\r\022\017\n\007refresh"
    "\030\' \002(\r\022\020\n\010arefresh\030( \002(\r\022\017\n\007harmmer\030) \002("
    "\r\022\016\n\006shadow\030* \002(\r\022\023\n\013up_res_time\030+ \002(\r\022\r"
    "\n\005rests\030, \002(\r\022\013\n\003mp1\030- \002(\r\022\013\n\003mp2\030. \002(\r\022"
    "\013\n\003mk1\030/ \002(\r\022\013\n\003mk2\0300 \002(\r\022\017\n\007rewardb\0301 \002"
    "(\r\022\013\n\003mp3\0302 \002(\r\022\020\n\010npc_pass\0303 \002(\r\022\030\n\020fla"
    "men_coins_cnt\0304 \002(\r\022\027\n\017flamem_wood_cnt\0305"
    " \002(\r\022\027\n\017flamem_food_cnt\0306 \002(\r\022\027\n\017flamem_"
    "iron_cnt\0307 \002(\r\022\026\n\016first_recharge\0308 \002(\r\022\027"
    "\n\017auto_build_flag\0309 \002(\r\022\031\n\021integral_time"
    "_cnt\030: \002(\r\022\024\n\014mission_time\030; \002(\r\022\022\n\nmiss"
    "ion_id\030< \002(\r\022\022\n\nvip_reward\030= \002(\r\022\016\n\006ladd"
    "er\030> \002(\r\022\021\n\tladder_ts\030\? \002(\r\022\025\n\rjob_rewar"
    "d_ts\030@ \002(\r\022\022\n\ndepartment\030A \002(\r\022\020\n\010offici"
    "al\030B \002(\r\022\020\n\010prestige\030C \001(\r\022\020\n\010token_ts\030D"
    " \002(\r\022\030\n\020daily_refresh_ts\030E \002(\r\022\032\n\022daily_"
    "reward_times\030F \002(\r\022\030\n\020daily_free_times\030G"
    " \002(\r\"\210\001\n\010Building\022(\n\006builds\030\001 \003(\0132\030.Prot"
    "oBuilding.BuildInfo\022(\n\005queue\030\002 \002(\0132\031.Pro"
    "toBuilding.BuildQueue\022(\n\005yield\030\003 \003(\0132\031.P"
    "rotoBuilding.BuildYield\"^\n\004Hero\022(\n\004hero\030"
    "\001 \003(\0132\032.ProtoHero.HeroBaseInfoCPP\022,\n\010sol"
    "diers\030\002 \003(\0132\032.ProtoHero.HeroSoldiersCPP\""
    "\236\001\n\007Science\022+\n\005items\030\001 \003(\0132\034.ProtoScienc"
    "e.ScienceItemCPP\022\035\n\025recruit_hero_capacit"
    "y\030\002 \002(\r\022\024\n\014soldiers_row\030\003 \002(\r\022\026\n\016soldier"
    "s_level\030\004 \002(\r\022\031\n\021exploit_box_level\030\005 \002(\r"
    "\"3\n\006Weapon\022)\n\005items\030\001 \003(\0132\032.ProtoWeapon."
    "WeaponInfoCPP\"2\n\007NPCPass\022\'\n\005items\030\001 \003(\0132"
    "\030.ProtoPass.NPCPassRecord\"A\n\014ActivityIte"
    "m\022\n\n\002id\030\001 \002(\r\022\013\n\003bts\030\002 \002(\r\022\013\n\003ets\030\003 \002(\r\022"
    "\013\n\003ver\030\004 \002(\r\"+\n\010Activity\022\037\n\003act\030\001 \003(\0132\022."
    "User.ActivityItem\"\?\n\010MineItem\022\026\n\016mine_re"
    "ward_ts\030\001 \002(\r\022\033\n\023mine_kingdom_status\030\002 \002"
    "(\010\"3\n\020TimeLimtPropItem\022\n\n\002id\030\001 \002(\r\022\023\n\013ex"
    "pire_time\030\002 \002(\r\")\n\014EliteNPCInfo\022\013\n\003cid\030\001"
    " \002(\r\022\014\n\004type\030\002 \002(\r\"2\n\017EliteNPCInfoAll\022\037\n"
    "\003npc\030\001 \003(\0132\022.User.EliteNPCInfo\"\230\010\n\004User\022"
    "\030\n\004base\030\001 \002(\0132\n.User.Base\022 \n\010building\030\002 "
    "\002(\0132\016.User.Building\022\032\n\006heroes\030\003 \002(\0132\n.Us"
    "er.Hero\022\'\n\005equip\030\004 \003(\0132\030.DataCommon.Equi"
    "pmentCPP\022+\n\tequipshop\030\005 \003(\0132\030.DataCommon"
    ".EquipShopCPP\022&\n\005field\030\006 \002(\0132\027.ProtoBatt"
    "leField.Field\022,\n\007mission\030\007 \002(\0132\033.ProtoMi"
    "ssion.MissionAllCPP\022\036\n\007science\030\010 \002(\0132\r.U"
    "ser.Science\022\n\n\002ts\030\t \002(\r\022/\n\tyellowvip\030\n \002"
    "(\0132\034.ProtoYellowVip.YellowVipCPP\022&\n\006mark"
    "et\030\013 \001(\0132\026.ProtoMarket.MarketCPP\0221\n\006rewa"
    "rd\030\014 \002(\0132!.ProtoBattleField.ReplyRewardI"
    "nfo\022\034\n\006weapon\030\r \002(\0132\014.User.Weapon\022\036\n\007npc"
    "pass\030\016 \002(\0132\r.User.NPCPass\0222\n\ncumulation\030"
    "\017 \002(\0132\036.ProtoCumulation.CumulationCPP\022 \n"
    "\010activity\030\020 \002(\0132\016.User.Activity\022*\n\005token"
    "\030\021 \003(\0132\033.ProtoOfficial.PublishToken\022-\n\010f"
    "oggates\030\022 \002(\0132\033.ProtoFogGate.FogGateCPPA"
    "ll\022\034\n\004mine\030\023 \002(\0132\016.User.MineItem\022<\n\rdail"
    "ymissions\030\024 \002(\0132%.ProtoDailyMission.Dail"
    "yMissionAllCPP\0220\n\020time_limit_props\030\025 \003(\013"
    "2\026.User.TimeLimtPropItem\0223\n\ncomponents\030\026"
    " \002(\0132\037.ProtoComponent.ComponentAllCPP\022=\n"
    "\020producecomponent\030\027 \002(\0132#.ProtoComponent"
    ".ProduceComponentCPP\0229\n\014achievements\030\030 \002"
    "(\0132#.ProtoAchievement.AchievementAllCPP\022"
    "(\n\telitenpcs\030\031 \002(\0132\025.User.EliteNPCInfoAl"
    "l\"(\n\016Tutorial_stage\022\026\n\016tutorial_stage\030\001 "
    "\002(\r\"\030\n\nServerTime\022\n\n\002ts\030\001 \002(\r\"\?\n\013CostCas"
    "hReq\022\014\n\004cash\030\001 \002(\r\022\017\n\007op_code\030\002 \002(\t\022\021\n\to"
    "peration\030\003 \002(\r\"/\n\014CostCashResp\022\014\n\004cash\030\001"
    " \002(\r\022\021\n\toperation\030\002 \002(\r\"2\n\024OpenNormalGif"
    "gBagReq\022\014\n\004eqid\030\001 \002(\r\022\014\n\004equd\030\002 \002(\r\"0\n\022O"
    "penLuckGifgBagReq\022\014\n\004eqid\030\001 \002(\r\022\014\n\004equd\030"
    "\002 \002(\r\"U\n\017OpenGifgBagResp\022\014\n\004equd\030\001 \002(\r\022\r"
    "\n\005count\030\002 \002(\r\022%\n\010bag_info\030\003 \002(\0132\023.User.R"
    "ewardBagInfo\"\310\001\n\rRewardBagInfo\022+\n\006equips"
    "\030\001 \001(\0132\033.DataCommon.EquipmentAllCPP\022-\n\004b"
    "ase\030\002 \001(\0132\037.DataCommon.CommonBaseRewardC"
    "PP\022)\n\005heros\030\003 \003(\0132\032.ProtoHero.HeroBaseIn"
    "foCPP\0220\n\ncomponents\030\004 \003(\0132\034.ProtoCompone"
    "nt.ComponentCPP\"1\n\023UseTimeLimitPropReq\022\014"
    "\n\004eqid\030\001 \002(\r\022\014\n\004equd\030\002 \002(\r\"Y\n\024UseTimeLim"
    "itPropResp\022\014\n\004equd\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022"
    "$\n\004item\030\003 \002(\0132\026.User.TimeLimtPropItem\"K\n"
    "\025UseUpdateSmeltPropReq\022\017\n\007prop_id\030\001 \002(\r\022"
    "\017\n\007prop_ud\030\002 \002(\r\022\020\n\010equip_ud\030\003 \002(\r\"\216\001\n\026U"
    "seUpdateSmeltPropResp\022\017\n\007prop_ud\030\001 \002(\r\022\020"
    "\n\010prop_cnt\030\002 \002(\r\022\'\n\005equip\030\003 \002(\0132\030.DataCo"
    "mmon.EquipmentCPP\022(\n\004hero\030\004 \001(\0132\032.ProtoH"
    "ero.HeroBaseInfoCPP\"[\n\027UseSpecificSmeltP"
    "ropReq\022\017\n\007prop_id\030\001 \002(\r\022\017\n\007prop_ud\030\002 \002(\r"
    "\022\020\n\010equip_ud\030\003 \002(\r\022\014\n\004type\030\004 \002(\r\"\220\001\n\030Use"
    "SpecificSmeltPropResp\022\017\n\007prop_ud\030\001 \002(\r\022\020"
    "\n\010prop_cnt\030\002 \002(\r\022\'\n\005equip\030\003 \002(\0132\030.DataCo"
    "mmon.EquipmentCPP\022(\n\004hero\030\004 \001(\0132\032.ProtoH"
    "ero.HeroBaseInfoCPP\"3\n\017EliteNPCPushReq\022 "
    "\n\004npcs\030\001 \003(\0132\022.User.EliteNPCInfo", 4832);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  Base::default_instance_ = new Base();
  Building::default_instance_ = new Building();
  Hero::default_instance_ = new Hero();
  Science::default_instance_ = new Science();
  Weapon::default_instance_ = new Weapon();
  NPCPass::default_instance_ = new NPCPass();
  ActivityItem::default_instance_ = new ActivityItem();
  Activity::default_instance_ = new Activity();
  MineItem::default_instance_ = new MineItem();
  TimeLimtPropItem::default_instance_ = new TimeLimtPropItem();
  EliteNPCInfo::default_instance_ = new EliteNPCInfo();
  EliteNPCInfoAll::default_instance_ = new EliteNPCInfoAll();
  User::default_instance_ = new User();
  Tutorial_stage::default_instance_ = new Tutorial_stage();
  ServerTime::default_instance_ = new ServerTime();
  CostCashReq::default_instance_ = new CostCashReq();
  CostCashResp::default_instance_ = new CostCashResp();
  OpenNormalGifgBagReq::default_instance_ = new OpenNormalGifgBagReq();
  OpenLuckGifgBagReq::default_instance_ = new OpenLuckGifgBagReq();
  OpenGifgBagResp::default_instance_ = new OpenGifgBagResp();
  RewardBagInfo::default_instance_ = new RewardBagInfo();
  UseTimeLimitPropReq::default_instance_ = new UseTimeLimitPropReq();
  UseTimeLimitPropResp::default_instance_ = new UseTimeLimitPropResp();
  UseUpdateSmeltPropReq::default_instance_ = new UseUpdateSmeltPropReq();
  UseUpdateSmeltPropResp::default_instance_ = new UseUpdateSmeltPropResp();
  UseSpecificSmeltPropReq::default_instance_ = new UseSpecificSmeltPropReq();
  UseSpecificSmeltPropResp::default_instance_ = new UseSpecificSmeltPropResp();
  EliteNPCPushReq::default_instance_ = new EliteNPCPushReq();
  Base::default_instance_->InitAsDefaultInstance();
  Building::default_instance_->InitAsDefaultInstance();
  Hero::default_instance_->InitAsDefaultInstance();
  Science::default_instance_->InitAsDefaultInstance();
  Weapon::default_instance_->InitAsDefaultInstance();
  NPCPass::default_instance_->InitAsDefaultInstance();
  ActivityItem::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  MineItem::default_instance_->InitAsDefaultInstance();
  TimeLimtPropItem::default_instance_->InitAsDefaultInstance();
  EliteNPCInfo::default_instance_->InitAsDefaultInstance();
  EliteNPCInfoAll::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  Tutorial_stage::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  CostCashReq::default_instance_->InitAsDefaultInstance();
  CostCashResp::default_instance_->InitAsDefaultInstance();
  OpenNormalGifgBagReq::default_instance_->InitAsDefaultInstance();
  OpenLuckGifgBagReq::default_instance_->InitAsDefaultInstance();
  OpenGifgBagResp::default_instance_->InitAsDefaultInstance();
  RewardBagInfo::default_instance_->InitAsDefaultInstance();
  UseTimeLimitPropReq::default_instance_->InitAsDefaultInstance();
  UseTimeLimitPropResp::default_instance_->InitAsDefaultInstance();
  UseUpdateSmeltPropReq::default_instance_->InitAsDefaultInstance();
  UseUpdateSmeltPropResp::default_instance_->InitAsDefaultInstance();
  UseSpecificSmeltPropReq::default_instance_->InitAsDefaultInstance();
  UseSpecificSmeltPropResp::default_instance_->InitAsDefaultInstance();
  EliteNPCPushReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_User_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_User_2eproto {
  StaticDescriptorInitializer_User_2eproto() {
    protobuf_AddDesc_User_2eproto();
  }
} static_descriptor_initializer_User_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Base::kRegisterPlatformFieldNumber;
const int Base::kRegisterTimeFieldNumber;
const int Base::kInviteUidFieldNumber;
const int Base::kLastLoginPlatformFieldNumber;
const int Base::kLastLoginTimeFieldNumber;
const int Base::kLoginTimesFieldNumber;
const int Base::kLoginDaysFieldNumber;
const int Base::kLastActiveTimeFieldNumber;
const int Base::kLastOffTimeFieldNumber;
const int Base::kForbidTsFieldNumber;
const int Base::kForbidReasonFieldNumber;
const int Base::kInviteCountFieldNumber;
const int Base::kTodayInviteCountFieldNumber;
const int Base::kTutorialStageFieldNumber;
const int Base::kNameFieldNumber;
const int Base::kFigFieldNumber;
const int Base::kKingdomFieldNumber;
const int Base::kExpFieldNumber;
const int Base::kLevelFieldNumber;
const int Base::kAccchargeFieldNumber;
const int Base::kViplevelFieldNumber;
const int Base::kCashFieldNumber;
const int Base::kCoinFieldNumber;
const int Base::kWoodFieldNumber;
const int Base::kFoodFieldNumber;
const int Base::kIronFieldNumber;
const int Base::kTicketFieldNumber;
const int Base::kSilkFieldNumber;
const int Base::kOrderFieldNumber;
const int Base::kBagFieldNumber;
const int Base::kPrewardFieldNumber;
const int Base::kLoyalFieldNumber;
const int Base::kSacrificeFieldNumber;
const int Base::kMarketFieldNumber;
const int Base::kBmarketcdFieldNumber;
const int Base::kBanquetFieldNumber;
const int Base::kEshopintimacyFieldNumber;
const int Base::kEshopcdFieldNumber;
const int Base::kRefreshFieldNumber;
const int Base::kArefreshFieldNumber;
const int Base::kHarmmerFieldNumber;
const int Base::kShadowFieldNumber;
const int Base::kUpResTimeFieldNumber;
const int Base::kRestsFieldNumber;
const int Base::kMp1FieldNumber;
const int Base::kMp2FieldNumber;
const int Base::kMk1FieldNumber;
const int Base::kMk2FieldNumber;
const int Base::kRewardbFieldNumber;
const int Base::kMp3FieldNumber;
const int Base::kNpcPassFieldNumber;
const int Base::kFlamenCoinsCntFieldNumber;
const int Base::kFlamemWoodCntFieldNumber;
const int Base::kFlamemFoodCntFieldNumber;
const int Base::kFlamemIronCntFieldNumber;
const int Base::kFirstRechargeFieldNumber;
const int Base::kAutoBuildFlagFieldNumber;
const int Base::kIntegralTimeCntFieldNumber;
const int Base::kMissionTimeFieldNumber;
const int Base::kMissionIdFieldNumber;
const int Base::kVipRewardFieldNumber;
const int Base::kLadderFieldNumber;
const int Base::kLadderTsFieldNumber;
const int Base::kJobRewardTsFieldNumber;
const int Base::kDepartmentFieldNumber;
const int Base::kOfficialFieldNumber;
const int Base::kPrestigeFieldNumber;
const int Base::kTokenTsFieldNumber;
const int Base::kDailyRefreshTsFieldNumber;
const int Base::kDailyRewardTimesFieldNumber;
const int Base::kDailyFreeTimesFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Base)
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Base)
}

void Base::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  register_platform_ = 0u;
  register_time_ = 0u;
  invite_uid_ = 0u;
  last_login_platform_ = 0u;
  last_login_time_ = 0u;
  login_times_ = 0u;
  login_days_ = 0u;
  last_active_time_ = 0u;
  last_off_time_ = 0u;
  forbid_ts_ = 0u;
  forbid_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invite_count_ = 0u;
  today_invite_count_ = 0u;
  tutorial_stage_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kingdom_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  acccharge_ = 0u;
  viplevel_ = 0u;
  cash_ = 0u;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  ticket_ = 0u;
  silk_ = 0u;
  order_ = 0u;
  bag_ = 0u;
  preward_ = 0u;
  loyal_ = 0u;
  sacrifice_ = 0u;
  market_ = 0u;
  bmarketcd_ = 0u;
  banquet_ = 0u;
  eshopintimacy_ = 0u;
  eshopcd_ = 0u;
  refresh_ = 0u;
  arefresh_ = 0u;
  harmmer_ = 0u;
  shadow_ = 0u;
  up_res_time_ = 0u;
  rests_ = 0u;
  mp1_ = 0u;
  mp2_ = 0u;
  mk1_ = 0u;
  mk2_ = 0u;
  rewardb_ = 0u;
  mp3_ = 0u;
  npc_pass_ = 0u;
  flamen_coins_cnt_ = 0u;
  flamem_wood_cnt_ = 0u;
  flamem_food_cnt_ = 0u;
  flamem_iron_cnt_ = 0u;
  first_recharge_ = 0u;
  auto_build_flag_ = 0u;
  integral_time_cnt_ = 0u;
  mission_time_ = 0u;
  mission_id_ = 0u;
  vip_reward_ = 0u;
  ladder_ = 0u;
  ladder_ts_ = 0u;
  job_reward_ts_ = 0u;
  department_ = 0u;
  official_ = 0u;
  prestige_ = 0u;
  token_ts_ = 0u;
  daily_refresh_ts_ = 0u;
  daily_reward_times_ = 0u;
  daily_free_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:User.Base)
  SharedDtor();
}

void Base::SharedDtor() {
  if (forbid_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forbid_reason_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(register_platform_, last_active_time_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(last_off_time_, forbid_ts_);
    ZR_(invite_count_, today_invite_count_);
    if (has_forbid_reason()) {
      if (forbid_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        forbid_reason_->clear();
      }
    }
    tutorial_stage_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(exp_, wood_);
    kingdom_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(food_, loyal_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(sacrifice_, arefresh_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(harmmer_, mk2_);
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(rewardb_, first_recharge_);
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    ZR_(auto_build_flag_, job_reward_ts_);
  }
  if (_has_bits_[64 / 32] & 127) {
    ZR_(department_, daily_free_times_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 register_platform = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &register_platform_)));
          set_has_register_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_register_time;
        break;
      }

      // required uint32 register_time = 2;
      case 2: {
        if (tag == 16) {
         parse_register_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &register_time_)));
          set_has_register_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invite_uid;
        break;
      }

      // required uint32 invite_uid = 3;
      case 3: {
        if (tag == 24) {
         parse_invite_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_uid_)));
          set_has_invite_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_login_platform;
        break;
      }

      // required uint32 last_login_platform = 4;
      case 4: {
        if (tag == 32) {
         parse_last_login_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_platform_)));
          set_has_last_login_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_login_time;
        break;
      }

      // required uint32 last_login_time = 5;
      case 5: {
        if (tag == 40) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_login_times;
        break;
      }

      // required uint32 login_times = 6;
      case 6: {
        if (tag == 48) {
         parse_login_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_times_)));
          set_has_login_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_login_days;
        break;
      }

      // required uint32 login_days = 7;
      case 7: {
        if (tag == 56) {
         parse_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_days_)));
          set_has_login_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_active_time;
        break;
      }

      // required uint32 last_active_time = 8;
      case 8: {
        if (tag == 64) {
         parse_last_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_active_time_)));
          set_has_last_active_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_last_off_time;
        break;
      }

      // required uint32 last_off_time = 9;
      case 9: {
        if (tag == 72) {
         parse_last_off_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_off_time_)));
          set_has_last_off_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_forbid_ts;
        break;
      }

      // required uint32 forbid_ts = 10;
      case 10: {
        if (tag == 80) {
         parse_forbid_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbid_ts_)));
          set_has_forbid_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_forbid_reason;
        break;
      }

      // required bytes forbid_reason = 11;
      case 11: {
        if (tag == 90) {
         parse_forbid_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forbid_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_invite_count;
        break;
      }

      // required uint32 invite_count = 12;
      case 12: {
        if (tag == 96) {
         parse_invite_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_count_)));
          set_has_invite_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_today_invite_count;
        break;
      }

      // required uint32 today_invite_count = 13;
      case 13: {
        if (tag == 104) {
         parse_today_invite_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_invite_count_)));
          set_has_today_invite_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tutorial_stage;
        break;
      }

      // required uint32 tutorial_stage = 14;
      case 14: {
        if (tag == 112) {
         parse_tutorial_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_stage_)));
          set_has_tutorial_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_name;
        break;
      }

      // required bytes name = 15;
      case 15: {
        if (tag == 122) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_fig;
        break;
      }

      // required bytes fig = 16;
      case 16: {
        if (tag == 130) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_kingdom;
        break;
      }

      // required uint32 kingdom = 17;
      case 17: {
        if (tag == 136) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_exp;
        break;
      }

      // required uint64 exp = 18;
      case 18: {
        if (tag == 144) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_level;
        break;
      }

      // required uint32 level = 19;
      case 19: {
        if (tag == 152) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_acccharge;
        break;
      }

      // required uint32 acccharge = 20;
      case 20: {
        if (tag == 160) {
         parse_acccharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acccharge_)));
          set_has_acccharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 21;
      case 21: {
        if (tag == 168) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_cash;
        break;
      }

      // required uint32 cash = 22;
      case 22: {
        if (tag == 176) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_coin;
        break;
      }

      // required uint32 coin = 23;
      case 23: {
        if (tag == 184) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_wood;
        break;
      }

      // required uint32 wood = 24;
      case 24: {
        if (tag == 192) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_food;
        break;
      }

      // required uint32 food = 25;
      case 25: {
        if (tag == 200) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_iron;
        break;
      }

      // required uint32 iron = 26;
      case 26: {
        if (tag == 208) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_ticket;
        break;
      }

      // required uint32 ticket = 27;
      case 27: {
        if (tag == 216) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_silk;
        break;
      }

      // required uint32 silk = 28;
      case 28: {
        if (tag == 224) {
         parse_silk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silk_)));
          set_has_silk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_order;
        break;
      }

      // required uint32 order = 29;
      case 29: {
        if (tag == 232) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_bag;
        break;
      }

      // required uint32 bag = 30;
      case 30: {
        if (tag == 240) {
         parse_bag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_)));
          set_has_bag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_preward;
        break;
      }

      // required uint32 preward = 31;
      case 31: {
        if (tag == 248) {
         parse_preward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preward_)));
          set_has_preward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_loyal;
        break;
      }

      // required uint32 loyal = 32;
      case 32: {
        if (tag == 256) {
         parse_loyal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loyal_)));
          set_has_loyal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_sacrifice;
        break;
      }

      // required uint32 sacrifice = 33;
      case 33: {
        if (tag == 264) {
         parse_sacrifice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sacrifice_)));
          set_has_sacrifice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_market;
        break;
      }

      // required uint32 market = 34;
      case 34: {
        if (tag == 272) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_bmarketcd;
        break;
      }

      // required uint32 bmarketcd = 35;
      case 35: {
        if (tag == 280) {
         parse_bmarketcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bmarketcd_)));
          set_has_bmarketcd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_banquet;
        break;
      }

      // required uint32 banquet = 36;
      case 36: {
        if (tag == 288) {
         parse_banquet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banquet_)));
          set_has_banquet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_eshopintimacy;
        break;
      }

      // required uint32 eshopintimacy = 37;
      case 37: {
        if (tag == 296) {
         parse_eshopintimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eshopintimacy_)));
          set_has_eshopintimacy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_eshopcd;
        break;
      }

      // required uint32 eshopcd = 38;
      case 38: {
        if (tag == 304) {
         parse_eshopcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eshopcd_)));
          set_has_eshopcd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_refresh;
        break;
      }

      // required uint32 refresh = 39;
      case 39: {
        if (tag == 312) {
         parse_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_arefresh;
        break;
      }

      // required uint32 arefresh = 40;
      case 40: {
        if (tag == 320) {
         parse_arefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arefresh_)));
          set_has_arefresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_harmmer;
        break;
      }

      // required uint32 harmmer = 41;
      case 41: {
        if (tag == 328) {
         parse_harmmer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harmmer_)));
          set_has_harmmer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_shadow;
        break;
      }

      // required uint32 shadow = 42;
      case 42: {
        if (tag == 336) {
         parse_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadow_)));
          set_has_shadow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_up_res_time;
        break;
      }

      // required uint32 up_res_time = 43;
      case 43: {
        if (tag == 344) {
         parse_up_res_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_res_time_)));
          set_has_up_res_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_rests;
        break;
      }

      // required uint32 rests = 44;
      case 44: {
        if (tag == 352) {
         parse_rests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rests_)));
          set_has_rests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_mp1;
        break;
      }

      // required uint32 mp1 = 45;
      case 45: {
        if (tag == 360) {
         parse_mp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp1_)));
          set_has_mp1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_mp2;
        break;
      }

      // required uint32 mp2 = 46;
      case 46: {
        if (tag == 368) {
         parse_mp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp2_)));
          set_has_mp2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_mk1;
        break;
      }

      // required uint32 mk1 = 47;
      case 47: {
        if (tag == 376) {
         parse_mk1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mk1_)));
          set_has_mk1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_mk2;
        break;
      }

      // required uint32 mk2 = 48;
      case 48: {
        if (tag == 384) {
         parse_mk2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mk2_)));
          set_has_mk2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_rewardb;
        break;
      }

      // required uint32 rewardb = 49;
      case 49: {
        if (tag == 392) {
         parse_rewardb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardb_)));
          set_has_rewardb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_mp3;
        break;
      }

      // required uint32 mp3 = 50;
      case 50: {
        if (tag == 400) {
         parse_mp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp3_)));
          set_has_mp3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_npc_pass;
        break;
      }

      // required uint32 npc_pass = 51;
      case 51: {
        if (tag == 408) {
         parse_npc_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_pass_)));
          set_has_npc_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_flamen_coins_cnt;
        break;
      }

      // required uint32 flamen_coins_cnt = 52;
      case 52: {
        if (tag == 416) {
         parse_flamen_coins_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flamen_coins_cnt_)));
          set_has_flamen_coins_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_flamem_wood_cnt;
        break;
      }

      // required uint32 flamem_wood_cnt = 53;
      case 53: {
        if (tag == 424) {
         parse_flamem_wood_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flamem_wood_cnt_)));
          set_has_flamem_wood_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_flamem_food_cnt;
        break;
      }

      // required uint32 flamem_food_cnt = 54;
      case 54: {
        if (tag == 432) {
         parse_flamem_food_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flamem_food_cnt_)));
          set_has_flamem_food_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_flamem_iron_cnt;
        break;
      }

      // required uint32 flamem_iron_cnt = 55;
      case 55: {
        if (tag == 440) {
         parse_flamem_iron_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flamem_iron_cnt_)));
          set_has_flamem_iron_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_first_recharge;
        break;
      }

      // required uint32 first_recharge = 56;
      case 56: {
        if (tag == 448) {
         parse_first_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_recharge_)));
          set_has_first_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_auto_build_flag;
        break;
      }

      // required uint32 auto_build_flag = 57;
      case 57: {
        if (tag == 456) {
         parse_auto_build_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_build_flag_)));
          set_has_auto_build_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_integral_time_cnt;
        break;
      }

      // required uint32 integral_time_cnt = 58;
      case 58: {
        if (tag == 464) {
         parse_integral_time_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_time_cnt_)));
          set_has_integral_time_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_mission_time;
        break;
      }

      // required uint32 mission_time = 59;
      case 59: {
        if (tag == 472) {
         parse_mission_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_time_)));
          set_has_mission_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_mission_id;
        break;
      }

      // required uint32 mission_id = 60;
      case 60: {
        if (tag == 480) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_vip_reward;
        break;
      }

      // required uint32 vip_reward = 61;
      case 61: {
        if (tag == 488) {
         parse_vip_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_reward_)));
          set_has_vip_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_ladder;
        break;
      }

      // required uint32 ladder = 62;
      case 62: {
        if (tag == 496) {
         parse_ladder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ladder_)));
          set_has_ladder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_ladder_ts;
        break;
      }

      // required uint32 ladder_ts = 63;
      case 63: {
        if (tag == 504) {
         parse_ladder_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ladder_ts_)));
          set_has_ladder_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_job_reward_ts;
        break;
      }

      // required uint32 job_reward_ts = 64;
      case 64: {
        if (tag == 512) {
         parse_job_reward_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_reward_ts_)));
          set_has_job_reward_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_department;
        break;
      }

      // required uint32 department = 65;
      case 65: {
        if (tag == 520) {
         parse_department:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &department_)));
          set_has_department();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_official;
        break;
      }

      // required uint32 official = 66;
      case 66: {
        if (tag == 528) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 67;
      case 67: {
        if (tag == 536) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_token_ts;
        break;
      }

      // required uint32 token_ts = 68;
      case 68: {
        if (tag == 544) {
         parse_token_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_ts_)));
          set_has_token_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_daily_refresh_ts;
        break;
      }

      // required uint32 daily_refresh_ts = 69;
      case 69: {
        if (tag == 552) {
         parse_daily_refresh_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_refresh_ts_)));
          set_has_daily_refresh_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_daily_reward_times;
        break;
      }

      // required uint32 daily_reward_times = 70;
      case 70: {
        if (tag == 560) {
         parse_daily_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_reward_times_)));
          set_has_daily_reward_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_daily_free_times;
        break;
      }

      // required uint32 daily_free_times = 71;
      case 71: {
        if (tag == 568) {
         parse_daily_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_free_times_)));
          set_has_daily_free_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Base)
  // required uint32 register_platform = 1;
  if (has_register_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->register_platform(), output);
  }

  // required uint32 register_time = 2;
  if (has_register_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->register_time(), output);
  }

  // required uint32 invite_uid = 3;
  if (has_invite_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->invite_uid(), output);
  }

  // required uint32 last_login_platform = 4;
  if (has_last_login_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_login_platform(), output);
  }

  // required uint32 last_login_time = 5;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_login_time(), output);
  }

  // required uint32 login_times = 6;
  if (has_login_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->login_times(), output);
  }

  // required uint32 login_days = 7;
  if (has_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->login_days(), output);
  }

  // required uint32 last_active_time = 8;
  if (has_last_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_active_time(), output);
  }

  // required uint32 last_off_time = 9;
  if (has_last_off_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_off_time(), output);
  }

  // required uint32 forbid_ts = 10;
  if (has_forbid_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->forbid_ts(), output);
  }

  // required bytes forbid_reason = 11;
  if (has_forbid_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->forbid_reason(), output);
  }

  // required uint32 invite_count = 12;
  if (has_invite_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->invite_count(), output);
  }

  // required uint32 today_invite_count = 13;
  if (has_today_invite_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->today_invite_count(), output);
  }

  // required uint32 tutorial_stage = 14;
  if (has_tutorial_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tutorial_stage(), output);
  }

  // required bytes name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->name(), output);
  }

  // required bytes fig = 16;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->fig(), output);
  }

  // required uint32 kingdom = 17;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->kingdom(), output);
  }

  // required uint64 exp = 18;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->exp(), output);
  }

  // required uint32 level = 19;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->level(), output);
  }

  // required uint32 acccharge = 20;
  if (has_acccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->acccharge(), output);
  }

  // required uint32 viplevel = 21;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->viplevel(), output);
  }

  // required uint32 cash = 22;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->cash(), output);
  }

  // required uint32 coin = 23;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->coin(), output);
  }

  // required uint32 wood = 24;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->wood(), output);
  }

  // required uint32 food = 25;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->food(), output);
  }

  // required uint32 iron = 26;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->iron(), output);
  }

  // required uint32 ticket = 27;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->ticket(), output);
  }

  // required uint32 silk = 28;
  if (has_silk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->silk(), output);
  }

  // required uint32 order = 29;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->order(), output);
  }

  // required uint32 bag = 30;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->bag(), output);
  }

  // required uint32 preward = 31;
  if (has_preward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->preward(), output);
  }

  // required uint32 loyal = 32;
  if (has_loyal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->loyal(), output);
  }

  // required uint32 sacrifice = 33;
  if (has_sacrifice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->sacrifice(), output);
  }

  // required uint32 market = 34;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->market(), output);
  }

  // required uint32 bmarketcd = 35;
  if (has_bmarketcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->bmarketcd(), output);
  }

  // required uint32 banquet = 36;
  if (has_banquet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->banquet(), output);
  }

  // required uint32 eshopintimacy = 37;
  if (has_eshopintimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->eshopintimacy(), output);
  }

  // required uint32 eshopcd = 38;
  if (has_eshopcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->eshopcd(), output);
  }

  // required uint32 refresh = 39;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->refresh(), output);
  }

  // required uint32 arefresh = 40;
  if (has_arefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->arefresh(), output);
  }

  // required uint32 harmmer = 41;
  if (has_harmmer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->harmmer(), output);
  }

  // required uint32 shadow = 42;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->shadow(), output);
  }

  // required uint32 up_res_time = 43;
  if (has_up_res_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->up_res_time(), output);
  }

  // required uint32 rests = 44;
  if (has_rests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->rests(), output);
  }

  // required uint32 mp1 = 45;
  if (has_mp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->mp1(), output);
  }

  // required uint32 mp2 = 46;
  if (has_mp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->mp2(), output);
  }

  // required uint32 mk1 = 47;
  if (has_mk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->mk1(), output);
  }

  // required uint32 mk2 = 48;
  if (has_mk2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->mk2(), output);
  }

  // required uint32 rewardb = 49;
  if (has_rewardb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->rewardb(), output);
  }

  // required uint32 mp3 = 50;
  if (has_mp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->mp3(), output);
  }

  // required uint32 npc_pass = 51;
  if (has_npc_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->npc_pass(), output);
  }

  // required uint32 flamen_coins_cnt = 52;
  if (has_flamen_coins_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->flamen_coins_cnt(), output);
  }

  // required uint32 flamem_wood_cnt = 53;
  if (has_flamem_wood_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->flamem_wood_cnt(), output);
  }

  // required uint32 flamem_food_cnt = 54;
  if (has_flamem_food_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->flamem_food_cnt(), output);
  }

  // required uint32 flamem_iron_cnt = 55;
  if (has_flamem_iron_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->flamem_iron_cnt(), output);
  }

  // required uint32 first_recharge = 56;
  if (has_first_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->first_recharge(), output);
  }

  // required uint32 auto_build_flag = 57;
  if (has_auto_build_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->auto_build_flag(), output);
  }

  // required uint32 integral_time_cnt = 58;
  if (has_integral_time_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->integral_time_cnt(), output);
  }

  // required uint32 mission_time = 59;
  if (has_mission_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->mission_time(), output);
  }

  // required uint32 mission_id = 60;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->mission_id(), output);
  }

  // required uint32 vip_reward = 61;
  if (has_vip_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->vip_reward(), output);
  }

  // required uint32 ladder = 62;
  if (has_ladder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->ladder(), output);
  }

  // required uint32 ladder_ts = 63;
  if (has_ladder_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->ladder_ts(), output);
  }

  // required uint32 job_reward_ts = 64;
  if (has_job_reward_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->job_reward_ts(), output);
  }

  // required uint32 department = 65;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->department(), output);
  }

  // required uint32 official = 66;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->official(), output);
  }

  // optional uint32 prestige = 67;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->prestige(), output);
  }

  // required uint32 token_ts = 68;
  if (has_token_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->token_ts(), output);
  }

  // required uint32 daily_refresh_ts = 69;
  if (has_daily_refresh_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->daily_refresh_ts(), output);
  }

  // required uint32 daily_reward_times = 70;
  if (has_daily_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->daily_reward_times(), output);
  }

  // required uint32 daily_free_times = 71;
  if (has_daily_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->daily_free_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Base)
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Base)
  // required uint32 register_platform = 1;
  if (has_register_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->register_platform(), target);
  }

  // required uint32 register_time = 2;
  if (has_register_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->register_time(), target);
  }

  // required uint32 invite_uid = 3;
  if (has_invite_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->invite_uid(), target);
  }

  // required uint32 last_login_platform = 4;
  if (has_last_login_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_login_platform(), target);
  }

  // required uint32 last_login_time = 5;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_login_time(), target);
  }

  // required uint32 login_times = 6;
  if (has_login_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->login_times(), target);
  }

  // required uint32 login_days = 7;
  if (has_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->login_days(), target);
  }

  // required uint32 last_active_time = 8;
  if (has_last_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_active_time(), target);
  }

  // required uint32 last_off_time = 9;
  if (has_last_off_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_off_time(), target);
  }

  // required uint32 forbid_ts = 10;
  if (has_forbid_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->forbid_ts(), target);
  }

  // required bytes forbid_reason = 11;
  if (has_forbid_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->forbid_reason(), target);
  }

  // required uint32 invite_count = 12;
  if (has_invite_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->invite_count(), target);
  }

  // required uint32 today_invite_count = 13;
  if (has_today_invite_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->today_invite_count(), target);
  }

  // required uint32 tutorial_stage = 14;
  if (has_tutorial_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tutorial_stage(), target);
  }

  // required bytes name = 15;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->name(), target);
  }

  // required bytes fig = 16;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->fig(), target);
  }

  // required uint32 kingdom = 17;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->kingdom(), target);
  }

  // required uint64 exp = 18;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->exp(), target);
  }

  // required uint32 level = 19;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->level(), target);
  }

  // required uint32 acccharge = 20;
  if (has_acccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->acccharge(), target);
  }

  // required uint32 viplevel = 21;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->viplevel(), target);
  }

  // required uint32 cash = 22;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->cash(), target);
  }

  // required uint32 coin = 23;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->coin(), target);
  }

  // required uint32 wood = 24;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->wood(), target);
  }

  // required uint32 food = 25;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->food(), target);
  }

  // required uint32 iron = 26;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->iron(), target);
  }

  // required uint32 ticket = 27;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->ticket(), target);
  }

  // required uint32 silk = 28;
  if (has_silk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->silk(), target);
  }

  // required uint32 order = 29;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->order(), target);
  }

  // required uint32 bag = 30;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->bag(), target);
  }

  // required uint32 preward = 31;
  if (has_preward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->preward(), target);
  }

  // required uint32 loyal = 32;
  if (has_loyal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->loyal(), target);
  }

  // required uint32 sacrifice = 33;
  if (has_sacrifice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->sacrifice(), target);
  }

  // required uint32 market = 34;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->market(), target);
  }

  // required uint32 bmarketcd = 35;
  if (has_bmarketcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->bmarketcd(), target);
  }

  // required uint32 banquet = 36;
  if (has_banquet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->banquet(), target);
  }

  // required uint32 eshopintimacy = 37;
  if (has_eshopintimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->eshopintimacy(), target);
  }

  // required uint32 eshopcd = 38;
  if (has_eshopcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->eshopcd(), target);
  }

  // required uint32 refresh = 39;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->refresh(), target);
  }

  // required uint32 arefresh = 40;
  if (has_arefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->arefresh(), target);
  }

  // required uint32 harmmer = 41;
  if (has_harmmer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->harmmer(), target);
  }

  // required uint32 shadow = 42;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->shadow(), target);
  }

  // required uint32 up_res_time = 43;
  if (has_up_res_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->up_res_time(), target);
  }

  // required uint32 rests = 44;
  if (has_rests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->rests(), target);
  }

  // required uint32 mp1 = 45;
  if (has_mp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->mp1(), target);
  }

  // required uint32 mp2 = 46;
  if (has_mp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->mp2(), target);
  }

  // required uint32 mk1 = 47;
  if (has_mk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->mk1(), target);
  }

  // required uint32 mk2 = 48;
  if (has_mk2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->mk2(), target);
  }

  // required uint32 rewardb = 49;
  if (has_rewardb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->rewardb(), target);
  }

  // required uint32 mp3 = 50;
  if (has_mp3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->mp3(), target);
  }

  // required uint32 npc_pass = 51;
  if (has_npc_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->npc_pass(), target);
  }

  // required uint32 flamen_coins_cnt = 52;
  if (has_flamen_coins_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->flamen_coins_cnt(), target);
  }

  // required uint32 flamem_wood_cnt = 53;
  if (has_flamem_wood_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->flamem_wood_cnt(), target);
  }

  // required uint32 flamem_food_cnt = 54;
  if (has_flamem_food_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->flamem_food_cnt(), target);
  }

  // required uint32 flamem_iron_cnt = 55;
  if (has_flamem_iron_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->flamem_iron_cnt(), target);
  }

  // required uint32 first_recharge = 56;
  if (has_first_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->first_recharge(), target);
  }

  // required uint32 auto_build_flag = 57;
  if (has_auto_build_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->auto_build_flag(), target);
  }

  // required uint32 integral_time_cnt = 58;
  if (has_integral_time_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->integral_time_cnt(), target);
  }

  // required uint32 mission_time = 59;
  if (has_mission_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->mission_time(), target);
  }

  // required uint32 mission_id = 60;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->mission_id(), target);
  }

  // required uint32 vip_reward = 61;
  if (has_vip_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->vip_reward(), target);
  }

  // required uint32 ladder = 62;
  if (has_ladder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->ladder(), target);
  }

  // required uint32 ladder_ts = 63;
  if (has_ladder_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->ladder_ts(), target);
  }

  // required uint32 job_reward_ts = 64;
  if (has_job_reward_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->job_reward_ts(), target);
  }

  // required uint32 department = 65;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->department(), target);
  }

  // required uint32 official = 66;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->official(), target);
  }

  // optional uint32 prestige = 67;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->prestige(), target);
  }

  // required uint32 token_ts = 68;
  if (has_token_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->token_ts(), target);
  }

  // required uint32 daily_refresh_ts = 69;
  if (has_daily_refresh_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->daily_refresh_ts(), target);
  }

  // required uint32 daily_reward_times = 70;
  if (has_daily_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->daily_reward_times(), target);
  }

  // required uint32 daily_free_times = 71;
  if (has_daily_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->daily_free_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Base)
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 register_platform = 1;
    if (has_register_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->register_platform());
    }

    // required uint32 register_time = 2;
    if (has_register_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->register_time());
    }

    // required uint32 invite_uid = 3;
    if (has_invite_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_uid());
    }

    // required uint32 last_login_platform = 4;
    if (has_last_login_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_platform());
    }

    // required uint32 last_login_time = 5;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }

    // required uint32 login_times = 6;
    if (has_login_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_times());
    }

    // required uint32 login_days = 7;
    if (has_login_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_days());
    }

    // required uint32 last_active_time = 8;
    if (has_last_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_active_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 last_off_time = 9;
    if (has_last_off_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_off_time());
    }

    // required uint32 forbid_ts = 10;
    if (has_forbid_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbid_ts());
    }

    // required bytes forbid_reason = 11;
    if (has_forbid_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forbid_reason());
    }

    // required uint32 invite_count = 12;
    if (has_invite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_count());
    }

    // required uint32 today_invite_count = 13;
    if (has_today_invite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_invite_count());
    }

    // required uint32 tutorial_stage = 14;
    if (has_tutorial_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_stage());
    }

    // required bytes name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes fig = 16;
    if (has_fig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 kingdom = 17;
    if (has_kingdom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

    // required uint64 exp = 18;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 level = 19;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 acccharge = 20;
    if (has_acccharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acccharge());
    }

    // required uint32 viplevel = 21;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 cash = 22;
    if (has_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 coin = 23;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 24;
    if (has_wood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 food = 25;
    if (has_food()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 iron = 26;
    if (has_iron()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

    // required uint32 ticket = 27;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket());
    }

    // required uint32 silk = 28;
    if (has_silk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silk());
    }

    // required uint32 order = 29;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // required uint32 bag = 30;
    if (has_bag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bag());
    }

    // required uint32 preward = 31;
    if (has_preward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preward());
    }

    // required uint32 loyal = 32;
    if (has_loyal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loyal());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 sacrifice = 33;
    if (has_sacrifice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sacrifice());
    }

    // required uint32 market = 34;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // required uint32 bmarketcd = 35;
    if (has_bmarketcd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bmarketcd());
    }

    // required uint32 banquet = 36;
    if (has_banquet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banquet());
    }

    // required uint32 eshopintimacy = 37;
    if (has_eshopintimacy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eshopintimacy());
    }

    // required uint32 eshopcd = 38;
    if (has_eshopcd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eshopcd());
    }

    // required uint32 refresh = 39;
    if (has_refresh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh());
    }

    // required uint32 arefresh = 40;
    if (has_arefresh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arefresh());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required uint32 harmmer = 41;
    if (has_harmmer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harmmer());
    }

    // required uint32 shadow = 42;
    if (has_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadow());
    }

    // required uint32 up_res_time = 43;
    if (has_up_res_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_res_time());
    }

    // required uint32 rests = 44;
    if (has_rests()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rests());
    }

    // required uint32 mp1 = 45;
    if (has_mp1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp1());
    }

    // required uint32 mp2 = 46;
    if (has_mp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp2());
    }

    // required uint32 mk1 = 47;
    if (has_mk1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mk1());
    }

    // required uint32 mk2 = 48;
    if (has_mk2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mk2());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required uint32 rewardb = 49;
    if (has_rewardb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardb());
    }

    // required uint32 mp3 = 50;
    if (has_mp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp3());
    }

    // required uint32 npc_pass = 51;
    if (has_npc_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_pass());
    }

    // required uint32 flamen_coins_cnt = 52;
    if (has_flamen_coins_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flamen_coins_cnt());
    }

    // required uint32 flamem_wood_cnt = 53;
    if (has_flamem_wood_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flamem_wood_cnt());
    }

    // required uint32 flamem_food_cnt = 54;
    if (has_flamem_food_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flamem_food_cnt());
    }

    // required uint32 flamem_iron_cnt = 55;
    if (has_flamem_iron_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flamem_iron_cnt());
    }

    // required uint32 first_recharge = 56;
    if (has_first_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_recharge());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // required uint32 auto_build_flag = 57;
    if (has_auto_build_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_build_flag());
    }

    // required uint32 integral_time_cnt = 58;
    if (has_integral_time_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral_time_cnt());
    }

    // required uint32 mission_time = 59;
    if (has_mission_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_time());
    }

    // required uint32 mission_id = 60;
    if (has_mission_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // required uint32 vip_reward = 61;
    if (has_vip_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_reward());
    }

    // required uint32 ladder = 62;
    if (has_ladder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ladder());
    }

    // required uint32 ladder_ts = 63;
    if (has_ladder_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ladder_ts());
    }

    // required uint32 job_reward_ts = 64;
    if (has_job_reward_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_reward_ts());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // required uint32 department = 65;
    if (has_department()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->department());
    }

    // required uint32 official = 66;
    if (has_official()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

    // optional uint32 prestige = 67;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

    // required uint32 token_ts = 68;
    if (has_token_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_ts());
    }

    // required uint32 daily_refresh_ts = 69;
    if (has_daily_refresh_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_refresh_ts());
    }

    // required uint32 daily_reward_times = 70;
    if (has_daily_reward_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_reward_times());
    }

    // required uint32 daily_free_times = 71;
    if (has_daily_free_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_free_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_register_platform()) {
      set_register_platform(from.register_platform());
    }
    if (from.has_register_time()) {
      set_register_time(from.register_time());
    }
    if (from.has_invite_uid()) {
      set_invite_uid(from.invite_uid());
    }
    if (from.has_last_login_platform()) {
      set_last_login_platform(from.last_login_platform());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_login_times()) {
      set_login_times(from.login_times());
    }
    if (from.has_login_days()) {
      set_login_days(from.login_days());
    }
    if (from.has_last_active_time()) {
      set_last_active_time(from.last_active_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_off_time()) {
      set_last_off_time(from.last_off_time());
    }
    if (from.has_forbid_ts()) {
      set_forbid_ts(from.forbid_ts());
    }
    if (from.has_forbid_reason()) {
      set_forbid_reason(from.forbid_reason());
    }
    if (from.has_invite_count()) {
      set_invite_count(from.invite_count());
    }
    if (from.has_today_invite_count()) {
      set_today_invite_count(from.today_invite_count());
    }
    if (from.has_tutorial_stage()) {
      set_tutorial_stage(from.tutorial_stage());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_acccharge()) {
      set_acccharge(from.acccharge());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_silk()) {
      set_silk(from.silk());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_bag()) {
      set_bag(from.bag());
    }
    if (from.has_preward()) {
      set_preward(from.preward());
    }
    if (from.has_loyal()) {
      set_loyal(from.loyal());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sacrifice()) {
      set_sacrifice(from.sacrifice());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_bmarketcd()) {
      set_bmarketcd(from.bmarketcd());
    }
    if (from.has_banquet()) {
      set_banquet(from.banquet());
    }
    if (from.has_eshopintimacy()) {
      set_eshopintimacy(from.eshopintimacy());
    }
    if (from.has_eshopcd()) {
      set_eshopcd(from.eshopcd());
    }
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
    if (from.has_arefresh()) {
      set_arefresh(from.arefresh());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_harmmer()) {
      set_harmmer(from.harmmer());
    }
    if (from.has_shadow()) {
      set_shadow(from.shadow());
    }
    if (from.has_up_res_time()) {
      set_up_res_time(from.up_res_time());
    }
    if (from.has_rests()) {
      set_rests(from.rests());
    }
    if (from.has_mp1()) {
      set_mp1(from.mp1());
    }
    if (from.has_mp2()) {
      set_mp2(from.mp2());
    }
    if (from.has_mk1()) {
      set_mk1(from.mk1());
    }
    if (from.has_mk2()) {
      set_mk2(from.mk2());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_rewardb()) {
      set_rewardb(from.rewardb());
    }
    if (from.has_mp3()) {
      set_mp3(from.mp3());
    }
    if (from.has_npc_pass()) {
      set_npc_pass(from.npc_pass());
    }
    if (from.has_flamen_coins_cnt()) {
      set_flamen_coins_cnt(from.flamen_coins_cnt());
    }
    if (from.has_flamem_wood_cnt()) {
      set_flamem_wood_cnt(from.flamem_wood_cnt());
    }
    if (from.has_flamem_food_cnt()) {
      set_flamem_food_cnt(from.flamem_food_cnt());
    }
    if (from.has_flamem_iron_cnt()) {
      set_flamem_iron_cnt(from.flamem_iron_cnt());
    }
    if (from.has_first_recharge()) {
      set_first_recharge(from.first_recharge());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_auto_build_flag()) {
      set_auto_build_flag(from.auto_build_flag());
    }
    if (from.has_integral_time_cnt()) {
      set_integral_time_cnt(from.integral_time_cnt());
    }
    if (from.has_mission_time()) {
      set_mission_time(from.mission_time());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_vip_reward()) {
      set_vip_reward(from.vip_reward());
    }
    if (from.has_ladder()) {
      set_ladder(from.ladder());
    }
    if (from.has_ladder_ts()) {
      set_ladder_ts(from.ladder_ts());
    }
    if (from.has_job_reward_ts()) {
      set_job_reward_ts(from.job_reward_ts());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_token_ts()) {
      set_token_ts(from.token_ts());
    }
    if (from.has_daily_refresh_ts()) {
      set_daily_refresh_ts(from.daily_refresh_ts());
    }
    if (from.has_daily_reward_times()) {
      set_daily_reward_times(from.daily_reward_times());
    }
    if (from.has_daily_free_times()) {
      set_daily_free_times(from.daily_free_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[2] & 0x0000007b) != 0x0000007b) return false;

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(register_platform_, other->register_platform_);
    std::swap(register_time_, other->register_time_);
    std::swap(invite_uid_, other->invite_uid_);
    std::swap(last_login_platform_, other->last_login_platform_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(login_times_, other->login_times_);
    std::swap(login_days_, other->login_days_);
    std::swap(last_active_time_, other->last_active_time_);
    std::swap(last_off_time_, other->last_off_time_);
    std::swap(forbid_ts_, other->forbid_ts_);
    std::swap(forbid_reason_, other->forbid_reason_);
    std::swap(invite_count_, other->invite_count_);
    std::swap(today_invite_count_, other->today_invite_count_);
    std::swap(tutorial_stage_, other->tutorial_stage_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(kingdom_, other->kingdom_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(acccharge_, other->acccharge_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(cash_, other->cash_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(ticket_, other->ticket_);
    std::swap(silk_, other->silk_);
    std::swap(order_, other->order_);
    std::swap(bag_, other->bag_);
    std::swap(preward_, other->preward_);
    std::swap(loyal_, other->loyal_);
    std::swap(sacrifice_, other->sacrifice_);
    std::swap(market_, other->market_);
    std::swap(bmarketcd_, other->bmarketcd_);
    std::swap(banquet_, other->banquet_);
    std::swap(eshopintimacy_, other->eshopintimacy_);
    std::swap(eshopcd_, other->eshopcd_);
    std::swap(refresh_, other->refresh_);
    std::swap(arefresh_, other->arefresh_);
    std::swap(harmmer_, other->harmmer_);
    std::swap(shadow_, other->shadow_);
    std::swap(up_res_time_, other->up_res_time_);
    std::swap(rests_, other->rests_);
    std::swap(mp1_, other->mp1_);
    std::swap(mp2_, other->mp2_);
    std::swap(mk1_, other->mk1_);
    std::swap(mk2_, other->mk2_);
    std::swap(rewardb_, other->rewardb_);
    std::swap(mp3_, other->mp3_);
    std::swap(npc_pass_, other->npc_pass_);
    std::swap(flamen_coins_cnt_, other->flamen_coins_cnt_);
    std::swap(flamem_wood_cnt_, other->flamem_wood_cnt_);
    std::swap(flamem_food_cnt_, other->flamem_food_cnt_);
    std::swap(flamem_iron_cnt_, other->flamem_iron_cnt_);
    std::swap(first_recharge_, other->first_recharge_);
    std::swap(auto_build_flag_, other->auto_build_flag_);
    std::swap(integral_time_cnt_, other->integral_time_cnt_);
    std::swap(mission_time_, other->mission_time_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(vip_reward_, other->vip_reward_);
    std::swap(ladder_, other->ladder_);
    std::swap(ladder_ts_, other->ladder_ts_);
    std::swap(job_reward_ts_, other->job_reward_ts_);
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    std::swap(prestige_, other->prestige_);
    std::swap(token_ts_, other->token_ts_);
    std::swap(daily_refresh_ts_, other->daily_refresh_ts_);
    std::swap(daily_reward_times_, other->daily_reward_times_);
    std::swap(daily_free_times_, other->daily_free_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Building::kBuildsFieldNumber;
const int Building::kQueueFieldNumber;
const int Building::kYieldFieldNumber;
#endif  // !_MSC_VER

Building::Building()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Building)
}

void Building::InitAsDefaultInstance() {
  queue_ = const_cast< ::ProtoBuilding::BuildQueue*>(&::ProtoBuilding::BuildQueue::default_instance());
}

Building::Building(const Building& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Building)
}

void Building::SharedCtor() {
  _cached_size_ = 0;
  queue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Building::~Building() {
  // @@protoc_insertion_point(destructor:User.Building)
  SharedDtor();
}

void Building::SharedDtor() {
  if (this != default_instance_) {
    delete queue_;
  }
}

void Building::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Building::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Building_descriptor_;
}

const Building& Building::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Building* Building::default_instance_ = NULL;

Building* Building::New() const {
  return new Building;
}

void Building::Clear() {
  if (has_queue()) {
    if (queue_ != NULL) queue_->::ProtoBuilding::BuildQueue::Clear();
  }
  builds_.Clear();
  yield_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Building)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuilding.BuildInfo builds = 1;
      case 1: {
        if (tag == 10) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_builds;
        if (input->ExpectTag(18)) goto parse_queue;
        break;
      }

      // required .ProtoBuilding.BuildQueue queue = 2;
      case 2: {
        if (tag == 18) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_yield;
        break;
      }

      // repeated .ProtoBuilding.BuildYield yield = 3;
      case 3: {
        if (tag == 26) {
         parse_yield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yield()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_yield;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Building)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Building)
  return false;
#undef DO_
}

void Building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Building)
  // repeated .ProtoBuilding.BuildInfo builds = 1;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->builds(i), output);
  }

  // required .ProtoBuilding.BuildQueue queue = 2;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queue(), output);
  }

  // repeated .ProtoBuilding.BuildYield yield = 3;
  for (int i = 0; i < this->yield_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->yield(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Building)
}

::google::protobuf::uint8* Building::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Building)
  // repeated .ProtoBuilding.BuildInfo builds = 1;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->builds(i), target);
  }

  // required .ProtoBuilding.BuildQueue queue = 2;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queue(), target);
  }

  // repeated .ProtoBuilding.BuildYield yield = 3;
  for (int i = 0; i < this->yield_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->yield(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Building)
  return target;
}

int Building::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoBuilding.BuildQueue queue = 2;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue());
    }

  }
  // repeated .ProtoBuilding.BuildInfo builds = 1;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  // repeated .ProtoBuilding.BuildYield yield = 3;
  total_size += 1 * this->yield_size();
  for (int i = 0; i < this->yield_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yield(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Building::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Building* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Building*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Building::MergeFrom(const Building& from) {
  GOOGLE_CHECK_NE(&from, this);
  builds_.MergeFrom(from.builds_);
  yield_.MergeFrom(from.yield_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_queue()) {
      mutable_queue()->::ProtoBuilding::BuildQueue::MergeFrom(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Building::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Building::CopyFrom(const Building& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->builds())) return false;
  if (has_queue()) {
    if (!this->queue().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->yield())) return false;
  return true;
}

void Building::Swap(Building* other) {
  if (other != this) {
    builds_.Swap(&other->builds_);
    std::swap(queue_, other->queue_);
    yield_.Swap(&other->yield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Building::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Building_descriptor_;
  metadata.reflection = Building_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hero::kHeroFieldNumber;
const int Hero::kSoldiersFieldNumber;
#endif  // !_MSC_VER

Hero::Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Hero)
}

void Hero::InitAsDefaultInstance() {
}

Hero::Hero(const Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Hero)
}

void Hero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hero::~Hero() {
  // @@protoc_insertion_point(destructor:User.Hero)
  SharedDtor();
}

void Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hero_descriptor_;
}

const Hero& Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Hero* Hero::default_instance_ = NULL;

Hero* Hero::New() const {
  return new Hero;
}

void Hero::Clear() {
  hero_.Clear();
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
      case 1: {
        if (tag == 10) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectTag(18)) goto parse_soldiers;
        break;
      }

      // repeated .ProtoHero.HeroSoldiersCPP soldiers = 2;
      case 2: {
        if (tag == 18) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_soldiers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Hero)
  return false;
#undef DO_
}

void Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Hero)
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }

  // repeated .ProtoHero.HeroSoldiersCPP soldiers = 2;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->soldiers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Hero)
}

::google::protobuf::uint8* Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Hero)
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }

  // repeated .ProtoHero.HeroSoldiersCPP soldiers = 2;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->soldiers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Hero)
  return target;
}

int Hero::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  // repeated .ProtoHero.HeroSoldiersCPP soldiers = 2;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  soldiers_.MergeFrom(from.soldiers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->soldiers())) return false;
  return true;
}

void Hero::Swap(Hero* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hero_descriptor_;
  metadata.reflection = Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Science::kItemsFieldNumber;
const int Science::kRecruitHeroCapacityFieldNumber;
const int Science::kSoldiersRowFieldNumber;
const int Science::kSoldiersLevelFieldNumber;
const int Science::kExploitBoxLevelFieldNumber;
#endif  // !_MSC_VER

Science::Science()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Science)
}

void Science::InitAsDefaultInstance() {
}

Science::Science(const Science& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Science)
}

void Science::SharedCtor() {
  _cached_size_ = 0;
  recruit_hero_capacity_ = 0u;
  soldiers_row_ = 0u;
  soldiers_level_ = 0u;
  exploit_box_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Science::~Science() {
  // @@protoc_insertion_point(destructor:User.Science)
  SharedDtor();
}

void Science::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Science::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Science::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Science_descriptor_;
}

const Science& Science::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Science* Science::default_instance_ = NULL;

Science* Science::New() const {
  return new Science;
}

void Science::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Science*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(recruit_hero_capacity_, exploit_box_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Science::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Science)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoScience.ScienceItemCPP items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_recruit_hero_capacity;
        break;
      }

      // required uint32 recruit_hero_capacity = 2;
      case 2: {
        if (tag == 16) {
         parse_recruit_hero_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruit_hero_capacity_)));
          set_has_recruit_hero_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_soldiers_row;
        break;
      }

      // required uint32 soldiers_row = 3;
      case 3: {
        if (tag == 24) {
         parse_soldiers_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soldiers_row_)));
          set_has_soldiers_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_soldiers_level;
        break;
      }

      // required uint32 soldiers_level = 4;
      case 4: {
        if (tag == 32) {
         parse_soldiers_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soldiers_level_)));
          set_has_soldiers_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exploit_box_level;
        break;
      }

      // required uint32 exploit_box_level = 5;
      case 5: {
        if (tag == 40) {
         parse_exploit_box_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_box_level_)));
          set_has_exploit_box_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Science)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Science)
  return false;
#undef DO_
}

void Science::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Science)
  // repeated .ProtoScience.ScienceItemCPP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // required uint32 recruit_hero_capacity = 2;
  if (has_recruit_hero_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recruit_hero_capacity(), output);
  }

  // required uint32 soldiers_row = 3;
  if (has_soldiers_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->soldiers_row(), output);
  }

  // required uint32 soldiers_level = 4;
  if (has_soldiers_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->soldiers_level(), output);
  }

  // required uint32 exploit_box_level = 5;
  if (has_exploit_box_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exploit_box_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Science)
}

::google::protobuf::uint8* Science::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Science)
  // repeated .ProtoScience.ScienceItemCPP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // required uint32 recruit_hero_capacity = 2;
  if (has_recruit_hero_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recruit_hero_capacity(), target);
  }

  // required uint32 soldiers_row = 3;
  if (has_soldiers_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->soldiers_row(), target);
  }

  // required uint32 soldiers_level = 4;
  if (has_soldiers_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->soldiers_level(), target);
  }

  // required uint32 exploit_box_level = 5;
  if (has_exploit_box_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exploit_box_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Science)
  return target;
}

int Science::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 recruit_hero_capacity = 2;
    if (has_recruit_hero_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruit_hero_capacity());
    }

    // required uint32 soldiers_row = 3;
    if (has_soldiers_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soldiers_row());
    }

    // required uint32 soldiers_level = 4;
    if (has_soldiers_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soldiers_level());
    }

    // required uint32 exploit_box_level = 5;
    if (has_exploit_box_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit_box_level());
    }

  }
  // repeated .ProtoScience.ScienceItemCPP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Science::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Science* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Science*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Science::MergeFrom(const Science& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recruit_hero_capacity()) {
      set_recruit_hero_capacity(from.recruit_hero_capacity());
    }
    if (from.has_soldiers_row()) {
      set_soldiers_row(from.soldiers_row());
    }
    if (from.has_soldiers_level()) {
      set_soldiers_level(from.soldiers_level());
    }
    if (from.has_exploit_box_level()) {
      set_exploit_box_level(from.exploit_box_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Science::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Science::CopyFrom(const Science& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Science::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void Science::Swap(Science* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(recruit_hero_capacity_, other->recruit_hero_capacity_);
    std::swap(soldiers_row_, other->soldiers_row_);
    std::swap(soldiers_level_, other->soldiers_level_);
    std::swap(exploit_box_level_, other->exploit_box_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Science::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Science_descriptor_;
  metadata.reflection = Science_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Weapon::kItemsFieldNumber;
#endif  // !_MSC_VER

Weapon::Weapon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Weapon)
}

void Weapon::InitAsDefaultInstance() {
}

Weapon::Weapon(const Weapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Weapon)
}

void Weapon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Weapon::~Weapon() {
  // @@protoc_insertion_point(destructor:User.Weapon)
  SharedDtor();
}

void Weapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Weapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Weapon_descriptor_;
}

const Weapon& Weapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Weapon* Weapon::default_instance_ = NULL;

Weapon* Weapon::New() const {
  return new Weapon;
}

void Weapon::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Weapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Weapon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoWeapon.WeaponInfoCPP items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Weapon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Weapon)
  return false;
#undef DO_
}

void Weapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Weapon)
  // repeated .ProtoWeapon.WeaponInfoCPP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Weapon)
}

::google::protobuf::uint8* Weapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Weapon)
  // repeated .ProtoWeapon.WeaponInfoCPP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Weapon)
  return target;
}

int Weapon::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoWeapon.WeaponInfoCPP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Weapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Weapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Weapon::MergeFrom(const Weapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Weapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weapon::CopyFrom(const Weapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weapon::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void Weapon::Swap(Weapon* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Weapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Weapon_descriptor_;
  metadata.reflection = Weapon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCPass::kItemsFieldNumber;
#endif  // !_MSC_VER

NPCPass::NPCPass()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.NPCPass)
}

void NPCPass::InitAsDefaultInstance() {
}

NPCPass::NPCPass(const NPCPass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.NPCPass)
}

void NPCPass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCPass::~NPCPass() {
  // @@protoc_insertion_point(destructor:User.NPCPass)
  SharedDtor();
}

void NPCPass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCPass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCPass_descriptor_;
}

const NPCPass& NPCPass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

NPCPass* NPCPass::default_instance_ = NULL;

NPCPass* NPCPass::New() const {
  return new NPCPass;
}

void NPCPass::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.NPCPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoPass.NPCPassRecord items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.NPCPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.NPCPass)
  return false;
#undef DO_
}

void NPCPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.NPCPass)
  // repeated .ProtoPass.NPCPassRecord items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.NPCPass)
}

::google::protobuf::uint8* NPCPass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.NPCPass)
  // repeated .ProtoPass.NPCPassRecord items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.NPCPass)
  return target;
}

int NPCPass::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoPass.NPCPassRecord items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCPass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCPass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCPass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCPass::MergeFrom(const NPCPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCPass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCPass::CopyFrom(const NPCPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCPass::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void NPCPass::Swap(NPCPass* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCPass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCPass_descriptor_;
  metadata.reflection = NPCPass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityItem::kIdFieldNumber;
const int ActivityItem::kBtsFieldNumber;
const int ActivityItem::kEtsFieldNumber;
const int ActivityItem::kVerFieldNumber;
#endif  // !_MSC_VER

ActivityItem::ActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.ActivityItem)
}

void ActivityItem::InitAsDefaultInstance() {
}

ActivityItem::ActivityItem(const ActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.ActivityItem)
}

void ActivityItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bts_ = 0u;
  ets_ = 0u;
  ver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityItem::~ActivityItem() {
  // @@protoc_insertion_point(destructor:User.ActivityItem)
  SharedDtor();
}

void ActivityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityItem_descriptor_;
}

const ActivityItem& ActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

ActivityItem* ActivityItem::default_instance_ = NULL;

ActivityItem* ActivityItem::New() const {
  return new ActivityItem;
}

void ActivityItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, ver_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.ActivityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bts;
        break;
      }

      // required uint32 bts = 2;
      case 2: {
        if (tag == 16) {
         parse_bts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bts_)));
          set_has_bts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ets;
        break;
      }

      // required uint32 ets = 3;
      case 3: {
        if (tag == 24) {
         parse_ets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ets_)));
          set_has_ets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ver;
        break;
      }

      // required uint32 ver = 4;
      case 4: {
        if (tag == 32) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.ActivityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.ActivityItem)
  return false;
#undef DO_
}

void ActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.ActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 bts = 2;
  if (has_bts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bts(), output);
  }

  // required uint32 ets = 3;
  if (has_ets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ets(), output);
  }

  // required uint32 ver = 4;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.ActivityItem)
}

::google::protobuf::uint8* ActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.ActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 bts = 2;
  if (has_bts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bts(), target);
  }

  // required uint32 ets = 3;
  if (has_ets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ets(), target);
  }

  // required uint32 ver = 4;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.ActivityItem)
  return target;
}

int ActivityItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 bts = 2;
    if (has_bts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bts());
    }

    // required uint32 ets = 3;
    if (has_ets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ets());
    }

    // required uint32 ver = 4;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityItem::MergeFrom(const ActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bts()) {
      set_bts(from.bts());
    }
    if (from.has_ets()) {
      set_ets(from.ets());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityItem::CopyFrom(const ActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ActivityItem::Swap(ActivityItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bts_, other->bts_);
    std::swap(ets_, other->ets_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityItem_descriptor_;
  metadata.reflection = ActivityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kActFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Activity)
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Activity)
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  // @@protoc_insertion_point(destructor:User.Activity)
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Activity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.ActivityItem act = 1;
      case 1: {
        if (tag == 10) {
         parse_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_act()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_act;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Activity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Activity)
  return false;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Activity)
  // repeated .User.ActivityItem act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->act(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Activity)
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Activity)
  // repeated .User.ActivityItem act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->act(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Activity)
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;

  // repeated .User.ActivityItem act = 1;
  total_size += 1 * this->act_size();
  for (int i = 0; i < this->act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->act(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  act_.MergeFrom(from.act_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->act())) return false;
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    act_.Swap(&other->act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MineItem::kMineRewardTsFieldNumber;
const int MineItem::kMineKingdomStatusFieldNumber;
#endif  // !_MSC_VER

MineItem::MineItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.MineItem)
}

void MineItem::InitAsDefaultInstance() {
}

MineItem::MineItem(const MineItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.MineItem)
}

void MineItem::SharedCtor() {
  _cached_size_ = 0;
  mine_reward_ts_ = 0u;
  mine_kingdom_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MineItem::~MineItem() {
  // @@protoc_insertion_point(destructor:User.MineItem)
  SharedDtor();
}

void MineItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MineItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MineItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MineItem_descriptor_;
}

const MineItem& MineItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

MineItem* MineItem::default_instance_ = NULL;

MineItem* MineItem::New() const {
  return new MineItem;
}

void MineItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MineItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mine_reward_ts_, mine_kingdom_status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.MineItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mine_reward_ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mine_reward_ts_)));
          set_has_mine_reward_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mine_kingdom_status;
        break;
      }

      // required bool mine_kingdom_status = 2;
      case 2: {
        if (tag == 16) {
         parse_mine_kingdom_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mine_kingdom_status_)));
          set_has_mine_kingdom_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.MineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.MineItem)
  return false;
#undef DO_
}

void MineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.MineItem)
  // required uint32 mine_reward_ts = 1;
  if (has_mine_reward_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mine_reward_ts(), output);
  }

  // required bool mine_kingdom_status = 2;
  if (has_mine_kingdom_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mine_kingdom_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.MineItem)
}

::google::protobuf::uint8* MineItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.MineItem)
  // required uint32 mine_reward_ts = 1;
  if (has_mine_reward_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mine_reward_ts(), target);
  }

  // required bool mine_kingdom_status = 2;
  if (has_mine_kingdom_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mine_kingdom_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.MineItem)
  return target;
}

int MineItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mine_reward_ts = 1;
    if (has_mine_reward_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mine_reward_ts());
    }

    // required bool mine_kingdom_status = 2;
    if (has_mine_kingdom_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MineItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MineItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MineItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MineItem::MergeFrom(const MineItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mine_reward_ts()) {
      set_mine_reward_ts(from.mine_reward_ts());
    }
    if (from.has_mine_kingdom_status()) {
      set_mine_kingdom_status(from.mine_kingdom_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MineItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MineItem::CopyFrom(const MineItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MineItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MineItem::Swap(MineItem* other) {
  if (other != this) {
    std::swap(mine_reward_ts_, other->mine_reward_ts_);
    std::swap(mine_kingdom_status_, other->mine_kingdom_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MineItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MineItem_descriptor_;
  metadata.reflection = MineItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLimtPropItem::kIdFieldNumber;
const int TimeLimtPropItem::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

TimeLimtPropItem::TimeLimtPropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.TimeLimtPropItem)
}

void TimeLimtPropItem::InitAsDefaultInstance() {
}

TimeLimtPropItem::TimeLimtPropItem(const TimeLimtPropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.TimeLimtPropItem)
}

void TimeLimtPropItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLimtPropItem::~TimeLimtPropItem() {
  // @@protoc_insertion_point(destructor:User.TimeLimtPropItem)
  SharedDtor();
}

void TimeLimtPropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeLimtPropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeLimtPropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeLimtPropItem_descriptor_;
}

const TimeLimtPropItem& TimeLimtPropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

TimeLimtPropItem* TimeLimtPropItem::default_instance_ = NULL;

TimeLimtPropItem* TimeLimtPropItem::New() const {
  return new TimeLimtPropItem;
}

void TimeLimtPropItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeLimtPropItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, expire_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeLimtPropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.TimeLimtPropItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expire_time;
        break;
      }

      // required uint32 expire_time = 2;
      case 2: {
        if (tag == 16) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.TimeLimtPropItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.TimeLimtPropItem)
  return false;
#undef DO_
}

void TimeLimtPropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.TimeLimtPropItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 expire_time = 2;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expire_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.TimeLimtPropItem)
}

::google::protobuf::uint8* TimeLimtPropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.TimeLimtPropItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 expire_time = 2;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expire_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.TimeLimtPropItem)
  return target;
}

int TimeLimtPropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 expire_time = 2;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLimtPropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeLimtPropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeLimtPropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeLimtPropItem::MergeFrom(const TimeLimtPropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeLimtPropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimtPropItem::CopyFrom(const TimeLimtPropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimtPropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeLimtPropItem::Swap(TimeLimtPropItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeLimtPropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeLimtPropItem_descriptor_;
  metadata.reflection = TimeLimtPropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteNPCInfo::kCidFieldNumber;
const int EliteNPCInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

EliteNPCInfo::EliteNPCInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.EliteNPCInfo)
}

void EliteNPCInfo::InitAsDefaultInstance() {
}

EliteNPCInfo::EliteNPCInfo(const EliteNPCInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.EliteNPCInfo)
}

void EliteNPCInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteNPCInfo::~EliteNPCInfo() {
  // @@protoc_insertion_point(destructor:User.EliteNPCInfo)
  SharedDtor();
}

void EliteNPCInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteNPCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteNPCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteNPCInfo_descriptor_;
}

const EliteNPCInfo& EliteNPCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

EliteNPCInfo* EliteNPCInfo::default_instance_ = NULL;

EliteNPCInfo* EliteNPCInfo::New() const {
  return new EliteNPCInfo;
}

void EliteNPCInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EliteNPCInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteNPCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.EliteNPCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.EliteNPCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.EliteNPCInfo)
  return false;
#undef DO_
}

void EliteNPCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.EliteNPCInfo)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.EliteNPCInfo)
}

::google::protobuf::uint8* EliteNPCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.EliteNPCInfo)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.EliteNPCInfo)
  return target;
}

int EliteNPCInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteNPCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteNPCInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteNPCInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteNPCInfo::MergeFrom(const EliteNPCInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteNPCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteNPCInfo::CopyFrom(const EliteNPCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteNPCInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EliteNPCInfo::Swap(EliteNPCInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteNPCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteNPCInfo_descriptor_;
  metadata.reflection = EliteNPCInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteNPCInfoAll::kNpcFieldNumber;
#endif  // !_MSC_VER

EliteNPCInfoAll::EliteNPCInfoAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.EliteNPCInfoAll)
}

void EliteNPCInfoAll::InitAsDefaultInstance() {
}

EliteNPCInfoAll::EliteNPCInfoAll(const EliteNPCInfoAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.EliteNPCInfoAll)
}

void EliteNPCInfoAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteNPCInfoAll::~EliteNPCInfoAll() {
  // @@protoc_insertion_point(destructor:User.EliteNPCInfoAll)
  SharedDtor();
}

void EliteNPCInfoAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteNPCInfoAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteNPCInfoAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteNPCInfoAll_descriptor_;
}

const EliteNPCInfoAll& EliteNPCInfoAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

EliteNPCInfoAll* EliteNPCInfoAll::default_instance_ = NULL;

EliteNPCInfoAll* EliteNPCInfoAll::New() const {
  return new EliteNPCInfoAll;
}

void EliteNPCInfoAll::Clear() {
  npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteNPCInfoAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.EliteNPCInfoAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.EliteNPCInfo npc = 1;
      case 1: {
        if (tag == 10) {
         parse_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_npc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.EliteNPCInfoAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.EliteNPCInfoAll)
  return false;
#undef DO_
}

void EliteNPCInfoAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.EliteNPCInfoAll)
  // repeated .User.EliteNPCInfo npc = 1;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.EliteNPCInfoAll)
}

::google::protobuf::uint8* EliteNPCInfoAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.EliteNPCInfoAll)
  // repeated .User.EliteNPCInfo npc = 1;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.EliteNPCInfoAll)
  return target;
}

int EliteNPCInfoAll::ByteSize() const {
  int total_size = 0;

  // repeated .User.EliteNPCInfo npc = 1;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteNPCInfoAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteNPCInfoAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteNPCInfoAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteNPCInfoAll::MergeFrom(const EliteNPCInfoAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteNPCInfoAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteNPCInfoAll::CopyFrom(const EliteNPCInfoAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteNPCInfoAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->npc())) return false;
  return true;
}

void EliteNPCInfoAll::Swap(EliteNPCInfoAll* other) {
  if (other != this) {
    npc_.Swap(&other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteNPCInfoAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteNPCInfoAll_descriptor_;
  metadata.reflection = EliteNPCInfoAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kBaseFieldNumber;
const int User::kBuildingFieldNumber;
const int User::kHeroesFieldNumber;
const int User::kEquipFieldNumber;
const int User::kEquipshopFieldNumber;
const int User::kFieldFieldNumber;
const int User::kMissionFieldNumber;
const int User::kScienceFieldNumber;
const int User::kTsFieldNumber;
const int User::kYellowvipFieldNumber;
const int User::kMarketFieldNumber;
const int User::kRewardFieldNumber;
const int User::kWeaponFieldNumber;
const int User::kNpcpassFieldNumber;
const int User::kCumulationFieldNumber;
const int User::kActivityFieldNumber;
const int User::kTokenFieldNumber;
const int User::kFoggatesFieldNumber;
const int User::kMineFieldNumber;
const int User::kDailymissionsFieldNumber;
const int User::kTimeLimitPropsFieldNumber;
const int User::kComponentsFieldNumber;
const int User::kProducecomponentFieldNumber;
const int User::kAchievementsFieldNumber;
const int User::kElitenpcsFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.User)
}

void User::InitAsDefaultInstance() {
  base_ = const_cast< ::User::Base*>(&::User::Base::default_instance());
  building_ = const_cast< ::User::Building*>(&::User::Building::default_instance());
  heroes_ = const_cast< ::User::Hero*>(&::User::Hero::default_instance());
  field_ = const_cast< ::ProtoBattleField::Field*>(&::ProtoBattleField::Field::default_instance());
  mission_ = const_cast< ::ProtoMission::MissionAllCPP*>(&::ProtoMission::MissionAllCPP::default_instance());
  science_ = const_cast< ::User::Science*>(&::User::Science::default_instance());
  yellowvip_ = const_cast< ::ProtoYellowVip::YellowVipCPP*>(&::ProtoYellowVip::YellowVipCPP::default_instance());
  market_ = const_cast< ::ProtoMarket::MarketCPP*>(&::ProtoMarket::MarketCPP::default_instance());
  reward_ = const_cast< ::ProtoBattleField::ReplyRewardInfo*>(&::ProtoBattleField::ReplyRewardInfo::default_instance());
  weapon_ = const_cast< ::User::Weapon*>(&::User::Weapon::default_instance());
  npcpass_ = const_cast< ::User::NPCPass*>(&::User::NPCPass::default_instance());
  cumulation_ = const_cast< ::ProtoCumulation::CumulationCPP*>(&::ProtoCumulation::CumulationCPP::default_instance());
  activity_ = const_cast< ::User::Activity*>(&::User::Activity::default_instance());
  foggates_ = const_cast< ::ProtoFogGate::FogGateCPPAll*>(&::ProtoFogGate::FogGateCPPAll::default_instance());
  mine_ = const_cast< ::User::MineItem*>(&::User::MineItem::default_instance());
  dailymissions_ = const_cast< ::ProtoDailyMission::DailyMissionAllCPP*>(&::ProtoDailyMission::DailyMissionAllCPP::default_instance());
  components_ = const_cast< ::ProtoComponent::ComponentAllCPP*>(&::ProtoComponent::ComponentAllCPP::default_instance());
  producecomponent_ = const_cast< ::ProtoComponent::ProduceComponentCPP*>(&::ProtoComponent::ProduceComponentCPP::default_instance());
  achievements_ = const_cast< ::ProtoAchievement::AchievementAllCPP*>(&::ProtoAchievement::AchievementAllCPP::default_instance());
  elitenpcs_ = const_cast< ::User::EliteNPCInfoAll*>(&::User::EliteNPCInfoAll::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  building_ = NULL;
  heroes_ = NULL;
  field_ = NULL;
  mission_ = NULL;
  science_ = NULL;
  ts_ = 0u;
  yellowvip_ = NULL;
  market_ = NULL;
  reward_ = NULL;
  weapon_ = NULL;
  npcpass_ = NULL;
  cumulation_ = NULL;
  activity_ = NULL;
  foggates_ = NULL;
  mine_ = NULL;
  dailymissions_ = NULL;
  components_ = NULL;
  producecomponent_ = NULL;
  achievements_ = NULL;
  elitenpcs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:User.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete building_;
    delete heroes_;
    delete field_;
    delete mission_;
    delete science_;
    delete yellowvip_;
    delete market_;
    delete reward_;
    delete weapon_;
    delete npcpass_;
    delete cumulation_;
    delete activity_;
    delete foggates_;
    delete mine_;
    delete dailymissions_;
    delete components_;
    delete producecomponent_;
    delete achievements_;
    delete elitenpcs_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_base()) {
      if (base_ != NULL) base_->::User::Base::Clear();
    }
    if (has_building()) {
      if (building_ != NULL) building_->::User::Building::Clear();
    }
    if (has_heroes()) {
      if (heroes_ != NULL) heroes_->::User::Hero::Clear();
    }
    if (has_field()) {
      if (field_ != NULL) field_->::ProtoBattleField::Field::Clear();
    }
    if (has_mission()) {
      if (mission_ != NULL) mission_->::ProtoMission::MissionAllCPP::Clear();
    }
    if (has_science()) {
      if (science_ != NULL) science_->::User::Science::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ts_ = 0u;
    if (has_yellowvip()) {
      if (yellowvip_ != NULL) yellowvip_->::ProtoYellowVip::YellowVipCPP::Clear();
    }
    if (has_market()) {
      if (market_ != NULL) market_->::ProtoMarket::MarketCPP::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoBattleField::ReplyRewardInfo::Clear();
    }
    if (has_weapon()) {
      if (weapon_ != NULL) weapon_->::User::Weapon::Clear();
    }
    if (has_npcpass()) {
      if (npcpass_ != NULL) npcpass_->::User::NPCPass::Clear();
    }
    if (has_cumulation()) {
      if (cumulation_ != NULL) cumulation_->::ProtoCumulation::CumulationCPP::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::User::Activity::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 15597568) {
    if (has_foggates()) {
      if (foggates_ != NULL) foggates_->::ProtoFogGate::FogGateCPPAll::Clear();
    }
    if (has_mine()) {
      if (mine_ != NULL) mine_->::User::MineItem::Clear();
    }
    if (has_dailymissions()) {
      if (dailymissions_ != NULL) dailymissions_->::ProtoDailyMission::DailyMissionAllCPP::Clear();
    }
    if (has_components()) {
      if (components_ != NULL) components_->::ProtoComponent::ComponentAllCPP::Clear();
    }
    if (has_producecomponent()) {
      if (producecomponent_ != NULL) producecomponent_->::ProtoComponent::ProduceComponentCPP::Clear();
    }
    if (has_achievements()) {
      if (achievements_ != NULL) achievements_->::ProtoAchievement::AchievementAllCPP::Clear();
    }
  }
  if (has_elitenpcs()) {
    if (elitenpcs_ != NULL) elitenpcs_->::User::EliteNPCInfoAll::Clear();
  }
  equip_.Clear();
  equipshop_.Clear();
  token_.Clear();
  time_limit_props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.Base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_building;
        break;
      }

      // required .User.Building building = 2;
      case 2: {
        if (tag == 18) {
         parse_building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heroes;
        break;
      }

      // required .User.Hero heroes = 3;
      case 3: {
        if (tag == 26) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip;
        break;
      }

      // repeated .DataCommon.EquipmentCPP equip = 4;
      case 4: {
        if (tag == 34) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip;
        if (input->ExpectTag(42)) goto parse_equipshop;
        break;
      }

      // repeated .DataCommon.EquipShopCPP equipshop = 5;
      case 5: {
        if (tag == 42) {
         parse_equipshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equipshop;
        if (input->ExpectTag(50)) goto parse_field;
        break;
      }

      // required .ProtoBattleField.Field field = 6;
      case 6: {
        if (tag == 50) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mission;
        break;
      }

      // required .ProtoMission.MissionAllCPP mission = 7;
      case 7: {
        if (tag == 58) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_science;
        break;
      }

      // required .User.Science science = 8;
      case 8: {
        if (tag == 66) {
         parse_science:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_science()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ts;
        break;
      }

      // required uint32 ts = 9;
      case 9: {
        if (tag == 72) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_yellowvip;
        break;
      }

      // required .ProtoYellowVip.YellowVipCPP yellowvip = 10;
      case 10: {
        if (tag == 82) {
         parse_yellowvip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yellowvip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_market;
        break;
      }

      // optional .ProtoMarket.MarketCPP market = 11;
      case 11: {
        if (tag == 90) {
         parse_market:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_reward;
        break;
      }

      // required .ProtoBattleField.ReplyRewardInfo reward = 12;
      case 12: {
        if (tag == 98) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_weapon;
        break;
      }

      // required .User.Weapon weapon = 13;
      case 13: {
        if (tag == 106) {
         parse_weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_npcpass;
        break;
      }

      // required .User.NPCPass npcpass = 14;
      case 14: {
        if (tag == 114) {
         parse_npcpass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcpass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cumulation;
        break;
      }

      // required .ProtoCumulation.CumulationCPP cumulation = 15;
      case 15: {
        if (tag == 122) {
         parse_cumulation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cumulation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_activity;
        break;
      }

      // required .User.Activity activity = 16;
      case 16: {
        if (tag == 130) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_token;
        break;
      }

      // repeated .ProtoOfficial.PublishToken token = 17;
      case 17: {
        if (tag == 138) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_token;
        if (input->ExpectTag(146)) goto parse_foggates;
        break;
      }

      // required .ProtoFogGate.FogGateCPPAll foggates = 18;
      case 18: {
        if (tag == 146) {
         parse_foggates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foggates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_mine;
        break;
      }

      // required .User.MineItem mine = 19;
      case 19: {
        if (tag == 154) {
         parse_mine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_dailymissions;
        break;
      }

      // required .ProtoDailyMission.DailyMissionAllCPP dailymissions = 20;
      case 20: {
        if (tag == 162) {
         parse_dailymissions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailymissions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_time_limit_props;
        break;
      }

      // repeated .User.TimeLimtPropItem time_limit_props = 21;
      case 21: {
        if (tag == 170) {
         parse_time_limit_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_limit_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_time_limit_props;
        if (input->ExpectTag(178)) goto parse_components;
        break;
      }

      // required .ProtoComponent.ComponentAllCPP components = 22;
      case 22: {
        if (tag == 178) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_producecomponent;
        break;
      }

      // required .ProtoComponent.ProduceComponentCPP producecomponent = 23;
      case 23: {
        if (tag == 186) {
         parse_producecomponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_producecomponent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_achievements;
        break;
      }

      // required .ProtoAchievement.AchievementAllCPP achievements = 24;
      case 24: {
        if (tag == 194) {
         parse_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_elitenpcs;
        break;
      }

      // required .User.EliteNPCInfoAll elitenpcs = 25;
      case 25: {
        if (tag == 202) {
         parse_elitenpcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elitenpcs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.User)
  // required .User.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required .User.Building building = 2;
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->building(), output);
  }

  // required .User.Hero heroes = 3;
  if (has_heroes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heroes(), output);
  }

  // repeated .DataCommon.EquipmentCPP equip = 4;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip(i), output);
  }

  // repeated .DataCommon.EquipShopCPP equipshop = 5;
  for (int i = 0; i < this->equipshop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipshop(i), output);
  }

  // required .ProtoBattleField.Field field = 6;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->field(), output);
  }

  // required .ProtoMission.MissionAllCPP mission = 7;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mission(), output);
  }

  // required .User.Science science = 8;
  if (has_science()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->science(), output);
  }

  // required uint32 ts = 9;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ts(), output);
  }

  // required .ProtoYellowVip.YellowVipCPP yellowvip = 10;
  if (has_yellowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->yellowvip(), output);
  }

  // optional .ProtoMarket.MarketCPP market = 11;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->market(), output);
  }

  // required .ProtoBattleField.ReplyRewardInfo reward = 12;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reward(), output);
  }

  // required .User.Weapon weapon = 13;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->weapon(), output);
  }

  // required .User.NPCPass npcpass = 14;
  if (has_npcpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->npcpass(), output);
  }

  // required .ProtoCumulation.CumulationCPP cumulation = 15;
  if (has_cumulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cumulation(), output);
  }

  // required .User.Activity activity = 16;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->activity(), output);
  }

  // repeated .ProtoOfficial.PublishToken token = 17;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->token(i), output);
  }

  // required .ProtoFogGate.FogGateCPPAll foggates = 18;
  if (has_foggates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->foggates(), output);
  }

  // required .User.MineItem mine = 19;
  if (has_mine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mine(), output);
  }

  // required .ProtoDailyMission.DailyMissionAllCPP dailymissions = 20;
  if (has_dailymissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->dailymissions(), output);
  }

  // repeated .User.TimeLimtPropItem time_limit_props = 21;
  for (int i = 0; i < this->time_limit_props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->time_limit_props(i), output);
  }

  // required .ProtoComponent.ComponentAllCPP components = 22;
  if (has_components()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->components(), output);
  }

  // required .ProtoComponent.ProduceComponentCPP producecomponent = 23;
  if (has_producecomponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->producecomponent(), output);
  }

  // required .ProtoAchievement.AchievementAllCPP achievements = 24;
  if (has_achievements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->achievements(), output);
  }

  // required .User.EliteNPCInfoAll elitenpcs = 25;
  if (has_elitenpcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->elitenpcs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.User)
  // required .User.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required .User.Building building = 2;
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->building(), target);
  }

  // required .User.Hero heroes = 3;
  if (has_heroes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->heroes(), target);
  }

  // repeated .DataCommon.EquipmentCPP equip = 4;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip(i), target);
  }

  // repeated .DataCommon.EquipShopCPP equipshop = 5;
  for (int i = 0; i < this->equipshop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipshop(i), target);
  }

  // required .ProtoBattleField.Field field = 6;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->field(), target);
  }

  // required .ProtoMission.MissionAllCPP mission = 7;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mission(), target);
  }

  // required .User.Science science = 8;
  if (has_science()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->science(), target);
  }

  // required uint32 ts = 9;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ts(), target);
  }

  // required .ProtoYellowVip.YellowVipCPP yellowvip = 10;
  if (has_yellowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->yellowvip(), target);
  }

  // optional .ProtoMarket.MarketCPP market = 11;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->market(), target);
  }

  // required .ProtoBattleField.ReplyRewardInfo reward = 12;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reward(), target);
  }

  // required .User.Weapon weapon = 13;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->weapon(), target);
  }

  // required .User.NPCPass npcpass = 14;
  if (has_npcpass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->npcpass(), target);
  }

  // required .ProtoCumulation.CumulationCPP cumulation = 15;
  if (has_cumulation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->cumulation(), target);
  }

  // required .User.Activity activity = 16;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->activity(), target);
  }

  // repeated .ProtoOfficial.PublishToken token = 17;
  for (int i = 0; i < this->token_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->token(i), target);
  }

  // required .ProtoFogGate.FogGateCPPAll foggates = 18;
  if (has_foggates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->foggates(), target);
  }

  // required .User.MineItem mine = 19;
  if (has_mine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mine(), target);
  }

  // required .ProtoDailyMission.DailyMissionAllCPP dailymissions = 20;
  if (has_dailymissions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->dailymissions(), target);
  }

  // repeated .User.TimeLimtPropItem time_limit_props = 21;
  for (int i = 0; i < this->time_limit_props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->time_limit_props(i), target);
  }

  // required .ProtoComponent.ComponentAllCPP components = 22;
  if (has_components()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->components(), target);
  }

  // required .ProtoComponent.ProduceComponentCPP producecomponent = 23;
  if (has_producecomponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->producecomponent(), target);
  }

  // required .ProtoAchievement.AchievementAllCPP achievements = 24;
  if (has_achievements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->achievements(), target);
  }

  // required .User.EliteNPCInfoAll elitenpcs = 25;
  if (has_elitenpcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->elitenpcs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required .User.Building building = 2;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building());
    }

    // required .User.Hero heroes = 3;
    if (has_heroes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroes());
    }

    // required .ProtoBattleField.Field field = 6;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field());
    }

    // required .ProtoMission.MissionAllCPP mission = 7;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

    // required .User.Science science = 8;
    if (has_science()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->science());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ts = 9;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required .ProtoYellowVip.YellowVipCPP yellowvip = 10;
    if (has_yellowvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yellowvip());
    }

    // optional .ProtoMarket.MarketCPP market = 11;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market());
    }

    // required .ProtoBattleField.ReplyRewardInfo reward = 12;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required .User.Weapon weapon = 13;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon());
    }

    // required .User.NPCPass npcpass = 14;
    if (has_npcpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcpass());
    }

    // required .ProtoCumulation.CumulationCPP cumulation = 15;
    if (has_cumulation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cumulation());
    }

    // required .User.Activity activity = 16;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // required .ProtoFogGate.FogGateCPPAll foggates = 18;
    if (has_foggates()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foggates());
    }

    // required .User.MineItem mine = 19;
    if (has_mine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mine());
    }

    // required .ProtoDailyMission.DailyMissionAllCPP dailymissions = 20;
    if (has_dailymissions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailymissions());
    }

    // required .ProtoComponent.ComponentAllCPP components = 22;
    if (has_components()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->components());
    }

    // required .ProtoComponent.ProduceComponentCPP producecomponent = 23;
    if (has_producecomponent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->producecomponent());
    }

    // required .ProtoAchievement.AchievementAllCPP achievements = 24;
    if (has_achievements()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievements());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .User.EliteNPCInfoAll elitenpcs = 25;
    if (has_elitenpcs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elitenpcs());
    }

  }
  // repeated .DataCommon.EquipmentCPP equip = 4;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .DataCommon.EquipShopCPP equipshop = 5;
  total_size += 1 * this->equipshop_size();
  for (int i = 0; i < this->equipshop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipshop(i));
  }

  // repeated .ProtoOfficial.PublishToken token = 17;
  total_size += 2 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token(i));
  }

  // repeated .User.TimeLimtPropItem time_limit_props = 21;
  total_size += 2 * this->time_limit_props_size();
  for (int i = 0; i < this->time_limit_props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_limit_props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  equipshop_.MergeFrom(from.equipshop_);
  token_.MergeFrom(from.token_);
  time_limit_props_.MergeFrom(from.time_limit_props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::User::Base::MergeFrom(from.base());
    }
    if (from.has_building()) {
      mutable_building()->::User::Building::MergeFrom(from.building());
    }
    if (from.has_heroes()) {
      mutable_heroes()->::User::Hero::MergeFrom(from.heroes());
    }
    if (from.has_field()) {
      mutable_field()->::ProtoBattleField::Field::MergeFrom(from.field());
    }
    if (from.has_mission()) {
      mutable_mission()->::ProtoMission::MissionAllCPP::MergeFrom(from.mission());
    }
    if (from.has_science()) {
      mutable_science()->::User::Science::MergeFrom(from.science());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_yellowvip()) {
      mutable_yellowvip()->::ProtoYellowVip::YellowVipCPP::MergeFrom(from.yellowvip());
    }
    if (from.has_market()) {
      mutable_market()->::ProtoMarket::MarketCPP::MergeFrom(from.market());
    }
    if (from.has_reward()) {
      mutable_reward()->::ProtoBattleField::ReplyRewardInfo::MergeFrom(from.reward());
    }
    if (from.has_weapon()) {
      mutable_weapon()->::User::Weapon::MergeFrom(from.weapon());
    }
    if (from.has_npcpass()) {
      mutable_npcpass()->::User::NPCPass::MergeFrom(from.npcpass());
    }
    if (from.has_cumulation()) {
      mutable_cumulation()->::ProtoCumulation::CumulationCPP::MergeFrom(from.cumulation());
    }
    if (from.has_activity()) {
      mutable_activity()->::User::Activity::MergeFrom(from.activity());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_foggates()) {
      mutable_foggates()->::ProtoFogGate::FogGateCPPAll::MergeFrom(from.foggates());
    }
    if (from.has_mine()) {
      mutable_mine()->::User::MineItem::MergeFrom(from.mine());
    }
    if (from.has_dailymissions()) {
      mutable_dailymissions()->::ProtoDailyMission::DailyMissionAllCPP::MergeFrom(from.dailymissions());
    }
    if (from.has_components()) {
      mutable_components()->::ProtoComponent::ComponentAllCPP::MergeFrom(from.components());
    }
    if (from.has_producecomponent()) {
      mutable_producecomponent()->::ProtoComponent::ProduceComponentCPP::MergeFrom(from.producecomponent());
    }
    if (from.has_achievements()) {
      mutable_achievements()->::ProtoAchievement::AchievementAllCPP::MergeFrom(from.achievements());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_elitenpcs()) {
      mutable_elitenpcs()->::User::EliteNPCInfoAll::MergeFrom(from.elitenpcs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x01eefbe7) != 0x01eefbe7) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_building()) {
    if (!this->building().IsInitialized()) return false;
  }
  if (has_heroes()) {
    if (!this->heroes().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipshop())) return false;
  if (has_field()) {
    if (!this->field().IsInitialized()) return false;
  }
  if (has_mission()) {
    if (!this->mission().IsInitialized()) return false;
  }
  if (has_science()) {
    if (!this->science().IsInitialized()) return false;
  }
  if (has_yellowvip()) {
    if (!this->yellowvip().IsInitialized()) return false;
  }
  if (has_market()) {
    if (!this->market().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_weapon()) {
    if (!this->weapon().IsInitialized()) return false;
  }
  if (has_npcpass()) {
    if (!this->npcpass().IsInitialized()) return false;
  }
  if (has_cumulation()) {
    if (!this->cumulation().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->token())) return false;
  if (has_foggates()) {
    if (!this->foggates().IsInitialized()) return false;
  }
  if (has_mine()) {
    if (!this->mine().IsInitialized()) return false;
  }
  if (has_dailymissions()) {
    if (!this->dailymissions().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->time_limit_props())) return false;
  if (has_components()) {
    if (!this->components().IsInitialized()) return false;
  }
  if (has_producecomponent()) {
    if (!this->producecomponent().IsInitialized()) return false;
  }
  if (has_achievements()) {
    if (!this->achievements().IsInitialized()) return false;
  }
  if (has_elitenpcs()) {
    if (!this->elitenpcs().IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(building_, other->building_);
    std::swap(heroes_, other->heroes_);
    equip_.Swap(&other->equip_);
    equipshop_.Swap(&other->equipshop_);
    std::swap(field_, other->field_);
    std::swap(mission_, other->mission_);
    std::swap(science_, other->science_);
    std::swap(ts_, other->ts_);
    std::swap(yellowvip_, other->yellowvip_);
    std::swap(market_, other->market_);
    std::swap(reward_, other->reward_);
    std::swap(weapon_, other->weapon_);
    std::swap(npcpass_, other->npcpass_);
    std::swap(cumulation_, other->cumulation_);
    std::swap(activity_, other->activity_);
    token_.Swap(&other->token_);
    std::swap(foggates_, other->foggates_);
    std::swap(mine_, other->mine_);
    std::swap(dailymissions_, other->dailymissions_);
    time_limit_props_.Swap(&other->time_limit_props_);
    std::swap(components_, other->components_);
    std::swap(producecomponent_, other->producecomponent_);
    std::swap(achievements_, other->achievements_);
    std::swap(elitenpcs_, other->elitenpcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tutorial_stage::kTutorialStageFieldNumber;
#endif  // !_MSC_VER

Tutorial_stage::Tutorial_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Tutorial_stage)
}

void Tutorial_stage::InitAsDefaultInstance() {
}

Tutorial_stage::Tutorial_stage(const Tutorial_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Tutorial_stage)
}

void Tutorial_stage::SharedCtor() {
  _cached_size_ = 0;
  tutorial_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tutorial_stage::~Tutorial_stage() {
  // @@protoc_insertion_point(destructor:User.Tutorial_stage)
  SharedDtor();
}

void Tutorial_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tutorial_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tutorial_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tutorial_stage_descriptor_;
}

const Tutorial_stage& Tutorial_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Tutorial_stage* Tutorial_stage::default_instance_ = NULL;

Tutorial_stage* Tutorial_stage::New() const {
  return new Tutorial_stage;
}

void Tutorial_stage::Clear() {
  tutorial_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tutorial_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Tutorial_stage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tutorial_stage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_stage_)));
          set_has_tutorial_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Tutorial_stage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Tutorial_stage)
  return false;
#undef DO_
}

void Tutorial_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Tutorial_stage)
  // required uint32 tutorial_stage = 1;
  if (has_tutorial_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tutorial_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Tutorial_stage)
}

::google::protobuf::uint8* Tutorial_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Tutorial_stage)
  // required uint32 tutorial_stage = 1;
  if (has_tutorial_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tutorial_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Tutorial_stage)
  return target;
}

int Tutorial_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tutorial_stage = 1;
    if (has_tutorial_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tutorial_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tutorial_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tutorial_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tutorial_stage::MergeFrom(const Tutorial_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tutorial_stage()) {
      set_tutorial_stage(from.tutorial_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tutorial_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tutorial_stage::CopyFrom(const Tutorial_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tutorial_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tutorial_stage::Swap(Tutorial_stage* other) {
  if (other != this) {
    std::swap(tutorial_stage_, other->tutorial_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tutorial_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tutorial_stage_descriptor_;
  metadata.reflection = Tutorial_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kTsFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.ServerTime)
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.ServerTime)
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  // @@protoc_insertion_point(destructor:User.ServerTime)
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.ServerTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.ServerTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.ServerTime)
  return false;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.ServerTime)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.ServerTime)
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.ServerTime)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.ServerTime)
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCashReq::kCashFieldNumber;
const int CostCashReq::kOpCodeFieldNumber;
const int CostCashReq::kOperationFieldNumber;
#endif  // !_MSC_VER

CostCashReq::CostCashReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.CostCashReq)
}

void CostCashReq::InitAsDefaultInstance() {
}

CostCashReq::CostCashReq(const CostCashReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.CostCashReq)
}

void CostCashReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cash_ = 0u;
  op_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCashReq::~CostCashReq() {
  // @@protoc_insertion_point(destructor:User.CostCashReq)
  SharedDtor();
}

void CostCashReq::SharedDtor() {
  if (op_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_code_;
  }
  if (this != default_instance_) {
  }
}

void CostCashReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCashReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCashReq_descriptor_;
}

const CostCashReq& CostCashReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

CostCashReq* CostCashReq::default_instance_ = NULL;

CostCashReq* CostCashReq::New() const {
  return new CostCashReq;
}

void CostCashReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostCashReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(cash_, operation_);
    if (has_op_code()) {
      if (op_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        op_code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCashReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.CostCashReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op_code;
        break;
      }

      // required string op_code = 2;
      case 2: {
        if (tag == 18) {
         parse_op_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->op_code().data(), this->op_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "op_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }

      // required uint32 operation = 3;
      case 3: {
        if (tag == 24) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.CostCashReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.CostCashReq)
  return false;
#undef DO_
}

void CostCashReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.CostCashReq)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required string op_code = 2;
  if (has_op_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op_code().data(), this->op_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op_code(), output);
  }

  // required uint32 operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.CostCashReq)
}

::google::protobuf::uint8* CostCashReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.CostCashReq)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required string op_code = 2;
  if (has_op_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op_code().data(), this->op_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op_code(), target);
  }

  // required uint32 operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.CostCashReq)
  return target;
}

int CostCashReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required string op_code = 2;
    if (has_op_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op_code());
    }

    // required uint32 operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCashReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCashReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCashReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCashReq::MergeFrom(const CostCashReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_op_code()) {
      set_op_code(from.op_code());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCashReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCashReq::CopyFrom(const CostCashReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCashReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CostCashReq::Swap(CostCashReq* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(op_code_, other->op_code_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCashReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCashReq_descriptor_;
  metadata.reflection = CostCashReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCashResp::kCashFieldNumber;
const int CostCashResp::kOperationFieldNumber;
#endif  // !_MSC_VER

CostCashResp::CostCashResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.CostCashResp)
}

void CostCashResp::InitAsDefaultInstance() {
}

CostCashResp::CostCashResp(const CostCashResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.CostCashResp)
}

void CostCashResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCashResp::~CostCashResp() {
  // @@protoc_insertion_point(destructor:User.CostCashResp)
  SharedDtor();
}

void CostCashResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostCashResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCashResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCashResp_descriptor_;
}

const CostCashResp& CostCashResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

CostCashResp* CostCashResp::default_instance_ = NULL;

CostCashResp* CostCashResp::New() const {
  return new CostCashResp;
}

void CostCashResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostCashResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cash_, operation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCashResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.CostCashResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required uint32 operation = 2;
      case 2: {
        if (tag == 16) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.CostCashResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.CostCashResp)
  return false;
#undef DO_
}

void CostCashResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.CostCashResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.CostCashResp)
}

::google::protobuf::uint8* CostCashResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.CostCashResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.CostCashResp)
  return target;
}

int CostCashResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCashResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCashResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCashResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCashResp::MergeFrom(const CostCashResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCashResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCashResp::CopyFrom(const CostCashResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCashResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CostCashResp::Swap(CostCashResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCashResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCashResp_descriptor_;
  metadata.reflection = CostCashResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenNormalGifgBagReq::kEqidFieldNumber;
const int OpenNormalGifgBagReq::kEqudFieldNumber;
#endif  // !_MSC_VER

OpenNormalGifgBagReq::OpenNormalGifgBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.OpenNormalGifgBagReq)
}

void OpenNormalGifgBagReq::InitAsDefaultInstance() {
}

OpenNormalGifgBagReq::OpenNormalGifgBagReq(const OpenNormalGifgBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.OpenNormalGifgBagReq)
}

void OpenNormalGifgBagReq::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenNormalGifgBagReq::~OpenNormalGifgBagReq() {
  // @@protoc_insertion_point(destructor:User.OpenNormalGifgBagReq)
  SharedDtor();
}

void OpenNormalGifgBagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenNormalGifgBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenNormalGifgBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenNormalGifgBagReq_descriptor_;
}

const OpenNormalGifgBagReq& OpenNormalGifgBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

OpenNormalGifgBagReq* OpenNormalGifgBagReq::default_instance_ = NULL;

OpenNormalGifgBagReq* OpenNormalGifgBagReq::New() const {
  return new OpenNormalGifgBagReq;
}

void OpenNormalGifgBagReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenNormalGifgBagReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, equd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenNormalGifgBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.OpenNormalGifgBagReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equd;
        break;
      }

      // required uint32 equd = 2;
      case 2: {
        if (tag == 16) {
         parse_equd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.OpenNormalGifgBagReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.OpenNormalGifgBagReq)
  return false;
#undef DO_
}

void OpenNormalGifgBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.OpenNormalGifgBagReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 equd = 2;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.OpenNormalGifgBagReq)
}

::google::protobuf::uint8* OpenNormalGifgBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.OpenNormalGifgBagReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 equd = 2;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.OpenNormalGifgBagReq)
  return target;
}

int OpenNormalGifgBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 equd = 2;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenNormalGifgBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenNormalGifgBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenNormalGifgBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenNormalGifgBagReq::MergeFrom(const OpenNormalGifgBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenNormalGifgBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenNormalGifgBagReq::CopyFrom(const OpenNormalGifgBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenNormalGifgBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OpenNormalGifgBagReq::Swap(OpenNormalGifgBagReq* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenNormalGifgBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenNormalGifgBagReq_descriptor_;
  metadata.reflection = OpenNormalGifgBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenLuckGifgBagReq::kEqidFieldNumber;
const int OpenLuckGifgBagReq::kEqudFieldNumber;
#endif  // !_MSC_VER

OpenLuckGifgBagReq::OpenLuckGifgBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.OpenLuckGifgBagReq)
}

void OpenLuckGifgBagReq::InitAsDefaultInstance() {
}

OpenLuckGifgBagReq::OpenLuckGifgBagReq(const OpenLuckGifgBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.OpenLuckGifgBagReq)
}

void OpenLuckGifgBagReq::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenLuckGifgBagReq::~OpenLuckGifgBagReq() {
  // @@protoc_insertion_point(destructor:User.OpenLuckGifgBagReq)
  SharedDtor();
}

void OpenLuckGifgBagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenLuckGifgBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenLuckGifgBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenLuckGifgBagReq_descriptor_;
}

const OpenLuckGifgBagReq& OpenLuckGifgBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

OpenLuckGifgBagReq* OpenLuckGifgBagReq::default_instance_ = NULL;

OpenLuckGifgBagReq* OpenLuckGifgBagReq::New() const {
  return new OpenLuckGifgBagReq;
}

void OpenLuckGifgBagReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenLuckGifgBagReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, equd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenLuckGifgBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.OpenLuckGifgBagReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equd;
        break;
      }

      // required uint32 equd = 2;
      case 2: {
        if (tag == 16) {
         parse_equd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.OpenLuckGifgBagReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.OpenLuckGifgBagReq)
  return false;
#undef DO_
}

void OpenLuckGifgBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.OpenLuckGifgBagReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 equd = 2;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.OpenLuckGifgBagReq)
}

::google::protobuf::uint8* OpenLuckGifgBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.OpenLuckGifgBagReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 equd = 2;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.OpenLuckGifgBagReq)
  return target;
}

int OpenLuckGifgBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 equd = 2;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenLuckGifgBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenLuckGifgBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenLuckGifgBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenLuckGifgBagReq::MergeFrom(const OpenLuckGifgBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenLuckGifgBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenLuckGifgBagReq::CopyFrom(const OpenLuckGifgBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenLuckGifgBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OpenLuckGifgBagReq::Swap(OpenLuckGifgBagReq* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenLuckGifgBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenLuckGifgBagReq_descriptor_;
  metadata.reflection = OpenLuckGifgBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGifgBagResp::kEqudFieldNumber;
const int OpenGifgBagResp::kCountFieldNumber;
const int OpenGifgBagResp::kBagInfoFieldNumber;
#endif  // !_MSC_VER

OpenGifgBagResp::OpenGifgBagResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.OpenGifgBagResp)
}

void OpenGifgBagResp::InitAsDefaultInstance() {
  bag_info_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
}

OpenGifgBagResp::OpenGifgBagResp(const OpenGifgBagResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.OpenGifgBagResp)
}

void OpenGifgBagResp::SharedCtor() {
  _cached_size_ = 0;
  equd_ = 0u;
  count_ = 0u;
  bag_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGifgBagResp::~OpenGifgBagResp() {
  // @@protoc_insertion_point(destructor:User.OpenGifgBagResp)
  SharedDtor();
}

void OpenGifgBagResp::SharedDtor() {
  if (this != default_instance_) {
    delete bag_info_;
  }
}

void OpenGifgBagResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGifgBagResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGifgBagResp_descriptor_;
}

const OpenGifgBagResp& OpenGifgBagResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

OpenGifgBagResp* OpenGifgBagResp::default_instance_ = NULL;

OpenGifgBagResp* OpenGifgBagResp::New() const {
  return new OpenGifgBagResp;
}

void OpenGifgBagResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenGifgBagResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(equd_, count_);
    if (has_bag_info()) {
      if (bag_info_ != NULL) bag_info_->::User::RewardBagInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGifgBagResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.OpenGifgBagResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bag_info;
        break;
      }

      // required .User.RewardBagInfo bag_info = 3;
      case 3: {
        if (tag == 26) {
         parse_bag_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.OpenGifgBagResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.OpenGifgBagResp)
  return false;
#undef DO_
}

void OpenGifgBagResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.OpenGifgBagResp)
  // required uint32 equd = 1;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equd(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required .User.RewardBagInfo bag_info = 3;
  if (has_bag_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bag_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.OpenGifgBagResp)
}

::google::protobuf::uint8* OpenGifgBagResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.OpenGifgBagResp)
  // required uint32 equd = 1;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equd(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required .User.RewardBagInfo bag_info = 3;
  if (has_bag_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bag_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.OpenGifgBagResp)
  return target;
}

int OpenGifgBagResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equd = 1;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required .User.RewardBagInfo bag_info = 3;
    if (has_bag_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGifgBagResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGifgBagResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGifgBagResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGifgBagResp::MergeFrom(const OpenGifgBagResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equd()) {
      set_equd(from.equd());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_bag_info()) {
      mutable_bag_info()->::User::RewardBagInfo::MergeFrom(from.bag_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGifgBagResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGifgBagResp::CopyFrom(const OpenGifgBagResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGifgBagResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_bag_info()) {
    if (!this->bag_info().IsInitialized()) return false;
  }
  return true;
}

void OpenGifgBagResp::Swap(OpenGifgBagResp* other) {
  if (other != this) {
    std::swap(equd_, other->equd_);
    std::swap(count_, other->count_);
    std::swap(bag_info_, other->bag_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGifgBagResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGifgBagResp_descriptor_;
  metadata.reflection = OpenGifgBagResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardBagInfo::kEquipsFieldNumber;
const int RewardBagInfo::kBaseFieldNumber;
const int RewardBagInfo::kHerosFieldNumber;
const int RewardBagInfo::kComponentsFieldNumber;
#endif  // !_MSC_VER

RewardBagInfo::RewardBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.RewardBagInfo)
}

void RewardBagInfo::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

RewardBagInfo::RewardBagInfo(const RewardBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.RewardBagInfo)
}

void RewardBagInfo::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardBagInfo::~RewardBagInfo() {
  // @@protoc_insertion_point(destructor:User.RewardBagInfo)
  SharedDtor();
}

void RewardBagInfo::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void RewardBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardBagInfo_descriptor_;
}

const RewardBagInfo& RewardBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

RewardBagInfo* RewardBagInfo::default_instance_ = NULL;

RewardBagInfo* RewardBagInfo::New() const {
  return new RewardBagInfo;
}

void RewardBagInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }
  heros_.Clear();
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.RewardBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .DataCommon.CommonBaseRewardCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        break;
      }

      // repeated .ProtoHero.HeroBaseInfoCPP heros = 3;
      case 3: {
        if (tag == 26) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        if (input->ExpectTag(34)) goto parse_components;
        break;
      }

      // repeated .ProtoComponent.ComponentCPP components = 4;
      case 4: {
        if (tag == 34) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_components;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.RewardBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.RewardBagInfo)
  return false;
#undef DO_
}

void RewardBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.RewardBagInfo)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heros(i), output);
  }

  // repeated .ProtoComponent.ComponentCPP components = 4;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->components(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.RewardBagInfo)
}

::google::protobuf::uint8* RewardBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.RewardBagInfo)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->heros(i), target);
  }

  // repeated .ProtoComponent.ComponentCPP components = 4;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->components(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.RewardBagInfo)
  return target;
}

int RewardBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataCommon.CommonBaseRewardCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  // repeated .ProtoHero.HeroBaseInfoCPP heros = 3;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  // repeated .ProtoComponent.ComponentCPP components = 4;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardBagInfo::MergeFrom(const RewardBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardBagInfo::CopyFrom(const RewardBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardBagInfo::IsInitialized() const {

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->heros())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->components())) return false;
  return true;
}

void RewardBagInfo::Swap(RewardBagInfo* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    heros_.Swap(&other->heros_);
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardBagInfo_descriptor_;
  metadata.reflection = RewardBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseTimeLimitPropReq::kEqidFieldNumber;
const int UseTimeLimitPropReq::kEqudFieldNumber;
#endif  // !_MSC_VER

UseTimeLimitPropReq::UseTimeLimitPropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UseTimeLimitPropReq)
}

void UseTimeLimitPropReq::InitAsDefaultInstance() {
}

UseTimeLimitPropReq::UseTimeLimitPropReq(const UseTimeLimitPropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.UseTimeLimitPropReq)
}

void UseTimeLimitPropReq::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseTimeLimitPropReq::~UseTimeLimitPropReq() {
  // @@protoc_insertion_point(destructor:User.UseTimeLimitPropReq)
  SharedDtor();
}

void UseTimeLimitPropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseTimeLimitPropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseTimeLimitPropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseTimeLimitPropReq_descriptor_;
}

const UseTimeLimitPropReq& UseTimeLimitPropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UseTimeLimitPropReq* UseTimeLimitPropReq::default_instance_ = NULL;

UseTimeLimitPropReq* UseTimeLimitPropReq::New() const {
  return new UseTimeLimitPropReq;
}

void UseTimeLimitPropReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseTimeLimitPropReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, equd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseTimeLimitPropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UseTimeLimitPropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equd;
        break;
      }

      // required uint32 equd = 2;
      case 2: {
        if (tag == 16) {
         parse_equd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UseTimeLimitPropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UseTimeLimitPropReq)
  return false;
#undef DO_
}

void UseTimeLimitPropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UseTimeLimitPropReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 equd = 2;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UseTimeLimitPropReq)
}

::google::protobuf::uint8* UseTimeLimitPropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.UseTimeLimitPropReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 equd = 2;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UseTimeLimitPropReq)
  return target;
}

int UseTimeLimitPropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 equd = 2;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseTimeLimitPropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseTimeLimitPropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseTimeLimitPropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseTimeLimitPropReq::MergeFrom(const UseTimeLimitPropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseTimeLimitPropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseTimeLimitPropReq::CopyFrom(const UseTimeLimitPropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseTimeLimitPropReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UseTimeLimitPropReq::Swap(UseTimeLimitPropReq* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseTimeLimitPropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseTimeLimitPropReq_descriptor_;
  metadata.reflection = UseTimeLimitPropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseTimeLimitPropResp::kEqudFieldNumber;
const int UseTimeLimitPropResp::kCountFieldNumber;
const int UseTimeLimitPropResp::kItemFieldNumber;
#endif  // !_MSC_VER

UseTimeLimitPropResp::UseTimeLimitPropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UseTimeLimitPropResp)
}

void UseTimeLimitPropResp::InitAsDefaultInstance() {
  item_ = const_cast< ::User::TimeLimtPropItem*>(&::User::TimeLimtPropItem::default_instance());
}

UseTimeLimitPropResp::UseTimeLimitPropResp(const UseTimeLimitPropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.UseTimeLimitPropResp)
}

void UseTimeLimitPropResp::SharedCtor() {
  _cached_size_ = 0;
  equd_ = 0u;
  count_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseTimeLimitPropResp::~UseTimeLimitPropResp() {
  // @@protoc_insertion_point(destructor:User.UseTimeLimitPropResp)
  SharedDtor();
}

void UseTimeLimitPropResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void UseTimeLimitPropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseTimeLimitPropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseTimeLimitPropResp_descriptor_;
}

const UseTimeLimitPropResp& UseTimeLimitPropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UseTimeLimitPropResp* UseTimeLimitPropResp::default_instance_ = NULL;

UseTimeLimitPropResp* UseTimeLimitPropResp::New() const {
  return new UseTimeLimitPropResp;
}

void UseTimeLimitPropResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseTimeLimitPropResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(equd_, count_);
    if (has_item()) {
      if (item_ != NULL) item_->::User::TimeLimtPropItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseTimeLimitPropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UseTimeLimitPropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // required .User.TimeLimtPropItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UseTimeLimitPropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UseTimeLimitPropResp)
  return false;
#undef DO_
}

void UseTimeLimitPropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UseTimeLimitPropResp)
  // required uint32 equd = 1;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equd(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required .User.TimeLimtPropItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UseTimeLimitPropResp)
}

::google::protobuf::uint8* UseTimeLimitPropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.UseTimeLimitPropResp)
  // required uint32 equd = 1;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equd(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required .User.TimeLimtPropItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UseTimeLimitPropResp)
  return target;
}

int UseTimeLimitPropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equd = 1;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required .User.TimeLimtPropItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseTimeLimitPropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseTimeLimitPropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseTimeLimitPropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseTimeLimitPropResp::MergeFrom(const UseTimeLimitPropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equd()) {
      set_equd(from.equd());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_item()) {
      mutable_item()->::User::TimeLimtPropItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseTimeLimitPropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseTimeLimitPropResp::CopyFrom(const UseTimeLimitPropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseTimeLimitPropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void UseTimeLimitPropResp::Swap(UseTimeLimitPropResp* other) {
  if (other != this) {
    std::swap(equd_, other->equd_);
    std::swap(count_, other->count_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseTimeLimitPropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseTimeLimitPropResp_descriptor_;
  metadata.reflection = UseTimeLimitPropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseUpdateSmeltPropReq::kPropIdFieldNumber;
const int UseUpdateSmeltPropReq::kPropUdFieldNumber;
const int UseUpdateSmeltPropReq::kEquipUdFieldNumber;
#endif  // !_MSC_VER

UseUpdateSmeltPropReq::UseUpdateSmeltPropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UseUpdateSmeltPropReq)
}

void UseUpdateSmeltPropReq::InitAsDefaultInstance() {
}

UseUpdateSmeltPropReq::UseUpdateSmeltPropReq(const UseUpdateSmeltPropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.UseUpdateSmeltPropReq)
}

void UseUpdateSmeltPropReq::SharedCtor() {
  _cached_size_ = 0;
  prop_id_ = 0u;
  prop_ud_ = 0u;
  equip_ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseUpdateSmeltPropReq::~UseUpdateSmeltPropReq() {
  // @@protoc_insertion_point(destructor:User.UseUpdateSmeltPropReq)
  SharedDtor();
}

void UseUpdateSmeltPropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseUpdateSmeltPropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseUpdateSmeltPropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseUpdateSmeltPropReq_descriptor_;
}

const UseUpdateSmeltPropReq& UseUpdateSmeltPropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UseUpdateSmeltPropReq* UseUpdateSmeltPropReq::default_instance_ = NULL;

UseUpdateSmeltPropReq* UseUpdateSmeltPropReq::New() const {
  return new UseUpdateSmeltPropReq;
}

void UseUpdateSmeltPropReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseUpdateSmeltPropReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(prop_id_, equip_ud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseUpdateSmeltPropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UseUpdateSmeltPropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prop_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));
          set_has_prop_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop_ud;
        break;
      }

      // required uint32 prop_ud = 2;
      case 2: {
        if (tag == 16) {
         parse_prop_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_ud_)));
          set_has_prop_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equip_ud;
        break;
      }

      // required uint32 equip_ud = 3;
      case 3: {
        if (tag == 24) {
         parse_equip_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_ud_)));
          set_has_equip_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UseUpdateSmeltPropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UseUpdateSmeltPropReq)
  return false;
#undef DO_
}

void UseUpdateSmeltPropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UseUpdateSmeltPropReq)
  // required uint32 prop_id = 1;
  if (has_prop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_id(), output);
  }

  // required uint32 prop_ud = 2;
  if (has_prop_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_ud(), output);
  }

  // required uint32 equip_ud = 3;
  if (has_equip_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UseUpdateSmeltPropReq)
}

::google::protobuf::uint8* UseUpdateSmeltPropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.UseUpdateSmeltPropReq)
  // required uint32 prop_id = 1;
  if (has_prop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_id(), target);
  }

  // required uint32 prop_ud = 2;
  if (has_prop_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_ud(), target);
  }

  // required uint32 equip_ud = 3;
  if (has_equip_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equip_ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UseUpdateSmeltPropReq)
  return target;
}

int UseUpdateSmeltPropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prop_id = 1;
    if (has_prop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_id());
    }

    // required uint32 prop_ud = 2;
    if (has_prop_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_ud());
    }

    // required uint32 equip_ud = 3;
    if (has_equip_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseUpdateSmeltPropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseUpdateSmeltPropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseUpdateSmeltPropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseUpdateSmeltPropReq::MergeFrom(const UseUpdateSmeltPropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prop_id()) {
      set_prop_id(from.prop_id());
    }
    if (from.has_prop_ud()) {
      set_prop_ud(from.prop_ud());
    }
    if (from.has_equip_ud()) {
      set_equip_ud(from.equip_ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseUpdateSmeltPropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseUpdateSmeltPropReq::CopyFrom(const UseUpdateSmeltPropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseUpdateSmeltPropReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UseUpdateSmeltPropReq::Swap(UseUpdateSmeltPropReq* other) {
  if (other != this) {
    std::swap(prop_id_, other->prop_id_);
    std::swap(prop_ud_, other->prop_ud_);
    std::swap(equip_ud_, other->equip_ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseUpdateSmeltPropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseUpdateSmeltPropReq_descriptor_;
  metadata.reflection = UseUpdateSmeltPropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseUpdateSmeltPropResp::kPropUdFieldNumber;
const int UseUpdateSmeltPropResp::kPropCntFieldNumber;
const int UseUpdateSmeltPropResp::kEquipFieldNumber;
const int UseUpdateSmeltPropResp::kHeroFieldNumber;
#endif  // !_MSC_VER

UseUpdateSmeltPropResp::UseUpdateSmeltPropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UseUpdateSmeltPropResp)
}

void UseUpdateSmeltPropResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::DataCommon::EquipmentCPP*>(&::DataCommon::EquipmentCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

UseUpdateSmeltPropResp::UseUpdateSmeltPropResp(const UseUpdateSmeltPropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.UseUpdateSmeltPropResp)
}

void UseUpdateSmeltPropResp::SharedCtor() {
  _cached_size_ = 0;
  prop_ud_ = 0u;
  prop_cnt_ = 0u;
  equip_ = NULL;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseUpdateSmeltPropResp::~UseUpdateSmeltPropResp() {
  // @@protoc_insertion_point(destructor:User.UseUpdateSmeltPropResp)
  SharedDtor();
}

void UseUpdateSmeltPropResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
    delete hero_;
  }
}

void UseUpdateSmeltPropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseUpdateSmeltPropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseUpdateSmeltPropResp_descriptor_;
}

const UseUpdateSmeltPropResp& UseUpdateSmeltPropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UseUpdateSmeltPropResp* UseUpdateSmeltPropResp::default_instance_ = NULL;

UseUpdateSmeltPropResp* UseUpdateSmeltPropResp::New() const {
  return new UseUpdateSmeltPropResp;
}

void UseUpdateSmeltPropResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseUpdateSmeltPropResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(prop_ud_, prop_cnt_);
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseUpdateSmeltPropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UseUpdateSmeltPropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prop_ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_ud_)));
          set_has_prop_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop_cnt;
        break;
      }

      // required uint32 prop_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_prop_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_cnt_)));
          set_has_prop_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // required .DataCommon.EquipmentCPP equip = 3;
      case 3: {
        if (tag == 26) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        break;
      }

      // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
      case 4: {
        if (tag == 34) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UseUpdateSmeltPropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UseUpdateSmeltPropResp)
  return false;
#undef DO_
}

void UseUpdateSmeltPropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UseUpdateSmeltPropResp)
  // required uint32 prop_ud = 1;
  if (has_prop_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_ud(), output);
  }

  // required uint32 prop_cnt = 2;
  if (has_prop_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_cnt(), output);
  }

  // required .DataCommon.EquipmentCPP equip = 3;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip(), output);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UseUpdateSmeltPropResp)
}

::google::protobuf::uint8* UseUpdateSmeltPropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.UseUpdateSmeltPropResp)
  // required uint32 prop_ud = 1;
  if (has_prop_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_ud(), target);
  }

  // required uint32 prop_cnt = 2;
  if (has_prop_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_cnt(), target);
  }

  // required .DataCommon.EquipmentCPP equip = 3;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip(), target);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UseUpdateSmeltPropResp)
  return target;
}

int UseUpdateSmeltPropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prop_ud = 1;
    if (has_prop_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_ud());
    }

    // required uint32 prop_cnt = 2;
    if (has_prop_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_cnt());
    }

    // required .DataCommon.EquipmentCPP equip = 3;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseUpdateSmeltPropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseUpdateSmeltPropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseUpdateSmeltPropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseUpdateSmeltPropResp::MergeFrom(const UseUpdateSmeltPropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prop_ud()) {
      set_prop_ud(from.prop_ud());
    }
    if (from.has_prop_cnt()) {
      set_prop_cnt(from.prop_cnt());
    }
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentCPP::MergeFrom(from.equip());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseUpdateSmeltPropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseUpdateSmeltPropResp::CopyFrom(const UseUpdateSmeltPropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseUpdateSmeltPropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void UseUpdateSmeltPropResp::Swap(UseUpdateSmeltPropResp* other) {
  if (other != this) {
    std::swap(prop_ud_, other->prop_ud_);
    std::swap(prop_cnt_, other->prop_cnt_);
    std::swap(equip_, other->equip_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseUpdateSmeltPropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseUpdateSmeltPropResp_descriptor_;
  metadata.reflection = UseUpdateSmeltPropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSpecificSmeltPropReq::kPropIdFieldNumber;
const int UseSpecificSmeltPropReq::kPropUdFieldNumber;
const int UseSpecificSmeltPropReq::kEquipUdFieldNumber;
const int UseSpecificSmeltPropReq::kTypeFieldNumber;
#endif  // !_MSC_VER

UseSpecificSmeltPropReq::UseSpecificSmeltPropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UseSpecificSmeltPropReq)
}

void UseSpecificSmeltPropReq::InitAsDefaultInstance() {
}

UseSpecificSmeltPropReq::UseSpecificSmeltPropReq(const UseSpecificSmeltPropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.UseSpecificSmeltPropReq)
}

void UseSpecificSmeltPropReq::SharedCtor() {
  _cached_size_ = 0;
  prop_id_ = 0u;
  prop_ud_ = 0u;
  equip_ud_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSpecificSmeltPropReq::~UseSpecificSmeltPropReq() {
  // @@protoc_insertion_point(destructor:User.UseSpecificSmeltPropReq)
  SharedDtor();
}

void UseSpecificSmeltPropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSpecificSmeltPropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSpecificSmeltPropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSpecificSmeltPropReq_descriptor_;
}

const UseSpecificSmeltPropReq& UseSpecificSmeltPropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UseSpecificSmeltPropReq* UseSpecificSmeltPropReq::default_instance_ = NULL;

UseSpecificSmeltPropReq* UseSpecificSmeltPropReq::New() const {
  return new UseSpecificSmeltPropReq;
}

void UseSpecificSmeltPropReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseSpecificSmeltPropReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(prop_id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSpecificSmeltPropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UseSpecificSmeltPropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prop_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));
          set_has_prop_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop_ud;
        break;
      }

      // required uint32 prop_ud = 2;
      case 2: {
        if (tag == 16) {
         parse_prop_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_ud_)));
          set_has_prop_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equip_ud;
        break;
      }

      // required uint32 equip_ud = 3;
      case 3: {
        if (tag == 24) {
         parse_equip_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_ud_)));
          set_has_equip_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UseSpecificSmeltPropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UseSpecificSmeltPropReq)
  return false;
#undef DO_
}

void UseSpecificSmeltPropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UseSpecificSmeltPropReq)
  // required uint32 prop_id = 1;
  if (has_prop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_id(), output);
  }

  // required uint32 prop_ud = 2;
  if (has_prop_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_ud(), output);
  }

  // required uint32 equip_ud = 3;
  if (has_equip_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_ud(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UseSpecificSmeltPropReq)
}

::google::protobuf::uint8* UseSpecificSmeltPropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.UseSpecificSmeltPropReq)
  // required uint32 prop_id = 1;
  if (has_prop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_id(), target);
  }

  // required uint32 prop_ud = 2;
  if (has_prop_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_ud(), target);
  }

  // required uint32 equip_ud = 3;
  if (has_equip_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equip_ud(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UseSpecificSmeltPropReq)
  return target;
}

int UseSpecificSmeltPropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prop_id = 1;
    if (has_prop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_id());
    }

    // required uint32 prop_ud = 2;
    if (has_prop_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_ud());
    }

    // required uint32 equip_ud = 3;
    if (has_equip_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_ud());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSpecificSmeltPropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSpecificSmeltPropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSpecificSmeltPropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSpecificSmeltPropReq::MergeFrom(const UseSpecificSmeltPropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prop_id()) {
      set_prop_id(from.prop_id());
    }
    if (from.has_prop_ud()) {
      set_prop_ud(from.prop_ud());
    }
    if (from.has_equip_ud()) {
      set_equip_ud(from.equip_ud());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSpecificSmeltPropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSpecificSmeltPropReq::CopyFrom(const UseSpecificSmeltPropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSpecificSmeltPropReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UseSpecificSmeltPropReq::Swap(UseSpecificSmeltPropReq* other) {
  if (other != this) {
    std::swap(prop_id_, other->prop_id_);
    std::swap(prop_ud_, other->prop_ud_);
    std::swap(equip_ud_, other->equip_ud_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSpecificSmeltPropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSpecificSmeltPropReq_descriptor_;
  metadata.reflection = UseSpecificSmeltPropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSpecificSmeltPropResp::kPropUdFieldNumber;
const int UseSpecificSmeltPropResp::kPropCntFieldNumber;
const int UseSpecificSmeltPropResp::kEquipFieldNumber;
const int UseSpecificSmeltPropResp::kHeroFieldNumber;
#endif  // !_MSC_VER

UseSpecificSmeltPropResp::UseSpecificSmeltPropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UseSpecificSmeltPropResp)
}

void UseSpecificSmeltPropResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::DataCommon::EquipmentCPP*>(&::DataCommon::EquipmentCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

UseSpecificSmeltPropResp::UseSpecificSmeltPropResp(const UseSpecificSmeltPropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.UseSpecificSmeltPropResp)
}

void UseSpecificSmeltPropResp::SharedCtor() {
  _cached_size_ = 0;
  prop_ud_ = 0u;
  prop_cnt_ = 0u;
  equip_ = NULL;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSpecificSmeltPropResp::~UseSpecificSmeltPropResp() {
  // @@protoc_insertion_point(destructor:User.UseSpecificSmeltPropResp)
  SharedDtor();
}

void UseSpecificSmeltPropResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
    delete hero_;
  }
}

void UseSpecificSmeltPropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSpecificSmeltPropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSpecificSmeltPropResp_descriptor_;
}

const UseSpecificSmeltPropResp& UseSpecificSmeltPropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UseSpecificSmeltPropResp* UseSpecificSmeltPropResp::default_instance_ = NULL;

UseSpecificSmeltPropResp* UseSpecificSmeltPropResp::New() const {
  return new UseSpecificSmeltPropResp;
}

void UseSpecificSmeltPropResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseSpecificSmeltPropResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(prop_ud_, prop_cnt_);
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSpecificSmeltPropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UseSpecificSmeltPropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prop_ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_ud_)));
          set_has_prop_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop_cnt;
        break;
      }

      // required uint32 prop_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_prop_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_cnt_)));
          set_has_prop_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // required .DataCommon.EquipmentCPP equip = 3;
      case 3: {
        if (tag == 26) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        break;
      }

      // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
      case 4: {
        if (tag == 34) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UseSpecificSmeltPropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UseSpecificSmeltPropResp)
  return false;
#undef DO_
}

void UseSpecificSmeltPropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UseSpecificSmeltPropResp)
  // required uint32 prop_ud = 1;
  if (has_prop_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_ud(), output);
  }

  // required uint32 prop_cnt = 2;
  if (has_prop_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_cnt(), output);
  }

  // required .DataCommon.EquipmentCPP equip = 3;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip(), output);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UseSpecificSmeltPropResp)
}

::google::protobuf::uint8* UseSpecificSmeltPropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.UseSpecificSmeltPropResp)
  // required uint32 prop_ud = 1;
  if (has_prop_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_ud(), target);
  }

  // required uint32 prop_cnt = 2;
  if (has_prop_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_cnt(), target);
  }

  // required .DataCommon.EquipmentCPP equip = 3;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip(), target);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UseSpecificSmeltPropResp)
  return target;
}

int UseSpecificSmeltPropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prop_ud = 1;
    if (has_prop_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_ud());
    }

    // required uint32 prop_cnt = 2;
    if (has_prop_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_cnt());
    }

    // required .DataCommon.EquipmentCPP equip = 3;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSpecificSmeltPropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSpecificSmeltPropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSpecificSmeltPropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSpecificSmeltPropResp::MergeFrom(const UseSpecificSmeltPropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prop_ud()) {
      set_prop_ud(from.prop_ud());
    }
    if (from.has_prop_cnt()) {
      set_prop_cnt(from.prop_cnt());
    }
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentCPP::MergeFrom(from.equip());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSpecificSmeltPropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSpecificSmeltPropResp::CopyFrom(const UseSpecificSmeltPropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSpecificSmeltPropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void UseSpecificSmeltPropResp::Swap(UseSpecificSmeltPropResp* other) {
  if (other != this) {
    std::swap(prop_ud_, other->prop_ud_);
    std::swap(prop_cnt_, other->prop_cnt_);
    std::swap(equip_, other->equip_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSpecificSmeltPropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSpecificSmeltPropResp_descriptor_;
  metadata.reflection = UseSpecificSmeltPropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteNPCPushReq::kNpcsFieldNumber;
#endif  // !_MSC_VER

EliteNPCPushReq::EliteNPCPushReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.EliteNPCPushReq)
}

void EliteNPCPushReq::InitAsDefaultInstance() {
}

EliteNPCPushReq::EliteNPCPushReq(const EliteNPCPushReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.EliteNPCPushReq)
}

void EliteNPCPushReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteNPCPushReq::~EliteNPCPushReq() {
  // @@protoc_insertion_point(destructor:User.EliteNPCPushReq)
  SharedDtor();
}

void EliteNPCPushReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteNPCPushReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteNPCPushReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteNPCPushReq_descriptor_;
}

const EliteNPCPushReq& EliteNPCPushReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

EliteNPCPushReq* EliteNPCPushReq::default_instance_ = NULL;

EliteNPCPushReq* EliteNPCPushReq::New() const {
  return new EliteNPCPushReq;
}

void EliteNPCPushReq::Clear() {
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteNPCPushReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.EliteNPCPushReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.EliteNPCInfo npcs = 1;
      case 1: {
        if (tag == 10) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_npcs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.EliteNPCPushReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.EliteNPCPushReq)
  return false;
#undef DO_
}

void EliteNPCPushReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.EliteNPCPushReq)
  // repeated .User.EliteNPCInfo npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.EliteNPCPushReq)
}

::google::protobuf::uint8* EliteNPCPushReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.EliteNPCPushReq)
  // repeated .User.EliteNPCInfo npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.EliteNPCPushReq)
  return target;
}

int EliteNPCPushReq::ByteSize() const {
  int total_size = 0;

  // repeated .User.EliteNPCInfo npcs = 1;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteNPCPushReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteNPCPushReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteNPCPushReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteNPCPushReq::MergeFrom(const EliteNPCPushReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteNPCPushReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteNPCPushReq::CopyFrom(const EliteNPCPushReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteNPCPushReq::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->npcs())) return false;
  return true;
}

void EliteNPCPushReq::Swap(EliteNPCPushReq* other) {
  if (other != this) {
    npcs_.Swap(&other->npcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteNPCPushReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteNPCPushReq_descriptor_;
  metadata.reflection = EliteNPCPushReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace User

// @@protoc_insertion_point(global_scope)
