// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoReward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoReward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoReward {

namespace {

const ::google::protobuf::Descriptor* FirstRechargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRechargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstRechargeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRechargeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralTimeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralTimeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralTimeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralTimeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoReward_2eproto() {
  protobuf_AddDesc_ProtoReward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoReward.proto");
  GOOGLE_CHECK(file != NULL);
  FirstRechargeReq_descriptor_ = file->message_type(0);
  static const int FirstRechargeReq_offsets_[1] = {
  };
  FirstRechargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRechargeReq_descriptor_,
      FirstRechargeReq::default_instance_,
      FirstRechargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRechargeReq));
  FirstRechargeResp_descriptor_ = file->message_type(1);
  static const int FirstRechargeResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, equips_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, first_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, auto_build_flag_),
  };
  FirstRechargeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRechargeResp_descriptor_,
      FirstRechargeResp::default_instance_,
      FirstRechargeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRechargeResp));
  IntegralTimeReq_descriptor_ = file->message_type(2);
  static const int IntegralTimeReq_offsets_[1] = {
  };
  IntegralTimeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralTimeReq_descriptor_,
      IntegralTimeReq::default_instance_,
      IntegralTimeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralTimeReq));
  IntegralTimeResp_descriptor_ = file->message_type(3);
  static const int IntegralTimeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimeResp, new_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimeResp, base_),
  };
  IntegralTimeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralTimeResp_descriptor_,
      IntegralTimeResp::default_instance_,
      IntegralTimeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTimeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralTimeResp));
  VIPReq_descriptor_ = file->message_type(4);
  static const int VIPReq_offsets_[1] = {
  };
  VIPReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPReq_descriptor_,
      VIPReq::default_instance_,
      VIPReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPReq));
  VIPResp_descriptor_ = file->message_type(5);
  static const int VIPResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, equips_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, equips_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, vip_reward_),
  };
  VIPResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPResp_descriptor_,
      VIPResp::default_instance_,
      VIPResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoReward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRechargeReq_descriptor_, &FirstRechargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRechargeResp_descriptor_, &FirstRechargeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralTimeReq_descriptor_, &IntegralTimeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralTimeResp_descriptor_, &IntegralTimeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPReq_descriptor_, &VIPReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPResp_descriptor_, &VIPResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoReward_2eproto() {
  delete FirstRechargeReq::default_instance_;
  delete FirstRechargeReq_reflection_;
  delete FirstRechargeResp::default_instance_;
  delete FirstRechargeResp_reflection_;
  delete IntegralTimeReq::default_instance_;
  delete IntegralTimeReq_reflection_;
  delete IntegralTimeResp::default_instance_;
  delete IntegralTimeResp_reflection_;
  delete VIPReq::default_instance_;
  delete VIPReq_reflection_;
  delete VIPResp::default_instance_;
  delete VIPResp_reflection_;
}

void protobuf_AddDesc_ProtoReward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoReward.proto\022\013ProtoReward\032\020DataCo"
    "mmon.proto\032\017ProtoHero.proto\"\022\n\020FirstRech"
    "argeReq\"\337\001\n\021FirstRechargeResp\022+\n\006equips\030"
    "\001 \002(\0132\033.DataCommon.EquipmentAllCPP\022\022\n\neq"
    "uips_cnt\030\002 \003(\r\022-\n\004base\030\003 \002(\0132\037.DataCommo"
    "n.CommonBaseRewardCPP\022)\n\005heros\030\004 \003(\0132\032.P"
    "rotoHero.HeroBaseInfoCPP\022\026\n\016first_rechar"
    "ge\030\005 \002(\r\022\027\n\017auto_build_flag\030\006 \002(\r\"\021\n\017Int"
    "egralTimeReq\"R\n\020IntegralTimeResp\022\017\n\007new_"
    "cnt\030\001 \002(\r\022-\n\004base\030\002 \002(\0132\037.DataCommon.Com"
    "monBaseRewardCPP\"\010\n\006VIPReq\"\336\001\n\007VIPResp\022+"
    "\n\006equips\030\001 \002(\0132\033.DataCommon.EquipmentAll"
    "CPP\022\021\n\tequips_id\030\002 \003(\r\022\022\n\nequips_cnt\030\003 \003"
    "(\r\022-\n\004base\030\004 \002(\0132\037.DataCommon.CommonBase"
    "RewardCPP\022)\n\005heros\030\005 \003(\0132\032.ProtoHero.Her"
    "oBaseInfoCPP\022\021\n\tvip_level\030\006 \002(\r\022\022\n\nvip_r"
    "eward\030\007 \002(\r", 651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoReward.proto", &protobuf_RegisterTypes);
  FirstRechargeReq::default_instance_ = new FirstRechargeReq();
  FirstRechargeResp::default_instance_ = new FirstRechargeResp();
  IntegralTimeReq::default_instance_ = new IntegralTimeReq();
  IntegralTimeResp::default_instance_ = new IntegralTimeResp();
  VIPReq::default_instance_ = new VIPReq();
  VIPResp::default_instance_ = new VIPResp();
  FirstRechargeReq::default_instance_->InitAsDefaultInstance();
  FirstRechargeResp::default_instance_->InitAsDefaultInstance();
  IntegralTimeReq::default_instance_->InitAsDefaultInstance();
  IntegralTimeResp::default_instance_->InitAsDefaultInstance();
  VIPReq::default_instance_->InitAsDefaultInstance();
  VIPResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoReward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoReward_2eproto {
  StaticDescriptorInitializer_ProtoReward_2eproto() {
    protobuf_AddDesc_ProtoReward_2eproto();
  }
} static_descriptor_initializer_ProtoReward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FirstRechargeReq::FirstRechargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.FirstRechargeReq)
}

void FirstRechargeReq::InitAsDefaultInstance() {
}

FirstRechargeReq::FirstRechargeReq(const FirstRechargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.FirstRechargeReq)
}

void FirstRechargeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRechargeReq::~FirstRechargeReq() {
  // @@protoc_insertion_point(destructor:ProtoReward.FirstRechargeReq)
  SharedDtor();
}

void FirstRechargeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FirstRechargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRechargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRechargeReq_descriptor_;
}

const FirstRechargeReq& FirstRechargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

FirstRechargeReq* FirstRechargeReq::default_instance_ = NULL;

FirstRechargeReq* FirstRechargeReq::New() const {
  return new FirstRechargeReq;
}

void FirstRechargeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRechargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.FirstRechargeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.FirstRechargeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.FirstRechargeReq)
  return false;
#undef DO_
}

void FirstRechargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.FirstRechargeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.FirstRechargeReq)
}

::google::protobuf::uint8* FirstRechargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.FirstRechargeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.FirstRechargeReq)
  return target;
}

int FirstRechargeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRechargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRechargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRechargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRechargeReq::MergeFrom(const FirstRechargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRechargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRechargeReq::CopyFrom(const FirstRechargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRechargeReq::IsInitialized() const {

  return true;
}

void FirstRechargeReq::Swap(FirstRechargeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRechargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRechargeReq_descriptor_;
  metadata.reflection = FirstRechargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstRechargeResp::kEquipsFieldNumber;
const int FirstRechargeResp::kEquipsCntFieldNumber;
const int FirstRechargeResp::kBaseFieldNumber;
const int FirstRechargeResp::kHerosFieldNumber;
const int FirstRechargeResp::kFirstRechargeFieldNumber;
const int FirstRechargeResp::kAutoBuildFlagFieldNumber;
#endif  // !_MSC_VER

FirstRechargeResp::FirstRechargeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.FirstRechargeResp)
}

void FirstRechargeResp::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

FirstRechargeResp::FirstRechargeResp(const FirstRechargeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.FirstRechargeResp)
}

void FirstRechargeResp::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  first_recharge_ = 0u;
  auto_build_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRechargeResp::~FirstRechargeResp() {
  // @@protoc_insertion_point(destructor:ProtoReward.FirstRechargeResp)
  SharedDtor();
}

void FirstRechargeResp::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void FirstRechargeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRechargeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRechargeResp_descriptor_;
}

const FirstRechargeResp& FirstRechargeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

FirstRechargeResp* FirstRechargeResp::default_instance_ = NULL;

FirstRechargeResp* FirstRechargeResp::New() const {
  return new FirstRechargeResp;
}

void FirstRechargeResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FirstRechargeResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 53) {
    ZR_(first_recharge_, auto_build_flag_);
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equips_cnt_.Clear();
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRechargeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.FirstRechargeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equips_cnt;
        break;
      }

      // repeated uint32 equips_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_equips_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equips_cnt())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equips_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equips_cnt;
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // required .DataCommon.CommonBaseRewardCPP base = 3;
      case 3: {
        if (tag == 26) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_heros;
        break;
      }

      // repeated .ProtoHero.HeroBaseInfoCPP heros = 4;
      case 4: {
        if (tag == 34) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_heros;
        if (input->ExpectTag(40)) goto parse_first_recharge;
        break;
      }

      // required uint32 first_recharge = 5;
      case 5: {
        if (tag == 40) {
         parse_first_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_recharge_)));
          set_has_first_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auto_build_flag;
        break;
      }

      // required uint32 auto_build_flag = 6;
      case 6: {
        if (tag == 48) {
         parse_auto_build_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_build_flag_)));
          set_has_auto_build_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.FirstRechargeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.FirstRechargeResp)
  return false;
#undef DO_
}

void FirstRechargeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.FirstRechargeResp)
  // required .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // repeated uint32 equips_cnt = 2;
  for (int i = 0; i < this->equips_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equips_cnt(i), output);
  }

  // required .DataCommon.CommonBaseRewardCPP base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 4;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heros(i), output);
  }

  // required uint32 first_recharge = 5;
  if (has_first_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->first_recharge(), output);
  }

  // required uint32 auto_build_flag = 6;
  if (has_auto_build_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->auto_build_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.FirstRechargeResp)
}

::google::protobuf::uint8* FirstRechargeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.FirstRechargeResp)
  // required .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // repeated uint32 equips_cnt = 2;
  for (int i = 0; i < this->equips_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equips_cnt(i), target);
  }

  // required .DataCommon.CommonBaseRewardCPP base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 4;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heros(i), target);
  }

  // required uint32 first_recharge = 5;
  if (has_first_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->first_recharge(), target);
  }

  // required uint32 auto_build_flag = 6;
  if (has_auto_build_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->auto_build_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.FirstRechargeResp)
  return target;
}

int FirstRechargeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // required .DataCommon.CommonBaseRewardCPP base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 first_recharge = 5;
    if (has_first_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_recharge());
    }

    // required uint32 auto_build_flag = 6;
    if (has_auto_build_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_build_flag());
    }

  }
  // repeated uint32 equips_cnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equips_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equips_cnt(i));
    }
    total_size += 1 * this->equips_cnt_size() + data_size;
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 4;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRechargeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRechargeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRechargeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRechargeResp::MergeFrom(const FirstRechargeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_cnt_.MergeFrom(from.equips_cnt_);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
    if (from.has_first_recharge()) {
      set_first_recharge(from.first_recharge());
    }
    if (from.has_auto_build_flag()) {
      set_auto_build_flag(from.auto_build_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRechargeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRechargeResp::CopyFrom(const FirstRechargeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRechargeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000035) != 0x00000035) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->heros())) return false;
  return true;
}

void FirstRechargeResp::Swap(FirstRechargeResp* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    equips_cnt_.Swap(&other->equips_cnt_);
    std::swap(base_, other->base_);
    heros_.Swap(&other->heros_);
    std::swap(first_recharge_, other->first_recharge_);
    std::swap(auto_build_flag_, other->auto_build_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRechargeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRechargeResp_descriptor_;
  metadata.reflection = FirstRechargeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IntegralTimeReq::IntegralTimeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.IntegralTimeReq)
}

void IntegralTimeReq::InitAsDefaultInstance() {
}

IntegralTimeReq::IntegralTimeReq(const IntegralTimeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.IntegralTimeReq)
}

void IntegralTimeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralTimeReq::~IntegralTimeReq() {
  // @@protoc_insertion_point(destructor:ProtoReward.IntegralTimeReq)
  SharedDtor();
}

void IntegralTimeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralTimeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralTimeReq_descriptor_;
}

const IntegralTimeReq& IntegralTimeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

IntegralTimeReq* IntegralTimeReq::default_instance_ = NULL;

IntegralTimeReq* IntegralTimeReq::New() const {
  return new IntegralTimeReq;
}

void IntegralTimeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.IntegralTimeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.IntegralTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.IntegralTimeReq)
  return false;
#undef DO_
}

void IntegralTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.IntegralTimeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.IntegralTimeReq)
}

::google::protobuf::uint8* IntegralTimeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.IntegralTimeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.IntegralTimeReq)
  return target;
}

int IntegralTimeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralTimeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralTimeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralTimeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralTimeReq::MergeFrom(const IntegralTimeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralTimeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralTimeReq::CopyFrom(const IntegralTimeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralTimeReq::IsInitialized() const {

  return true;
}

void IntegralTimeReq::Swap(IntegralTimeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralTimeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralTimeReq_descriptor_;
  metadata.reflection = IntegralTimeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralTimeResp::kNewCntFieldNumber;
const int IntegralTimeResp::kBaseFieldNumber;
#endif  // !_MSC_VER

IntegralTimeResp::IntegralTimeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.IntegralTimeResp)
}

void IntegralTimeResp::InitAsDefaultInstance() {
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

IntegralTimeResp::IntegralTimeResp(const IntegralTimeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.IntegralTimeResp)
}

void IntegralTimeResp::SharedCtor() {
  _cached_size_ = 0;
  new_cnt_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralTimeResp::~IntegralTimeResp() {
  // @@protoc_insertion_point(destructor:ProtoReward.IntegralTimeResp)
  SharedDtor();
}

void IntegralTimeResp::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void IntegralTimeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralTimeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralTimeResp_descriptor_;
}

const IntegralTimeResp& IntegralTimeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

IntegralTimeResp* IntegralTimeResp::default_instance_ = NULL;

IntegralTimeResp* IntegralTimeResp::New() const {
  return new IntegralTimeResp;
}

void IntegralTimeResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    new_cnt_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralTimeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.IntegralTimeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 new_cnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_cnt_)));
          set_has_new_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // required .DataCommon.CommonBaseRewardCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.IntegralTimeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.IntegralTimeResp)
  return false;
#undef DO_
}

void IntegralTimeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.IntegralTimeResp)
  // required uint32 new_cnt = 1;
  if (has_new_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_cnt(), output);
  }

  // required .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.IntegralTimeResp)
}

::google::protobuf::uint8* IntegralTimeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.IntegralTimeResp)
  // required uint32 new_cnt = 1;
  if (has_new_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_cnt(), target);
  }

  // required .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.IntegralTimeResp)
  return target;
}

int IntegralTimeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 new_cnt = 1;
    if (has_new_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_cnt());
    }

    // required .DataCommon.CommonBaseRewardCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralTimeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralTimeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralTimeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralTimeResp::MergeFrom(const IntegralTimeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_cnt()) {
      set_new_cnt(from.new_cnt());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralTimeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralTimeResp::CopyFrom(const IntegralTimeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralTimeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void IntegralTimeResp::Swap(IntegralTimeResp* other) {
  if (other != this) {
    std::swap(new_cnt_, other->new_cnt_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralTimeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralTimeResp_descriptor_;
  metadata.reflection = IntegralTimeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VIPReq::VIPReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.VIPReq)
}

void VIPReq::InitAsDefaultInstance() {
}

VIPReq::VIPReq(const VIPReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.VIPReq)
}

void VIPReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPReq::~VIPReq() {
  // @@protoc_insertion_point(destructor:ProtoReward.VIPReq)
  SharedDtor();
}

void VIPReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPReq_descriptor_;
}

const VIPReq& VIPReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

VIPReq* VIPReq::default_instance_ = NULL;

VIPReq* VIPReq::New() const {
  return new VIPReq;
}

void VIPReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.VIPReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.VIPReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.VIPReq)
  return false;
#undef DO_
}

void VIPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.VIPReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.VIPReq)
}

::google::protobuf::uint8* VIPReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.VIPReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.VIPReq)
  return target;
}

int VIPReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPReq::MergeFrom(const VIPReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPReq::CopyFrom(const VIPReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPReq::IsInitialized() const {

  return true;
}

void VIPReq::Swap(VIPReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPReq_descriptor_;
  metadata.reflection = VIPReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPResp::kEquipsFieldNumber;
const int VIPResp::kEquipsIdFieldNumber;
const int VIPResp::kEquipsCntFieldNumber;
const int VIPResp::kBaseFieldNumber;
const int VIPResp::kHerosFieldNumber;
const int VIPResp::kVipLevelFieldNumber;
const int VIPResp::kVipRewardFieldNumber;
#endif  // !_MSC_VER

VIPResp::VIPResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.VIPResp)
}

void VIPResp::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

VIPResp::VIPResp(const VIPResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.VIPResp)
}

void VIPResp::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  vip_level_ = 0u;
  vip_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPResp::~VIPResp() {
  // @@protoc_insertion_point(destructor:ProtoReward.VIPResp)
  SharedDtor();
}

void VIPResp::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void VIPResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPResp_descriptor_;
}

const VIPResp& VIPResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

VIPResp* VIPResp::default_instance_ = NULL;

VIPResp* VIPResp::New() const {
  return new VIPResp;
}

void VIPResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VIPResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 105) {
    ZR_(vip_level_, vip_reward_);
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equips_id_.Clear();
  equips_cnt_.Clear();
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.VIPResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equips_id;
        break;
      }

      // repeated uint32 equips_id = 2;
      case 2: {
        if (tag == 16) {
         parse_equips_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equips_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equips_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equips_id;
        if (input->ExpectTag(24)) goto parse_equips_cnt;
        break;
      }

      // repeated uint32 equips_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_equips_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_equips_cnt())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equips_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equips_cnt;
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // required .DataCommon.CommonBaseRewardCPP base = 4;
      case 4: {
        if (tag == 34) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_heros;
        break;
      }

      // repeated .ProtoHero.HeroBaseInfoCPP heros = 5;
      case 5: {
        if (tag == 42) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_heros;
        if (input->ExpectTag(48)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 6;
      case 6: {
        if (tag == 48) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vip_reward;
        break;
      }

      // required uint32 vip_reward = 7;
      case 7: {
        if (tag == 56) {
         parse_vip_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_reward_)));
          set_has_vip_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.VIPResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.VIPResp)
  return false;
#undef DO_
}

void VIPResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.VIPResp)
  // required .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // repeated uint32 equips_id = 2;
  for (int i = 0; i < this->equips_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equips_id(i), output);
  }

  // repeated uint32 equips_cnt = 3;
  for (int i = 0; i < this->equips_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->equips_cnt(i), output);
  }

  // required .DataCommon.CommonBaseRewardCPP base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 5;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->heros(i), output);
  }

  // required uint32 vip_level = 6;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip_level(), output);
  }

  // required uint32 vip_reward = 7;
  if (has_vip_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vip_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.VIPResp)
}

::google::protobuf::uint8* VIPResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.VIPResp)
  // required .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // repeated uint32 equips_id = 2;
  for (int i = 0; i < this->equips_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equips_id(i), target);
  }

  // repeated uint32 equips_cnt = 3;
  for (int i = 0; i < this->equips_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->equips_cnt(i), target);
  }

  // required .DataCommon.CommonBaseRewardCPP base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 5;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->heros(i), target);
  }

  // required uint32 vip_level = 6;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip_level(), target);
  }

  // required uint32 vip_reward = 7;
  if (has_vip_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vip_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.VIPResp)
  return target;
}

int VIPResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // required .DataCommon.CommonBaseRewardCPP base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 vip_level = 6;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // required uint32 vip_reward = 7;
    if (has_vip_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_reward());
    }

  }
  // repeated uint32 equips_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equips_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equips_id(i));
    }
    total_size += 1 * this->equips_id_size() + data_size;
  }

  // repeated uint32 equips_cnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equips_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equips_cnt(i));
    }
    total_size += 1 * this->equips_cnt_size() + data_size;
  }

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 5;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPResp::MergeFrom(const VIPResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_id_.MergeFrom(from.equips_id_);
  equips_cnt_.MergeFrom(from.equips_cnt_);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_reward()) {
      set_vip_reward(from.vip_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPResp::CopyFrom(const VIPResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000069) != 0x00000069) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->heros())) return false;
  return true;
}

void VIPResp::Swap(VIPResp* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    equips_id_.Swap(&other->equips_id_);
    equips_cnt_.Swap(&other->equips_cnt_);
    std::swap(base_, other->base_);
    heros_.Swap(&other->heros_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_reward_, other->vip_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPResp_descriptor_;
  metadata.reflection = VIPResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoReward

// @@protoc_insertion_point(global_scope)
