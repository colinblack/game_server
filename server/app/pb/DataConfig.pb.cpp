// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataConfig {

namespace {

const ::google::protobuf::Descriptor* BaseRewardConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseRewardConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipRewardConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipRewardConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardConfigCPP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataConfig_2eproto() {
  protobuf_AddDesc_DataConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataConfig.proto");
  GOOGLE_CHECK(file != NULL);
  BaseRewardConfigCPP_descriptor_ = file->message_type(0);
  static const int BaseRewardConfigCPP_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, hammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, arefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, sacrifice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, shadow_),
  };
  BaseRewardConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseRewardConfigCPP_descriptor_,
      BaseRewardConfigCPP::default_instance_,
      BaseRewardConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseRewardConfigCPP));
  EquipRewardConfigCPP_descriptor_ = file->message_type(1);
  static const int EquipRewardConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRewardConfigCPP, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRewardConfigCPP, count_),
  };
  EquipRewardConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipRewardConfigCPP_descriptor_,
      EquipRewardConfigCPP::default_instance_,
      EquipRewardConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRewardConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRewardConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipRewardConfigCPP));
  RewardConfigCPP_descriptor_ = file->message_type(2);
  static const int RewardConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfigCPP, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfigCPP, base_),
  };
  RewardConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardConfigCPP_descriptor_,
      RewardConfigCPP::default_instance_,
      RewardConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardConfigCPP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseRewardConfigCPP_descriptor_, &BaseRewardConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipRewardConfigCPP_descriptor_, &EquipRewardConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardConfigCPP_descriptor_, &RewardConfigCPP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataConfig_2eproto() {
  delete BaseRewardConfigCPP::default_instance_;
  delete BaseRewardConfigCPP_reflection_;
  delete EquipRewardConfigCPP::default_instance_;
  delete EquipRewardConfigCPP_reflection_;
  delete RewardConfigCPP::default_instance_;
  delete RewardConfigCPP_reflection_;
}

void protobuf_AddDesc_DataConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DataConfig.proto\022\nDataConfig\"\335\001\n\023BaseR"
    "ewardConfigCPP\022\014\n\004coin\030\001 \001(\r\022\014\n\004wood\030\002 \001"
    "(\r\022\014\n\004food\030\003 \001(\r\022\014\n\004iron\030\004 \001(\r\022\016\n\006hammer"
    "\030\005 \001(\r\022\r\n\005order\030\006 \001(\r\022\013\n\003exp\030\007 \001(\r\022\014\n\004ca"
    "sh\030\010 \001(\r\022\017\n\007refresh\030\t \001(\r\022\020\n\010arefresh\030\n "
    "\001(\r\022\021\n\tsacrifice\030\013 \001(\r\022\016\n\006market\030\014 \001(\r\022\016"
    "\n\006shadow\030\r \001(\r\"3\n\024EquipRewardConfigCPP\022\014"
    "\n\004eqid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"r\n\017RewardCon"
    "figCPP\0220\n\006equips\030\001 \001(\0132 .DataConfig.Equi"
    "pRewardConfigCPP\022-\n\004base\030\002 \001(\0132\037.DataCon"
    "fig.BaseRewardConfigCPP", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataConfig.proto", &protobuf_RegisterTypes);
  BaseRewardConfigCPP::default_instance_ = new BaseRewardConfigCPP();
  EquipRewardConfigCPP::default_instance_ = new EquipRewardConfigCPP();
  RewardConfigCPP::default_instance_ = new RewardConfigCPP();
  BaseRewardConfigCPP::default_instance_->InitAsDefaultInstance();
  EquipRewardConfigCPP::default_instance_->InitAsDefaultInstance();
  RewardConfigCPP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataConfig_2eproto {
  StaticDescriptorInitializer_DataConfig_2eproto() {
    protobuf_AddDesc_DataConfig_2eproto();
  }
} static_descriptor_initializer_DataConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BaseRewardConfigCPP::kCoinFieldNumber;
const int BaseRewardConfigCPP::kWoodFieldNumber;
const int BaseRewardConfigCPP::kFoodFieldNumber;
const int BaseRewardConfigCPP::kIronFieldNumber;
const int BaseRewardConfigCPP::kHammerFieldNumber;
const int BaseRewardConfigCPP::kOrderFieldNumber;
const int BaseRewardConfigCPP::kExpFieldNumber;
const int BaseRewardConfigCPP::kCashFieldNumber;
const int BaseRewardConfigCPP::kRefreshFieldNumber;
const int BaseRewardConfigCPP::kArefreshFieldNumber;
const int BaseRewardConfigCPP::kSacrificeFieldNumber;
const int BaseRewardConfigCPP::kMarketFieldNumber;
const int BaseRewardConfigCPP::kShadowFieldNumber;
#endif  // !_MSC_VER

BaseRewardConfigCPP::BaseRewardConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataConfig.BaseRewardConfigCPP)
}

void BaseRewardConfigCPP::InitAsDefaultInstance() {
}

BaseRewardConfigCPP::BaseRewardConfigCPP(const BaseRewardConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataConfig.BaseRewardConfigCPP)
}

void BaseRewardConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  hammer_ = 0u;
  order_ = 0u;
  exp_ = 0u;
  cash_ = 0u;
  refresh_ = 0u;
  arefresh_ = 0u;
  sacrifice_ = 0u;
  market_ = 0u;
  shadow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseRewardConfigCPP::~BaseRewardConfigCPP() {
  // @@protoc_insertion_point(destructor:DataConfig.BaseRewardConfigCPP)
  SharedDtor();
}

void BaseRewardConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseRewardConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseRewardConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseRewardConfigCPP_descriptor_;
}

const BaseRewardConfigCPP& BaseRewardConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataConfig_2eproto();
  return *default_instance_;
}

BaseRewardConfigCPP* BaseRewardConfigCPP::default_instance_ = NULL;

BaseRewardConfigCPP* BaseRewardConfigCPP::New() const {
  return new BaseRewardConfigCPP;
}

void BaseRewardConfigCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BaseRewardConfigCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(coin_, cash_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(refresh_, shadow_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseRewardConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataConfig.BaseRewardConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 coin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wood;
        break;
      }

      // optional uint32 wood = 2;
      case 2: {
        if (tag == 16) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_food;
        break;
      }

      // optional uint32 food = 3;
      case 3: {
        if (tag == 24) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iron;
        break;
      }

      // optional uint32 iron = 4;
      case 4: {
        if (tag == 32) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hammer;
        break;
      }

      // optional uint32 hammer = 5;
      case 5: {
        if (tag == 40) {
         parse_hammer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammer_)));
          set_has_hammer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_order;
        break;
      }

      // optional uint32 order = 6;
      case 6: {
        if (tag == 48) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 7;
      case 7: {
        if (tag == 56) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cash;
        break;
      }

      // optional uint32 cash = 8;
      case 8: {
        if (tag == 64) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_refresh;
        break;
      }

      // optional uint32 refresh = 9;
      case 9: {
        if (tag == 72) {
         parse_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_arefresh;
        break;
      }

      // optional uint32 arefresh = 10;
      case 10: {
        if (tag == 80) {
         parse_arefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arefresh_)));
          set_has_arefresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sacrifice;
        break;
      }

      // optional uint32 sacrifice = 11;
      case 11: {
        if (tag == 88) {
         parse_sacrifice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sacrifice_)));
          set_has_sacrifice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_market;
        break;
      }

      // optional uint32 market = 12;
      case 12: {
        if (tag == 96) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_shadow;
        break;
      }

      // optional uint32 shadow = 13;
      case 13: {
        if (tag == 104) {
         parse_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadow_)));
          set_has_shadow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataConfig.BaseRewardConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataConfig.BaseRewardConfigCPP)
  return false;
#undef DO_
}

void BaseRewardConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataConfig.BaseRewardConfigCPP)
  // optional uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // optional uint32 wood = 2;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wood(), output);
  }

  // optional uint32 food = 3;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->food(), output);
  }

  // optional uint32 iron = 4;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iron(), output);
  }

  // optional uint32 hammer = 5;
  if (has_hammer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hammer(), output);
  }

  // optional uint32 order = 6;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->order(), output);
  }

  // optional uint32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // optional uint32 cash = 8;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cash(), output);
  }

  // optional uint32 refresh = 9;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->refresh(), output);
  }

  // optional uint32 arefresh = 10;
  if (has_arefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->arefresh(), output);
  }

  // optional uint32 sacrifice = 11;
  if (has_sacrifice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sacrifice(), output);
  }

  // optional uint32 market = 12;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->market(), output);
  }

  // optional uint32 shadow = 13;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataConfig.BaseRewardConfigCPP)
}

::google::protobuf::uint8* BaseRewardConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataConfig.BaseRewardConfigCPP)
  // optional uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }

  // optional uint32 wood = 2;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wood(), target);
  }

  // optional uint32 food = 3;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->food(), target);
  }

  // optional uint32 iron = 4;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iron(), target);
  }

  // optional uint32 hammer = 5;
  if (has_hammer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hammer(), target);
  }

  // optional uint32 order = 6;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->order(), target);
  }

  // optional uint32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // optional uint32 cash = 8;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cash(), target);
  }

  // optional uint32 refresh = 9;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->refresh(), target);
  }

  // optional uint32 arefresh = 10;
  if (has_arefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->arefresh(), target);
  }

  // optional uint32 sacrifice = 11;
  if (has_sacrifice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sacrifice(), target);
  }

  // optional uint32 market = 12;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->market(), target);
  }

  // optional uint32 shadow = 13;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataConfig.BaseRewardConfigCPP)
  return target;
}

int BaseRewardConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 wood = 2;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // optional uint32 food = 3;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // optional uint32 iron = 4;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

    // optional uint32 hammer = 5;
    if (has_hammer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammer());
    }

    // optional uint32 order = 6;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // optional uint32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 cash = 8;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 refresh = 9;
    if (has_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh());
    }

    // optional uint32 arefresh = 10;
    if (has_arefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arefresh());
    }

    // optional uint32 sacrifice = 11;
    if (has_sacrifice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sacrifice());
    }

    // optional uint32 market = 12;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // optional uint32 shadow = 13;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseRewardConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseRewardConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseRewardConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseRewardConfigCPP::MergeFrom(const BaseRewardConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_hammer()) {
      set_hammer(from.hammer());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
    if (from.has_arefresh()) {
      set_arefresh(from.arefresh());
    }
    if (from.has_sacrifice()) {
      set_sacrifice(from.sacrifice());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_shadow()) {
      set_shadow(from.shadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseRewardConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRewardConfigCPP::CopyFrom(const BaseRewardConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRewardConfigCPP::IsInitialized() const {

  return true;
}

void BaseRewardConfigCPP::Swap(BaseRewardConfigCPP* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(hammer_, other->hammer_);
    std::swap(order_, other->order_);
    std::swap(exp_, other->exp_);
    std::swap(cash_, other->cash_);
    std::swap(refresh_, other->refresh_);
    std::swap(arefresh_, other->arefresh_);
    std::swap(sacrifice_, other->sacrifice_);
    std::swap(market_, other->market_);
    std::swap(shadow_, other->shadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseRewardConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseRewardConfigCPP_descriptor_;
  metadata.reflection = BaseRewardConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRewardConfigCPP::kEqidFieldNumber;
const int EquipRewardConfigCPP::kCountFieldNumber;
#endif  // !_MSC_VER

EquipRewardConfigCPP::EquipRewardConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataConfig.EquipRewardConfigCPP)
}

void EquipRewardConfigCPP::InitAsDefaultInstance() {
}

EquipRewardConfigCPP::EquipRewardConfigCPP(const EquipRewardConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataConfig.EquipRewardConfigCPP)
}

void EquipRewardConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRewardConfigCPP::~EquipRewardConfigCPP() {
  // @@protoc_insertion_point(destructor:DataConfig.EquipRewardConfigCPP)
  SharedDtor();
}

void EquipRewardConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipRewardConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipRewardConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipRewardConfigCPP_descriptor_;
}

const EquipRewardConfigCPP& EquipRewardConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataConfig_2eproto();
  return *default_instance_;
}

EquipRewardConfigCPP* EquipRewardConfigCPP::default_instance_ = NULL;

EquipRewardConfigCPP* EquipRewardConfigCPP::New() const {
  return new EquipRewardConfigCPP;
}

void EquipRewardConfigCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipRewardConfigCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipRewardConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataConfig.EquipRewardConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataConfig.EquipRewardConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataConfig.EquipRewardConfigCPP)
  return false;
#undef DO_
}

void EquipRewardConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataConfig.EquipRewardConfigCPP)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataConfig.EquipRewardConfigCPP)
}

::google::protobuf::uint8* EquipRewardConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataConfig.EquipRewardConfigCPP)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataConfig.EquipRewardConfigCPP)
  return target;
}

int EquipRewardConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRewardConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipRewardConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipRewardConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipRewardConfigCPP::MergeFrom(const EquipRewardConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipRewardConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipRewardConfigCPP::CopyFrom(const EquipRewardConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRewardConfigCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipRewardConfigCPP::Swap(EquipRewardConfigCPP* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipRewardConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipRewardConfigCPP_descriptor_;
  metadata.reflection = EquipRewardConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardConfigCPP::kEquipsFieldNumber;
const int RewardConfigCPP::kBaseFieldNumber;
#endif  // !_MSC_VER

RewardConfigCPP::RewardConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataConfig.RewardConfigCPP)
}

void RewardConfigCPP::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataConfig::EquipRewardConfigCPP*>(&::DataConfig::EquipRewardConfigCPP::default_instance());
  base_ = const_cast< ::DataConfig::BaseRewardConfigCPP*>(&::DataConfig::BaseRewardConfigCPP::default_instance());
}

RewardConfigCPP::RewardConfigCPP(const RewardConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataConfig.RewardConfigCPP)
}

void RewardConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardConfigCPP::~RewardConfigCPP() {
  // @@protoc_insertion_point(destructor:DataConfig.RewardConfigCPP)
  SharedDtor();
}

void RewardConfigCPP::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void RewardConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardConfigCPP_descriptor_;
}

const RewardConfigCPP& RewardConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataConfig_2eproto();
  return *default_instance_;
}

RewardConfigCPP* RewardConfigCPP::default_instance_ = NULL;

RewardConfigCPP* RewardConfigCPP::New() const {
  return new RewardConfigCPP;
}

void RewardConfigCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataConfig::EquipRewardConfigCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataConfig::BaseRewardConfigCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataConfig.RewardConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataConfig.EquipRewardConfigCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .DataConfig.BaseRewardConfigCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataConfig.RewardConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataConfig.RewardConfigCPP)
  return false;
#undef DO_
}

void RewardConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataConfig.RewardConfigCPP)
  // optional .DataConfig.EquipRewardConfigCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .DataConfig.BaseRewardConfigCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataConfig.RewardConfigCPP)
}

::google::protobuf::uint8* RewardConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataConfig.RewardConfigCPP)
  // optional .DataConfig.EquipRewardConfigCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .DataConfig.BaseRewardConfigCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataConfig.RewardConfigCPP)
  return target;
}

int RewardConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataConfig.EquipRewardConfigCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataConfig.BaseRewardConfigCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardConfigCPP::MergeFrom(const RewardConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataConfig::EquipRewardConfigCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataConfig::BaseRewardConfigCPP::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardConfigCPP::CopyFrom(const RewardConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardConfigCPP::IsInitialized() const {

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  return true;
}

void RewardConfigCPP::Swap(RewardConfigCPP* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardConfigCPP_descriptor_;
  metadata.reflection = RewardConfigCPP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataConfig

// @@protoc_insertion_point(global_scope)
