// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataCommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataCommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataCommon {

namespace {

const ::google::protobuf::Descriptor* EquipShopCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipShopCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSubsCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSubsCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentAllCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentAllCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonBaseRewardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonBaseRewardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserResourceCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserResourceCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostItemCPP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataCommon_2eproto() {
  protobuf_AddDesc_DataCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataCommon.proto");
  GOOGLE_CHECK(file != NULL);
  EquipShopCPP_descriptor_ = file->message_type(0);
  static const int EquipShopCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipShopCPP, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipShopCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipShopCPP, subs_),
  };
  EquipShopCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipShopCPP_descriptor_,
      EquipShopCPP::default_instance_,
      EquipShopCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipShopCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipShopCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipShopCPP));
  EquipSubsCPP_descriptor_ = file->message_type(1);
  static const int EquipSubsCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSubsCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSubsCPP, level_),
  };
  EquipSubsCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSubsCPP_descriptor_,
      EquipSubsCPP::default_instance_,
      EquipSubsCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSubsCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSubsCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSubsCPP));
  EquipmentCPP_descriptor_ = file->message_type(2);
  static const int EquipmentCPP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, equd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, deltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, issold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, bornval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, subs_),
  };
  EquipmentCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentCPP_descriptor_,
      EquipmentCPP::default_instance_,
      EquipmentCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentCPP));
  EquipmentAllCPP_descriptor_ = file->message_type(3);
  static const int EquipmentAllCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentAllCPP, equips_),
  };
  EquipmentAllCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentAllCPP_descriptor_,
      EquipmentAllCPP::default_instance_,
      EquipmentAllCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentAllCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentAllCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentAllCPP));
  RewardItemCPP_descriptor_ = file->message_type(4);
  static const int RewardItemCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCPP, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCPP, total_value_),
  };
  RewardItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItemCPP_descriptor_,
      RewardItemCPP::default_instance_,
      RewardItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItemCPP));
  CommonBaseRewardCPP_descriptor_ = file->message_type(5);
  static const int CommonBaseRewardCPP_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, hammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, arefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, sacrifice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, shadow_),
  };
  CommonBaseRewardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonBaseRewardCPP_descriptor_,
      CommonBaseRewardCPP::default_instance_,
      CommonBaseRewardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonBaseRewardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonBaseRewardCPP));
  UserResourceCPP_descriptor_ = file->message_type(6);
  static const int UserResourceCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, cash_),
  };
  UserResourceCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserResourceCPP_descriptor_,
      UserResourceCPP::default_instance_,
      UserResourceCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserResourceCPP));
  CostItemCPP_descriptor_ = file->message_type(7);
  static const int CostItemCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostItemCPP, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostItemCPP, total_value_),
  };
  CostItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostItemCPP_descriptor_,
      CostItemCPP::default_instance_,
      CostItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostItemCPP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipShopCPP_descriptor_, &EquipShopCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSubsCPP_descriptor_, &EquipSubsCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentCPP_descriptor_, &EquipmentCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentAllCPP_descriptor_, &EquipmentAllCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItemCPP_descriptor_, &RewardItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonBaseRewardCPP_descriptor_, &CommonBaseRewardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserResourceCPP_descriptor_, &UserResourceCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostItemCPP_descriptor_, &CostItemCPP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataCommon_2eproto() {
  delete EquipShopCPP::default_instance_;
  delete EquipShopCPP_reflection_;
  delete EquipSubsCPP::default_instance_;
  delete EquipSubsCPP_reflection_;
  delete EquipmentCPP::default_instance_;
  delete EquipmentCPP_reflection_;
  delete EquipmentAllCPP::default_instance_;
  delete EquipmentAllCPP_reflection_;
  delete RewardItemCPP::default_instance_;
  delete RewardItemCPP_reflection_;
  delete CommonBaseRewardCPP::default_instance_;
  delete CommonBaseRewardCPP_reflection_;
  delete UserResourceCPP::default_instance_;
  delete UserResourceCPP_reflection_;
  delete CostItemCPP::default_instance_;
  delete CostItemCPP_reflection_;
}

void protobuf_AddDesc_DataCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DataCommon.proto\022\nDataCommon\":\n\014EquipS"
    "hopCPP\022\014\n\004eqid\030\001 \002(\r\022\016\n\006status\030\002 \002(\010\022\014\n\004"
    "subs\030\003 \003(\r\"+\n\014EquipSubsCPP\022\014\n\004type\030\001 \002(\r"
    "\022\r\n\005level\030\002 \002(\r\"\257\001\n\014EquipmentCPP\022\014\n\004equd"
    "\030\001 \002(\r\022\014\n\004eqid\030\002 \002(\r\022\013\n\003num\030\003 \002(\r\022\017\n\007del"
    "time\030\004 \002(\r\022\016\n\006heroid\030\005 \002(\r\022\014\n\004star\030\007 \002(\r"
    "\022\016\n\006issold\030\010 \002(\010\022\017\n\007bornval\030\t \003(\r\022&\n\004sub"
    "s\030\n \003(\0132\030.DataCommon.EquipSubsCPP\";\n\017Equ"
    "ipmentAllCPP\022(\n\006equips\030\001 \003(\0132\030.DataCommo"
    "n.EquipmentCPP\"3\n\rRewardItemCPP\022\r\n\005value"
    "\030\001 \002(\r\022\023\n\013total_value\030\002 \002(\004\"\274\004\n\023CommonBa"
    "seRewardCPP\022\'\n\004food\030\001 \001(\0132\031.DataCommon.R"
    "ewardItemCPP\022\'\n\004iron\030\002 \001(\0132\031.DataCommon."
    "RewardItemCPP\022(\n\005order\030\003 \001(\0132\031.DataCommo"
    "n.RewardItemCPP\022&\n\003exp\030\004 \001(\0132\031.DataCommo"
    "n.RewardItemCPP\022\'\n\004coin\030\005 \001(\0132\031.DataComm"
    "on.RewardItemCPP\022\'\n\004wood\030\006 \001(\0132\031.DataCom"
    "mon.RewardItemCPP\022)\n\006hammer\030\007 \001(\0132\031.Data"
    "Common.RewardItemCPP\022\'\n\004cash\030\010 \001(\0132\031.Dat"
    "aCommon.RewardItemCPP\022*\n\007refresh\030\t \001(\0132\031"
    ".DataCommon.RewardItemCPP\022+\n\010arefresh\030\n "
    "\001(\0132\031.DataCommon.RewardItemCPP\022,\n\tsacrif"
    "ice\030\013 \001(\0132\031.DataCommon.RewardItemCPP\022)\n\006"
    "market\030\014 \001(\0132\031.DataCommon.RewardItemCPP\022"
    ")\n\006shadow\030\r \001(\0132\031.DataCommon.RewardItemC"
    "PP\"W\n\017UserResourceCPP\022\014\n\004coin\030\001 \002(\r\022\014\n\004w"
    "ood\030\002 \002(\r\022\014\n\004food\030\003 \002(\r\022\014\n\004iron\030\004 \002(\r\022\014\n"
    "\004cash\030\005 \001(\r\"1\n\013CostItemCPP\022\r\n\005value\030\001 \002("
    "\r\022\023\n\013total_value\030\002 \002(\004", 1142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataCommon.proto", &protobuf_RegisterTypes);
  EquipShopCPP::default_instance_ = new EquipShopCPP();
  EquipSubsCPP::default_instance_ = new EquipSubsCPP();
  EquipmentCPP::default_instance_ = new EquipmentCPP();
  EquipmentAllCPP::default_instance_ = new EquipmentAllCPP();
  RewardItemCPP::default_instance_ = new RewardItemCPP();
  CommonBaseRewardCPP::default_instance_ = new CommonBaseRewardCPP();
  UserResourceCPP::default_instance_ = new UserResourceCPP();
  CostItemCPP::default_instance_ = new CostItemCPP();
  EquipShopCPP::default_instance_->InitAsDefaultInstance();
  EquipSubsCPP::default_instance_->InitAsDefaultInstance();
  EquipmentCPP::default_instance_->InitAsDefaultInstance();
  EquipmentAllCPP::default_instance_->InitAsDefaultInstance();
  RewardItemCPP::default_instance_->InitAsDefaultInstance();
  CommonBaseRewardCPP::default_instance_->InitAsDefaultInstance();
  UserResourceCPP::default_instance_->InitAsDefaultInstance();
  CostItemCPP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataCommon_2eproto {
  StaticDescriptorInitializer_DataCommon_2eproto() {
    protobuf_AddDesc_DataCommon_2eproto();
  }
} static_descriptor_initializer_DataCommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipShopCPP::kEqidFieldNumber;
const int EquipShopCPP::kStatusFieldNumber;
const int EquipShopCPP::kSubsFieldNumber;
#endif  // !_MSC_VER

EquipShopCPP::EquipShopCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.EquipShopCPP)
}

void EquipShopCPP::InitAsDefaultInstance() {
}

EquipShopCPP::EquipShopCPP(const EquipShopCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.EquipShopCPP)
}

void EquipShopCPP::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipShopCPP::~EquipShopCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.EquipShopCPP)
  SharedDtor();
}

void EquipShopCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipShopCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipShopCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipShopCPP_descriptor_;
}

const EquipShopCPP& EquipShopCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

EquipShopCPP* EquipShopCPP::default_instance_ = NULL;

EquipShopCPP* EquipShopCPP::New() const {
  return new EquipShopCPP;
}

void EquipShopCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipShopCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipShopCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.EquipShopCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subs;
        break;
      }

      // repeated uint32 subs = 3;
      case 3: {
        if (tag == 24) {
         parse_subs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_subs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.EquipShopCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.EquipShopCPP)
  return false;
#undef DO_
}

void EquipShopCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.EquipShopCPP)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // repeated uint32 subs = 3;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->subs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.EquipShopCPP)
}

::google::protobuf::uint8* EquipShopCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.EquipShopCPP)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // repeated uint32 subs = 3;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->subs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.EquipShopCPP)
  return target;
}

int EquipShopCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 subs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->subs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subs(i));
    }
    total_size += 1 * this->subs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipShopCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipShopCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipShopCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipShopCPP::MergeFrom(const EquipShopCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  subs_.MergeFrom(from.subs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipShopCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipShopCPP::CopyFrom(const EquipShopCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipShopCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipShopCPP::Swap(EquipShopCPP* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(status_, other->status_);
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipShopCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipShopCPP_descriptor_;
  metadata.reflection = EquipShopCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSubsCPP::kTypeFieldNumber;
const int EquipSubsCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

EquipSubsCPP::EquipSubsCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.EquipSubsCPP)
}

void EquipSubsCPP::InitAsDefaultInstance() {
}

EquipSubsCPP::EquipSubsCPP(const EquipSubsCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.EquipSubsCPP)
}

void EquipSubsCPP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSubsCPP::~EquipSubsCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.EquipSubsCPP)
  SharedDtor();
}

void EquipSubsCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSubsCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSubsCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSubsCPP_descriptor_;
}

const EquipSubsCPP& EquipSubsCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

EquipSubsCPP* EquipSubsCPP::default_instance_ = NULL;

EquipSubsCPP* EquipSubsCPP::New() const {
  return new EquipSubsCPP;
}

void EquipSubsCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipSubsCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSubsCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.EquipSubsCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.EquipSubsCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.EquipSubsCPP)
  return false;
#undef DO_
}

void EquipSubsCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.EquipSubsCPP)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.EquipSubsCPP)
}

::google::protobuf::uint8* EquipSubsCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.EquipSubsCPP)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.EquipSubsCPP)
  return target;
}

int EquipSubsCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSubsCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSubsCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSubsCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSubsCPP::MergeFrom(const EquipSubsCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSubsCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSubsCPP::CopyFrom(const EquipSubsCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSubsCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipSubsCPP::Swap(EquipSubsCPP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSubsCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSubsCPP_descriptor_;
  metadata.reflection = EquipSubsCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCPP::kEqudFieldNumber;
const int EquipmentCPP::kEqidFieldNumber;
const int EquipmentCPP::kNumFieldNumber;
const int EquipmentCPP::kDeltimeFieldNumber;
const int EquipmentCPP::kHeroidFieldNumber;
const int EquipmentCPP::kStarFieldNumber;
const int EquipmentCPP::kIssoldFieldNumber;
const int EquipmentCPP::kBornvalFieldNumber;
const int EquipmentCPP::kSubsFieldNumber;
#endif  // !_MSC_VER

EquipmentCPP::EquipmentCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.EquipmentCPP)
}

void EquipmentCPP::InitAsDefaultInstance() {
}

EquipmentCPP::EquipmentCPP(const EquipmentCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.EquipmentCPP)
}

void EquipmentCPP::SharedCtor() {
  _cached_size_ = 0;
  equd_ = 0u;
  eqid_ = 0u;
  num_ = 0u;
  deltime_ = 0u;
  heroid_ = 0u;
  star_ = 0u;
  issold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCPP::~EquipmentCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.EquipmentCPP)
  SharedDtor();
}

void EquipmentCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCPP_descriptor_;
}

const EquipmentCPP& EquipmentCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

EquipmentCPP* EquipmentCPP::default_instance_ = NULL;

EquipmentCPP* EquipmentCPP::New() const {
  return new EquipmentCPP;
}

void EquipmentCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(equd_, star_);
    issold_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bornval_.Clear();
  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.EquipmentCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eqid;
        break;
      }

      // required uint32 eqid = 2;
      case 2: {
        if (tag == 16) {
         parse_eqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deltime;
        break;
      }

      // required uint32 deltime = 4;
      case 4: {
        if (tag == 32) {
         parse_deltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deltime_)));
          set_has_deltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // required uint32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_star;
        break;
      }

      // required uint32 star = 7;
      case 7: {
        if (tag == 56) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_issold;
        break;
      }

      // required bool issold = 8;
      case 8: {
        if (tag == 64) {
         parse_issold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issold_)));
          set_has_issold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bornval;
        break;
      }

      // repeated uint32 bornval = 9;
      case 9: {
        if (tag == 72) {
         parse_bornval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_bornval())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bornval())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bornval;
        if (input->ExpectTag(82)) goto parse_subs;
        break;
      }

      // repeated .DataCommon.EquipSubsCPP subs = 10;
      case 10: {
        if (tag == 82) {
         parse_subs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_subs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.EquipmentCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.EquipmentCPP)
  return false;
#undef DO_
}

void EquipmentCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.EquipmentCPP)
  // required uint32 equd = 1;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equd(), output);
  }

  // required uint32 eqid = 2;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eqid(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // required uint32 deltime = 4;
  if (has_deltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deltime(), output);
  }

  // required uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // required uint32 star = 7;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->star(), output);
  }

  // required bool issold = 8;
  if (has_issold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->issold(), output);
  }

  // repeated uint32 bornval = 9;
  for (int i = 0; i < this->bornval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->bornval(i), output);
  }

  // repeated .DataCommon.EquipSubsCPP subs = 10;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->subs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.EquipmentCPP)
}

::google::protobuf::uint8* EquipmentCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.EquipmentCPP)
  // required uint32 equd = 1;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equd(), target);
  }

  // required uint32 eqid = 2;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eqid(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // required uint32 deltime = 4;
  if (has_deltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deltime(), target);
  }

  // required uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // required uint32 star = 7;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->star(), target);
  }

  // required bool issold = 8;
  if (has_issold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->issold(), target);
  }

  // repeated uint32 bornval = 9;
  for (int i = 0; i < this->bornval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->bornval(i), target);
  }

  // repeated .DataCommon.EquipSubsCPP subs = 10;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->subs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.EquipmentCPP)
  return target;
}

int EquipmentCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equd = 1;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

    // required uint32 eqid = 2;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 deltime = 4;
    if (has_deltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deltime());
    }

    // required uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // required uint32 star = 7;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required bool issold = 8;
    if (has_issold()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 bornval = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bornval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bornval(i));
    }
    total_size += 1 * this->bornval_size() + data_size;
  }

  // repeated .DataCommon.EquipSubsCPP subs = 10;
  total_size += 1 * this->subs_size();
  for (int i = 0; i < this->subs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentCPP::MergeFrom(const EquipmentCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  bornval_.MergeFrom(from.bornval_);
  subs_.MergeFrom(from.subs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equd()) {
      set_equd(from.equd());
    }
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_deltime()) {
      set_deltime(from.deltime());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_issold()) {
      set_issold(from.issold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentCPP::CopyFrom(const EquipmentCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->subs())) return false;
  return true;
}

void EquipmentCPP::Swap(EquipmentCPP* other) {
  if (other != this) {
    std::swap(equd_, other->equd_);
    std::swap(eqid_, other->eqid_);
    std::swap(num_, other->num_);
    std::swap(deltime_, other->deltime_);
    std::swap(heroid_, other->heroid_);
    std::swap(star_, other->star_);
    std::swap(issold_, other->issold_);
    bornval_.Swap(&other->bornval_);
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentCPP_descriptor_;
  metadata.reflection = EquipmentCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentAllCPP::kEquipsFieldNumber;
#endif  // !_MSC_VER

EquipmentAllCPP::EquipmentAllCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.EquipmentAllCPP)
}

void EquipmentAllCPP::InitAsDefaultInstance() {
}

EquipmentAllCPP::EquipmentAllCPP(const EquipmentAllCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.EquipmentAllCPP)
}

void EquipmentAllCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentAllCPP::~EquipmentAllCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.EquipmentAllCPP)
  SharedDtor();
}

void EquipmentAllCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentAllCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentAllCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentAllCPP_descriptor_;
}

const EquipmentAllCPP& EquipmentAllCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

EquipmentAllCPP* EquipmentAllCPP::default_instance_ = NULL;

EquipmentAllCPP* EquipmentAllCPP::New() const {
  return new EquipmentAllCPP;
}

void EquipmentAllCPP::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentAllCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.EquipmentAllCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataCommon.EquipmentCPP equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.EquipmentAllCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.EquipmentAllCPP)
  return false;
#undef DO_
}

void EquipmentAllCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.EquipmentAllCPP)
  // repeated .DataCommon.EquipmentCPP equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.EquipmentAllCPP)
}

::google::protobuf::uint8* EquipmentAllCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.EquipmentAllCPP)
  // repeated .DataCommon.EquipmentCPP equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.EquipmentAllCPP)
  return target;
}

int EquipmentAllCPP::ByteSize() const {
  int total_size = 0;

  // repeated .DataCommon.EquipmentCPP equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentAllCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentAllCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentAllCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentAllCPP::MergeFrom(const EquipmentAllCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentAllCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentAllCPP::CopyFrom(const EquipmentAllCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentAllCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  return true;
}

void EquipmentAllCPP::Swap(EquipmentAllCPP* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentAllCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentAllCPP_descriptor_;
  metadata.reflection = EquipmentAllCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItemCPP::kValueFieldNumber;
const int RewardItemCPP::kTotalValueFieldNumber;
#endif  // !_MSC_VER

RewardItemCPP::RewardItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.RewardItemCPP)
}

void RewardItemCPP::InitAsDefaultInstance() {
}

RewardItemCPP::RewardItemCPP(const RewardItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.RewardItemCPP)
}

void RewardItemCPP::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  total_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItemCPP::~RewardItemCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.RewardItemCPP)
  SharedDtor();
}

void RewardItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItemCPP_descriptor_;
}

const RewardItemCPP& RewardItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

RewardItemCPP* RewardItemCPP::default_instance_ = NULL;

RewardItemCPP* RewardItemCPP::New() const {
  return new RewardItemCPP;
}

void RewardItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(total_value_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.RewardItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_value;
        break;
      }

      // required uint64 total_value = 2;
      case 2: {
        if (tag == 16) {
         parse_total_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_value_)));
          set_has_total_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.RewardItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.RewardItemCPP)
  return false;
#undef DO_
}

void RewardItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.RewardItemCPP)
  // required uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // required uint64 total_value = 2;
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.RewardItemCPP)
}

::google::protobuf::uint8* RewardItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.RewardItemCPP)
  // required uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // required uint64 total_value = 2;
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.RewardItemCPP)
  return target;
}

int RewardItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint64 total_value = 2;
    if (has_total_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItemCPP::MergeFrom(const RewardItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItemCPP::CopyFrom(const RewardItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RewardItemCPP::Swap(RewardItemCPP* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(total_value_, other->total_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItemCPP_descriptor_;
  metadata.reflection = RewardItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonBaseRewardCPP::kFoodFieldNumber;
const int CommonBaseRewardCPP::kIronFieldNumber;
const int CommonBaseRewardCPP::kOrderFieldNumber;
const int CommonBaseRewardCPP::kExpFieldNumber;
const int CommonBaseRewardCPP::kCoinFieldNumber;
const int CommonBaseRewardCPP::kWoodFieldNumber;
const int CommonBaseRewardCPP::kHammerFieldNumber;
const int CommonBaseRewardCPP::kCashFieldNumber;
const int CommonBaseRewardCPP::kRefreshFieldNumber;
const int CommonBaseRewardCPP::kArefreshFieldNumber;
const int CommonBaseRewardCPP::kSacrificeFieldNumber;
const int CommonBaseRewardCPP::kMarketFieldNumber;
const int CommonBaseRewardCPP::kShadowFieldNumber;
#endif  // !_MSC_VER

CommonBaseRewardCPP::CommonBaseRewardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.CommonBaseRewardCPP)
}

void CommonBaseRewardCPP::InitAsDefaultInstance() {
  food_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  iron_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  order_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  exp_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  coin_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  wood_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  hammer_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  cash_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  refresh_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  arefresh_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  sacrifice_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  market_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  shadow_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
}

CommonBaseRewardCPP::CommonBaseRewardCPP(const CommonBaseRewardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.CommonBaseRewardCPP)
}

void CommonBaseRewardCPP::SharedCtor() {
  _cached_size_ = 0;
  food_ = NULL;
  iron_ = NULL;
  order_ = NULL;
  exp_ = NULL;
  coin_ = NULL;
  wood_ = NULL;
  hammer_ = NULL;
  cash_ = NULL;
  refresh_ = NULL;
  arefresh_ = NULL;
  sacrifice_ = NULL;
  market_ = NULL;
  shadow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonBaseRewardCPP::~CommonBaseRewardCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.CommonBaseRewardCPP)
  SharedDtor();
}

void CommonBaseRewardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete food_;
    delete iron_;
    delete order_;
    delete exp_;
    delete coin_;
    delete wood_;
    delete hammer_;
    delete cash_;
    delete refresh_;
    delete arefresh_;
    delete sacrifice_;
    delete market_;
    delete shadow_;
  }
}

void CommonBaseRewardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonBaseRewardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonBaseRewardCPP_descriptor_;
}

const CommonBaseRewardCPP& CommonBaseRewardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

CommonBaseRewardCPP* CommonBaseRewardCPP::default_instance_ = NULL;

CommonBaseRewardCPP* CommonBaseRewardCPP::New() const {
  return new CommonBaseRewardCPP;
}

void CommonBaseRewardCPP::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_food()) {
      if (food_ != NULL) food_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_iron()) {
      if (iron_ != NULL) iron_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_order()) {
      if (order_ != NULL) order_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_exp()) {
      if (exp_ != NULL) exp_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_coin()) {
      if (coin_ != NULL) coin_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_wood()) {
      if (wood_ != NULL) wood_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_hammer()) {
      if (hammer_ != NULL) hammer_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_cash()) {
      if (cash_ != NULL) cash_->::DataCommon::RewardItemCPP::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_refresh()) {
      if (refresh_ != NULL) refresh_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_arefresh()) {
      if (arefresh_ != NULL) arefresh_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_sacrifice()) {
      if (sacrifice_ != NULL) sacrifice_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_market()) {
      if (market_ != NULL) market_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::DataCommon::RewardItemCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonBaseRewardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.CommonBaseRewardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.RewardItemCPP food = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_iron;
        break;
      }

      // optional .DataCommon.RewardItemCPP iron = 2;
      case 2: {
        if (tag == 18) {
         parse_iron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iron()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_order;
        break;
      }

      // optional .DataCommon.RewardItemCPP order = 3;
      case 3: {
        if (tag == 26) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exp;
        break;
      }

      // optional .DataCommon.RewardItemCPP exp = 4;
      case 4: {
        if (tag == 34) {
         parse_exp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_coin;
        break;
      }

      // optional .DataCommon.RewardItemCPP coin = 5;
      case 5: {
        if (tag == 42) {
         parse_coin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_wood;
        break;
      }

      // optional .DataCommon.RewardItemCPP wood = 6;
      case 6: {
        if (tag == 50) {
         parse_wood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wood()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hammer;
        break;
      }

      // optional .DataCommon.RewardItemCPP hammer = 7;
      case 7: {
        if (tag == 58) {
         parse_hammer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hammer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cash;
        break;
      }

      // optional .DataCommon.RewardItemCPP cash = 8;
      case 8: {
        if (tag == 66) {
         parse_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_refresh;
        break;
      }

      // optional .DataCommon.RewardItemCPP refresh = 9;
      case 9: {
        if (tag == 74) {
         parse_refresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refresh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_arefresh;
        break;
      }

      // optional .DataCommon.RewardItemCPP arefresh = 10;
      case 10: {
        if (tag == 82) {
         parse_arefresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arefresh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sacrifice;
        break;
      }

      // optional .DataCommon.RewardItemCPP sacrifice = 11;
      case 11: {
        if (tag == 90) {
         parse_sacrifice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sacrifice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_market;
        break;
      }

      // optional .DataCommon.RewardItemCPP market = 12;
      case 12: {
        if (tag == 98) {
         parse_market:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_shadow;
        break;
      }

      // optional .DataCommon.RewardItemCPP shadow = 13;
      case 13: {
        if (tag == 106) {
         parse_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.CommonBaseRewardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.CommonBaseRewardCPP)
  return false;
#undef DO_
}

void CommonBaseRewardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.CommonBaseRewardCPP)
  // optional .DataCommon.RewardItemCPP food = 1;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->food(), output);
  }

  // optional .DataCommon.RewardItemCPP iron = 2;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iron(), output);
  }

  // optional .DataCommon.RewardItemCPP order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->order(), output);
  }

  // optional .DataCommon.RewardItemCPP exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exp(), output);
  }

  // optional .DataCommon.RewardItemCPP coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->coin(), output);
  }

  // optional .DataCommon.RewardItemCPP wood = 6;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wood(), output);
  }

  // optional .DataCommon.RewardItemCPP hammer = 7;
  if (has_hammer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hammer(), output);
  }

  // optional .DataCommon.RewardItemCPP cash = 8;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cash(), output);
  }

  // optional .DataCommon.RewardItemCPP refresh = 9;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->refresh(), output);
  }

  // optional .DataCommon.RewardItemCPP arefresh = 10;
  if (has_arefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->arefresh(), output);
  }

  // optional .DataCommon.RewardItemCPP sacrifice = 11;
  if (has_sacrifice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sacrifice(), output);
  }

  // optional .DataCommon.RewardItemCPP market = 12;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->market(), output);
  }

  // optional .DataCommon.RewardItemCPP shadow = 13;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->shadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.CommonBaseRewardCPP)
}

::google::protobuf::uint8* CommonBaseRewardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.CommonBaseRewardCPP)
  // optional .DataCommon.RewardItemCPP food = 1;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->food(), target);
  }

  // optional .DataCommon.RewardItemCPP iron = 2;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iron(), target);
  }

  // optional .DataCommon.RewardItemCPP order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->order(), target);
  }

  // optional .DataCommon.RewardItemCPP exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exp(), target);
  }

  // optional .DataCommon.RewardItemCPP coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->coin(), target);
  }

  // optional .DataCommon.RewardItemCPP wood = 6;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->wood(), target);
  }

  // optional .DataCommon.RewardItemCPP hammer = 7;
  if (has_hammer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hammer(), target);
  }

  // optional .DataCommon.RewardItemCPP cash = 8;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cash(), target);
  }

  // optional .DataCommon.RewardItemCPP refresh = 9;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->refresh(), target);
  }

  // optional .DataCommon.RewardItemCPP arefresh = 10;
  if (has_arefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->arefresh(), target);
  }

  // optional .DataCommon.RewardItemCPP sacrifice = 11;
  if (has_sacrifice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sacrifice(), target);
  }

  // optional .DataCommon.RewardItemCPP market = 12;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->market(), target);
  }

  // optional .DataCommon.RewardItemCPP shadow = 13;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->shadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.CommonBaseRewardCPP)
  return target;
}

int CommonBaseRewardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.RewardItemCPP food = 1;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food());
    }

    // optional .DataCommon.RewardItemCPP iron = 2;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iron());
    }

    // optional .DataCommon.RewardItemCPP order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

    // optional .DataCommon.RewardItemCPP exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp());
    }

    // optional .DataCommon.RewardItemCPP coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coin());
    }

    // optional .DataCommon.RewardItemCPP wood = 6;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wood());
    }

    // optional .DataCommon.RewardItemCPP hammer = 7;
    if (has_hammer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hammer());
    }

    // optional .DataCommon.RewardItemCPP cash = 8;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DataCommon.RewardItemCPP refresh = 9;
    if (has_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refresh());
    }

    // optional .DataCommon.RewardItemCPP arefresh = 10;
    if (has_arefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arefresh());
    }

    // optional .DataCommon.RewardItemCPP sacrifice = 11;
    if (has_sacrifice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sacrifice());
    }

    // optional .DataCommon.RewardItemCPP market = 12;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market());
    }

    // optional .DataCommon.RewardItemCPP shadow = 13;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonBaseRewardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonBaseRewardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonBaseRewardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonBaseRewardCPP::MergeFrom(const CommonBaseRewardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_food()) {
      mutable_food()->::DataCommon::RewardItemCPP::MergeFrom(from.food());
    }
    if (from.has_iron()) {
      mutable_iron()->::DataCommon::RewardItemCPP::MergeFrom(from.iron());
    }
    if (from.has_order()) {
      mutable_order()->::DataCommon::RewardItemCPP::MergeFrom(from.order());
    }
    if (from.has_exp()) {
      mutable_exp()->::DataCommon::RewardItemCPP::MergeFrom(from.exp());
    }
    if (from.has_coin()) {
      mutable_coin()->::DataCommon::RewardItemCPP::MergeFrom(from.coin());
    }
    if (from.has_wood()) {
      mutable_wood()->::DataCommon::RewardItemCPP::MergeFrom(from.wood());
    }
    if (from.has_hammer()) {
      mutable_hammer()->::DataCommon::RewardItemCPP::MergeFrom(from.hammer());
    }
    if (from.has_cash()) {
      mutable_cash()->::DataCommon::RewardItemCPP::MergeFrom(from.cash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refresh()) {
      mutable_refresh()->::DataCommon::RewardItemCPP::MergeFrom(from.refresh());
    }
    if (from.has_arefresh()) {
      mutable_arefresh()->::DataCommon::RewardItemCPP::MergeFrom(from.arefresh());
    }
    if (from.has_sacrifice()) {
      mutable_sacrifice()->::DataCommon::RewardItemCPP::MergeFrom(from.sacrifice());
    }
    if (from.has_market()) {
      mutable_market()->::DataCommon::RewardItemCPP::MergeFrom(from.market());
    }
    if (from.has_shadow()) {
      mutable_shadow()->::DataCommon::RewardItemCPP::MergeFrom(from.shadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonBaseRewardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonBaseRewardCPP::CopyFrom(const CommonBaseRewardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonBaseRewardCPP::IsInitialized() const {

  if (has_food()) {
    if (!this->food().IsInitialized()) return false;
  }
  if (has_iron()) {
    if (!this->iron().IsInitialized()) return false;
  }
  if (has_order()) {
    if (!this->order().IsInitialized()) return false;
  }
  if (has_exp()) {
    if (!this->exp().IsInitialized()) return false;
  }
  if (has_coin()) {
    if (!this->coin().IsInitialized()) return false;
  }
  if (has_wood()) {
    if (!this->wood().IsInitialized()) return false;
  }
  if (has_hammer()) {
    if (!this->hammer().IsInitialized()) return false;
  }
  if (has_cash()) {
    if (!this->cash().IsInitialized()) return false;
  }
  if (has_refresh()) {
    if (!this->refresh().IsInitialized()) return false;
  }
  if (has_arefresh()) {
    if (!this->arefresh().IsInitialized()) return false;
  }
  if (has_sacrifice()) {
    if (!this->sacrifice().IsInitialized()) return false;
  }
  if (has_market()) {
    if (!this->market().IsInitialized()) return false;
  }
  if (has_shadow()) {
    if (!this->shadow().IsInitialized()) return false;
  }
  return true;
}

void CommonBaseRewardCPP::Swap(CommonBaseRewardCPP* other) {
  if (other != this) {
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(order_, other->order_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(hammer_, other->hammer_);
    std::swap(cash_, other->cash_);
    std::swap(refresh_, other->refresh_);
    std::swap(arefresh_, other->arefresh_);
    std::swap(sacrifice_, other->sacrifice_);
    std::swap(market_, other->market_);
    std::swap(shadow_, other->shadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonBaseRewardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonBaseRewardCPP_descriptor_;
  metadata.reflection = CommonBaseRewardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserResourceCPP::kCoinFieldNumber;
const int UserResourceCPP::kWoodFieldNumber;
const int UserResourceCPP::kFoodFieldNumber;
const int UserResourceCPP::kIronFieldNumber;
const int UserResourceCPP::kCashFieldNumber;
#endif  // !_MSC_VER

UserResourceCPP::UserResourceCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.UserResourceCPP)
}

void UserResourceCPP::InitAsDefaultInstance() {
}

UserResourceCPP::UserResourceCPP(const UserResourceCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.UserResourceCPP)
}

void UserResourceCPP::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserResourceCPP::~UserResourceCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.UserResourceCPP)
  SharedDtor();
}

void UserResourceCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserResourceCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserResourceCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserResourceCPP_descriptor_;
}

const UserResourceCPP& UserResourceCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

UserResourceCPP* UserResourceCPP::default_instance_ = NULL;

UserResourceCPP* UserResourceCPP::New() const {
  return new UserResourceCPP;
}

void UserResourceCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserResourceCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(coin_, cash_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserResourceCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.UserResourceCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wood;
        break;
      }

      // required uint32 wood = 2;
      case 2: {
        if (tag == 16) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_food;
        break;
      }

      // required uint32 food = 3;
      case 3: {
        if (tag == 24) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iron;
        break;
      }

      // required uint32 iron = 4;
      case 4: {
        if (tag == 32) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // optional uint32 cash = 5;
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.UserResourceCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.UserResourceCPP)
  return false;
#undef DO_
}

void UserResourceCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.UserResourceCPP)
  // required uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 wood = 2;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wood(), output);
  }

  // required uint32 food = 3;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->food(), output);
  }

  // required uint32 iron = 4;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iron(), output);
  }

  // optional uint32 cash = 5;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.UserResourceCPP)
}

::google::protobuf::uint8* UserResourceCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.UserResourceCPP)
  // required uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }

  // required uint32 wood = 2;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wood(), target);
  }

  // required uint32 food = 3;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->food(), target);
  }

  // required uint32 iron = 4;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iron(), target);
  }

  // optional uint32 cash = 5;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.UserResourceCPP)
  return target;
}

int UserResourceCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 2;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint32 food = 3;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 iron = 4;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

    // optional uint32 cash = 5;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserResourceCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserResourceCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserResourceCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserResourceCPP::MergeFrom(const UserResourceCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserResourceCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResourceCPP::CopyFrom(const UserResourceCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResourceCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserResourceCPP::Swap(UserResourceCPP* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserResourceCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserResourceCPP_descriptor_;
  metadata.reflection = UserResourceCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostItemCPP::kValueFieldNumber;
const int CostItemCPP::kTotalValueFieldNumber;
#endif  // !_MSC_VER

CostItemCPP::CostItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.CostItemCPP)
}

void CostItemCPP::InitAsDefaultInstance() {
}

CostItemCPP::CostItemCPP(const CostItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.CostItemCPP)
}

void CostItemCPP::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  total_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostItemCPP::~CostItemCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.CostItemCPP)
  SharedDtor();
}

void CostItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostItemCPP_descriptor_;
}

const CostItemCPP& CostItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

CostItemCPP* CostItemCPP::default_instance_ = NULL;

CostItemCPP* CostItemCPP::New() const {
  return new CostItemCPP;
}

void CostItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(total_value_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.CostItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_value;
        break;
      }

      // required uint64 total_value = 2;
      case 2: {
        if (tag == 16) {
         parse_total_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_value_)));
          set_has_total_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.CostItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.CostItemCPP)
  return false;
#undef DO_
}

void CostItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.CostItemCPP)
  // required uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // required uint64 total_value = 2;
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.CostItemCPP)
}

::google::protobuf::uint8* CostItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.CostItemCPP)
  // required uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // required uint64 total_value = 2;
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.CostItemCPP)
  return target;
}

int CostItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint64 total_value = 2;
    if (has_total_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostItemCPP::MergeFrom(const CostItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostItemCPP::CopyFrom(const CostItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CostItemCPP::Swap(CostItemCPP* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(total_value_, other->total_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostItemCPP_descriptor_;
  metadata.reflection = CostItemCPP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataCommon

// @@protoc_insertion_point(global_scope)
