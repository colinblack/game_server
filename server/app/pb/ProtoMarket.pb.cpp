// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMarket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMarket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMarket {

namespace {

const ::google::protobuf::Descriptor* MarketCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRefreshReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRefreshReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRefreshResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRefreshResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseMarketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseMarketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseMarketResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseMarketResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoMarket_2eproto() {
  protobuf_AddDesc_ProtoMarket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoMarket.proto");
  GOOGLE_CHECK(file != NULL);
  MarketCPP_descriptor_ = file->message_type(0);
  static const int MarketCPP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, character1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, character2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, type3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, character3_),
  };
  MarketCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketCPP_descriptor_,
      MarketCPP::default_instance_,
      MarketCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketCPP));
  MarketRefreshReq_descriptor_ = file->message_type(1);
  static const int MarketRefreshReq_offsets_[1] = {
  };
  MarketRefreshReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRefreshReq_descriptor_,
      MarketRefreshReq::default_instance_,
      MarketRefreshReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRefreshReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRefreshReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRefreshReq));
  MarketRefreshResp_descriptor_ = file->message_type(2);
  static const int MarketRefreshResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRefreshResp, market_),
  };
  MarketRefreshResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRefreshResp_descriptor_,
      MarketRefreshResp::default_instance_,
      MarketRefreshResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRefreshResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRefreshResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRefreshResp));
  PurchaseMarketReq_descriptor_ = file->message_type(3);
  static const int PurchaseMarketReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketReq, index_),
  };
  PurchaseMarketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseMarketReq_descriptor_,
      PurchaseMarketReq::default_instance_,
      PurchaseMarketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseMarketReq));
  PurchaseMarketResp_descriptor_ = file->message_type(4);
  static const int PurchaseMarketResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, markettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, order_),
  };
  PurchaseMarketResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseMarketResp_descriptor_,
      PurchaseMarketResp::default_instance_,
      PurchaseMarketResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseMarketResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseMarketResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoMarket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketCPP_descriptor_, &MarketCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRefreshReq_descriptor_, &MarketRefreshReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRefreshResp_descriptor_, &MarketRefreshResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseMarketReq_descriptor_, &PurchaseMarketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseMarketResp_descriptor_, &PurchaseMarketResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoMarket_2eproto() {
  delete MarketCPP::default_instance_;
  delete MarketCPP_reflection_;
  delete MarketRefreshReq::default_instance_;
  delete MarketRefreshReq_reflection_;
  delete MarketRefreshResp::default_instance_;
  delete MarketRefreshResp_reflection_;
  delete PurchaseMarketReq::default_instance_;
  delete PurchaseMarketReq_reflection_;
  delete PurchaseMarketResp::default_instance_;
  delete PurchaseMarketResp_reflection_;
}

void protobuf_AddDesc_ProtoMarket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoMarket.proto\022\013ProtoMarket\"\211\001\n\tMar"
    "ketCPP\022\023\n\013refreshtime\030\001 \002(\r\022\r\n\005type1\030\002 \002"
    "(\r\022\022\n\ncharacter1\030\003 \002(\r\022\r\n\005type2\030\004 \002(\r\022\022\n"
    "\ncharacter2\030\005 \002(\r\022\r\n\005type3\030\006 \002(\r\022\022\n\nchar"
    "acter3\030\007 \002(\r\"\022\n\020MarketRefreshReq\";\n\021Mark"
    "etRefreshResp\022&\n\006market\030\001 \002(\0132\026.ProtoMar"
    "ket.MarketCPP\"\"\n\021PurchaseMarketReq\022\r\n\005in"
    "dex\030\001 \002(\r\"\227\001\n\022PurchaseMarketResp\022\014\n\004coin"
    "\030\001 \002(\r\022\022\n\nmarkettime\030\002 \002(\r\022&\n\006market\030\003 \002"
    "(\0132\026.ProtoMarket.MarketCPP\022\014\n\004wood\030\004 \001(\r"
    "\022\014\n\004food\030\005 \001(\r\022\014\n\004iron\030\006 \001(\r\022\r\n\005order\030\007 "
    "\001(\r", 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMarket.proto", &protobuf_RegisterTypes);
  MarketCPP::default_instance_ = new MarketCPP();
  MarketRefreshReq::default_instance_ = new MarketRefreshReq();
  MarketRefreshResp::default_instance_ = new MarketRefreshResp();
  PurchaseMarketReq::default_instance_ = new PurchaseMarketReq();
  PurchaseMarketResp::default_instance_ = new PurchaseMarketResp();
  MarketCPP::default_instance_->InitAsDefaultInstance();
  MarketRefreshReq::default_instance_->InitAsDefaultInstance();
  MarketRefreshResp::default_instance_->InitAsDefaultInstance();
  PurchaseMarketReq::default_instance_->InitAsDefaultInstance();
  PurchaseMarketResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoMarket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoMarket_2eproto {
  StaticDescriptorInitializer_ProtoMarket_2eproto() {
    protobuf_AddDesc_ProtoMarket_2eproto();
  }
} static_descriptor_initializer_ProtoMarket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MarketCPP::kRefreshtimeFieldNumber;
const int MarketCPP::kType1FieldNumber;
const int MarketCPP::kCharacter1FieldNumber;
const int MarketCPP::kType2FieldNumber;
const int MarketCPP::kCharacter2FieldNumber;
const int MarketCPP::kType3FieldNumber;
const int MarketCPP::kCharacter3FieldNumber;
#endif  // !_MSC_VER

MarketCPP::MarketCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMarket.MarketCPP)
}

void MarketCPP::InitAsDefaultInstance() {
}

MarketCPP::MarketCPP(const MarketCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMarket.MarketCPP)
}

void MarketCPP::SharedCtor() {
  _cached_size_ = 0;
  refreshtime_ = 0u;
  type1_ = 0u;
  character1_ = 0u;
  type2_ = 0u;
  character2_ = 0u;
  type3_ = 0u;
  character3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketCPP::~MarketCPP() {
  // @@protoc_insertion_point(destructor:ProtoMarket.MarketCPP)
  SharedDtor();
}

void MarketCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketCPP_descriptor_;
}

const MarketCPP& MarketCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMarket_2eproto();
  return *default_instance_;
}

MarketCPP* MarketCPP::default_instance_ = NULL;

MarketCPP* MarketCPP::New() const {
  return new MarketCPP;
}

void MarketCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(refreshtime_, character3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMarket.MarketCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 refreshtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type1;
        break;
      }

      // required uint32 type1 = 2;
      case 2: {
        if (tag == 16) {
         parse_type1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type1_)));
          set_has_type1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character1;
        break;
      }

      // required uint32 character1 = 3;
      case 3: {
        if (tag == 24) {
         parse_character1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character1_)));
          set_has_character1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type2;
        break;
      }

      // required uint32 type2 = 4;
      case 4: {
        if (tag == 32) {
         parse_type2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type2_)));
          set_has_type2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_character2;
        break;
      }

      // required uint32 character2 = 5;
      case 5: {
        if (tag == 40) {
         parse_character2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character2_)));
          set_has_character2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type3;
        break;
      }

      // required uint32 type3 = 6;
      case 6: {
        if (tag == 48) {
         parse_type3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type3_)));
          set_has_type3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_character3;
        break;
      }

      // required uint32 character3 = 7;
      case 7: {
        if (tag == 56) {
         parse_character3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character3_)));
          set_has_character3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMarket.MarketCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMarket.MarketCPP)
  return false;
#undef DO_
}

void MarketCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMarket.MarketCPP)
  // required uint32 refreshtime = 1;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refreshtime(), output);
  }

  // required uint32 type1 = 2;
  if (has_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type1(), output);
  }

  // required uint32 character1 = 3;
  if (has_character1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->character1(), output);
  }

  // required uint32 type2 = 4;
  if (has_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type2(), output);
  }

  // required uint32 character2 = 5;
  if (has_character2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->character2(), output);
  }

  // required uint32 type3 = 6;
  if (has_type3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type3(), output);
  }

  // required uint32 character3 = 7;
  if (has_character3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->character3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMarket.MarketCPP)
}

::google::protobuf::uint8* MarketCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMarket.MarketCPP)
  // required uint32 refreshtime = 1;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refreshtime(), target);
  }

  // required uint32 type1 = 2;
  if (has_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type1(), target);
  }

  // required uint32 character1 = 3;
  if (has_character1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->character1(), target);
  }

  // required uint32 type2 = 4;
  if (has_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type2(), target);
  }

  // required uint32 character2 = 5;
  if (has_character2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->character2(), target);
  }

  // required uint32 type3 = 6;
  if (has_type3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type3(), target);
  }

  // required uint32 character3 = 7;
  if (has_character3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->character3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMarket.MarketCPP)
  return target;
}

int MarketCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 refreshtime = 1;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtime());
    }

    // required uint32 type1 = 2;
    if (has_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type1());
    }

    // required uint32 character1 = 3;
    if (has_character1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character1());
    }

    // required uint32 type2 = 4;
    if (has_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type2());
    }

    // required uint32 character2 = 5;
    if (has_character2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character2());
    }

    // required uint32 type3 = 6;
    if (has_type3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type3());
    }

    // required uint32 character3 = 7;
    if (has_character3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketCPP::MergeFrom(const MarketCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_type1()) {
      set_type1(from.type1());
    }
    if (from.has_character1()) {
      set_character1(from.character1());
    }
    if (from.has_type2()) {
      set_type2(from.type2());
    }
    if (from.has_character2()) {
      set_character2(from.character2());
    }
    if (from.has_type3()) {
      set_type3(from.type3());
    }
    if (from.has_character3()) {
      set_character3(from.character3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketCPP::CopyFrom(const MarketCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MarketCPP::Swap(MarketCPP* other) {
  if (other != this) {
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(type1_, other->type1_);
    std::swap(character1_, other->character1_);
    std::swap(type2_, other->type2_);
    std::swap(character2_, other->character2_);
    std::swap(type3_, other->type3_);
    std::swap(character3_, other->character3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketCPP_descriptor_;
  metadata.reflection = MarketCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarketRefreshReq::MarketRefreshReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMarket.MarketRefreshReq)
}

void MarketRefreshReq::InitAsDefaultInstance() {
}

MarketRefreshReq::MarketRefreshReq(const MarketRefreshReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMarket.MarketRefreshReq)
}

void MarketRefreshReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRefreshReq::~MarketRefreshReq() {
  // @@protoc_insertion_point(destructor:ProtoMarket.MarketRefreshReq)
  SharedDtor();
}

void MarketRefreshReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketRefreshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRefreshReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRefreshReq_descriptor_;
}

const MarketRefreshReq& MarketRefreshReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMarket_2eproto();
  return *default_instance_;
}

MarketRefreshReq* MarketRefreshReq::default_instance_ = NULL;

MarketRefreshReq* MarketRefreshReq::New() const {
  return new MarketRefreshReq;
}

void MarketRefreshReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRefreshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMarket.MarketRefreshReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMarket.MarketRefreshReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMarket.MarketRefreshReq)
  return false;
#undef DO_
}

void MarketRefreshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMarket.MarketRefreshReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMarket.MarketRefreshReq)
}

::google::protobuf::uint8* MarketRefreshReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMarket.MarketRefreshReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMarket.MarketRefreshReq)
  return target;
}

int MarketRefreshReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRefreshReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRefreshReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRefreshReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRefreshReq::MergeFrom(const MarketRefreshReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRefreshReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRefreshReq::CopyFrom(const MarketRefreshReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRefreshReq::IsInitialized() const {

  return true;
}

void MarketRefreshReq::Swap(MarketRefreshReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRefreshReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRefreshReq_descriptor_;
  metadata.reflection = MarketRefreshReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketRefreshResp::kMarketFieldNumber;
#endif  // !_MSC_VER

MarketRefreshResp::MarketRefreshResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMarket.MarketRefreshResp)
}

void MarketRefreshResp::InitAsDefaultInstance() {
  market_ = const_cast< ::ProtoMarket::MarketCPP*>(&::ProtoMarket::MarketCPP::default_instance());
}

MarketRefreshResp::MarketRefreshResp(const MarketRefreshResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMarket.MarketRefreshResp)
}

void MarketRefreshResp::SharedCtor() {
  _cached_size_ = 0;
  market_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRefreshResp::~MarketRefreshResp() {
  // @@protoc_insertion_point(destructor:ProtoMarket.MarketRefreshResp)
  SharedDtor();
}

void MarketRefreshResp::SharedDtor() {
  if (this != default_instance_) {
    delete market_;
  }
}

void MarketRefreshResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRefreshResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRefreshResp_descriptor_;
}

const MarketRefreshResp& MarketRefreshResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMarket_2eproto();
  return *default_instance_;
}

MarketRefreshResp* MarketRefreshResp::default_instance_ = NULL;

MarketRefreshResp* MarketRefreshResp::New() const {
  return new MarketRefreshResp;
}

void MarketRefreshResp::Clear() {
  if (has_market()) {
    if (market_ != NULL) market_->::ProtoMarket::MarketCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRefreshResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMarket.MarketRefreshResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoMarket.MarketCPP market = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMarket.MarketRefreshResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMarket.MarketRefreshResp)
  return false;
#undef DO_
}

void MarketRefreshResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMarket.MarketRefreshResp)
  // required .ProtoMarket.MarketCPP market = 1;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->market(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMarket.MarketRefreshResp)
}

::google::protobuf::uint8* MarketRefreshResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMarket.MarketRefreshResp)
  // required .ProtoMarket.MarketCPP market = 1;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->market(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMarket.MarketRefreshResp)
  return target;
}

int MarketRefreshResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoMarket.MarketCPP market = 1;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRefreshResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRefreshResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRefreshResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRefreshResp::MergeFrom(const MarketRefreshResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market()) {
      mutable_market()->::ProtoMarket::MarketCPP::MergeFrom(from.market());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRefreshResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRefreshResp::CopyFrom(const MarketRefreshResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRefreshResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_market()) {
    if (!this->market().IsInitialized()) return false;
  }
  return true;
}

void MarketRefreshResp::Swap(MarketRefreshResp* other) {
  if (other != this) {
    std::swap(market_, other->market_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRefreshResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRefreshResp_descriptor_;
  metadata.reflection = MarketRefreshResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseMarketReq::kIndexFieldNumber;
#endif  // !_MSC_VER

PurchaseMarketReq::PurchaseMarketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMarket.PurchaseMarketReq)
}

void PurchaseMarketReq::InitAsDefaultInstance() {
}

PurchaseMarketReq::PurchaseMarketReq(const PurchaseMarketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMarket.PurchaseMarketReq)
}

void PurchaseMarketReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseMarketReq::~PurchaseMarketReq() {
  // @@protoc_insertion_point(destructor:ProtoMarket.PurchaseMarketReq)
  SharedDtor();
}

void PurchaseMarketReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PurchaseMarketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseMarketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseMarketReq_descriptor_;
}

const PurchaseMarketReq& PurchaseMarketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMarket_2eproto();
  return *default_instance_;
}

PurchaseMarketReq* PurchaseMarketReq::default_instance_ = NULL;

PurchaseMarketReq* PurchaseMarketReq::New() const {
  return new PurchaseMarketReq;
}

void PurchaseMarketReq::Clear() {
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseMarketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMarket.PurchaseMarketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMarket.PurchaseMarketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMarket.PurchaseMarketReq)
  return false;
#undef DO_
}

void PurchaseMarketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMarket.PurchaseMarketReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMarket.PurchaseMarketReq)
}

::google::protobuf::uint8* PurchaseMarketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMarket.PurchaseMarketReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMarket.PurchaseMarketReq)
  return target;
}

int PurchaseMarketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseMarketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseMarketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseMarketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseMarketReq::MergeFrom(const PurchaseMarketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseMarketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseMarketReq::CopyFrom(const PurchaseMarketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseMarketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PurchaseMarketReq::Swap(PurchaseMarketReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseMarketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseMarketReq_descriptor_;
  metadata.reflection = PurchaseMarketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseMarketResp::kCoinFieldNumber;
const int PurchaseMarketResp::kMarkettimeFieldNumber;
const int PurchaseMarketResp::kMarketFieldNumber;
const int PurchaseMarketResp::kWoodFieldNumber;
const int PurchaseMarketResp::kFoodFieldNumber;
const int PurchaseMarketResp::kIronFieldNumber;
const int PurchaseMarketResp::kOrderFieldNumber;
#endif  // !_MSC_VER

PurchaseMarketResp::PurchaseMarketResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMarket.PurchaseMarketResp)
}

void PurchaseMarketResp::InitAsDefaultInstance() {
  market_ = const_cast< ::ProtoMarket::MarketCPP*>(&::ProtoMarket::MarketCPP::default_instance());
}

PurchaseMarketResp::PurchaseMarketResp(const PurchaseMarketResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMarket.PurchaseMarketResp)
}

void PurchaseMarketResp::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  markettime_ = 0u;
  market_ = NULL;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseMarketResp::~PurchaseMarketResp() {
  // @@protoc_insertion_point(destructor:ProtoMarket.PurchaseMarketResp)
  SharedDtor();
}

void PurchaseMarketResp::SharedDtor() {
  if (this != default_instance_) {
    delete market_;
  }
}

void PurchaseMarketResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseMarketResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseMarketResp_descriptor_;
}

const PurchaseMarketResp& PurchaseMarketResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMarket_2eproto();
  return *default_instance_;
}

PurchaseMarketResp* PurchaseMarketResp::default_instance_ = NULL;

PurchaseMarketResp* PurchaseMarketResp::New() const {
  return new PurchaseMarketResp;
}

void PurchaseMarketResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PurchaseMarketResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(coin_, markettime_);
    ZR_(wood_, order_);
    if (has_market()) {
      if (market_ != NULL) market_->::ProtoMarket::MarketCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseMarketResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMarket.PurchaseMarketResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_markettime;
        break;
      }

      // required uint32 markettime = 2;
      case 2: {
        if (tag == 16) {
         parse_markettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &markettime_)));
          set_has_markettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_market;
        break;
      }

      // required .ProtoMarket.MarketCPP market = 3;
      case 3: {
        if (tag == 26) {
         parse_market:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wood;
        break;
      }

      // optional uint32 wood = 4;
      case 4: {
        if (tag == 32) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_food;
        break;
      }

      // optional uint32 food = 5;
      case 5: {
        if (tag == 40) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iron;
        break;
      }

      // optional uint32 iron = 6;
      case 6: {
        if (tag == 48) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_order;
        break;
      }

      // optional uint32 order = 7;
      case 7: {
        if (tag == 56) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMarket.PurchaseMarketResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMarket.PurchaseMarketResp)
  return false;
#undef DO_
}

void PurchaseMarketResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMarket.PurchaseMarketResp)
  // required uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 markettime = 2;
  if (has_markettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->markettime(), output);
  }

  // required .ProtoMarket.MarketCPP market = 3;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->market(), output);
  }

  // optional uint32 wood = 4;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wood(), output);
  }

  // optional uint32 food = 5;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->food(), output);
  }

  // optional uint32 iron = 6;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->iron(), output);
  }

  // optional uint32 order = 7;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMarket.PurchaseMarketResp)
}

::google::protobuf::uint8* PurchaseMarketResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMarket.PurchaseMarketResp)
  // required uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }

  // required uint32 markettime = 2;
  if (has_markettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->markettime(), target);
  }

  // required .ProtoMarket.MarketCPP market = 3;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->market(), target);
  }

  // optional uint32 wood = 4;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wood(), target);
  }

  // optional uint32 food = 5;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->food(), target);
  }

  // optional uint32 iron = 6;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->iron(), target);
  }

  // optional uint32 order = 7;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMarket.PurchaseMarketResp)
  return target;
}

int PurchaseMarketResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 markettime = 2;
    if (has_markettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->markettime());
    }

    // required .ProtoMarket.MarketCPP market = 3;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market());
    }

    // optional uint32 wood = 4;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // optional uint32 food = 5;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // optional uint32 iron = 6;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

    // optional uint32 order = 7;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseMarketResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseMarketResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseMarketResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseMarketResp::MergeFrom(const PurchaseMarketResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_markettime()) {
      set_markettime(from.markettime());
    }
    if (from.has_market()) {
      mutable_market()->::ProtoMarket::MarketCPP::MergeFrom(from.market());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseMarketResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseMarketResp::CopyFrom(const PurchaseMarketResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseMarketResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_market()) {
    if (!this->market().IsInitialized()) return false;
  }
  return true;
}

void PurchaseMarketResp::Swap(PurchaseMarketResp* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(markettime_, other->markettime_);
    std::swap(market_, other->market_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseMarketResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseMarketResp_descriptor_;
  metadata.reflection = PurchaseMarketResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMarket

// @@protoc_insertion_point(global_scope)
