// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAchievement.proto

#ifndef PROTOBUF_ProtoAchievement_2eproto__INCLUDED
#define PROTOBUF_ProtoAchievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
#include "ProtoHero.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoAchievement {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoAchievement_2eproto();
void protobuf_AssignDesc_ProtoAchievement_2eproto();
void protobuf_ShutdownFile_ProtoAchievement_2eproto();

class AchievementCPP;
class AchievementAllCPP;
class VerifyAchievementReq;
class PushAchievementReq;
class GetAchievementRewardReq;
class GetAchievementRewardResp;

// ===================================================================

class AchievementCPP : public ::google::protobuf::Message {
 public:
  AchievementCPP();
  virtual ~AchievementCPP();

  AchievementCPP(const AchievementCPP& from);

  inline AchievementCPP& operator=(const AchievementCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementCPP& default_instance();

  void Swap(AchievementCPP* other);

  // implements Message ----------------------------------------------

  AchievementCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementCPP& from);
  void MergeFrom(const AchievementCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // repeated uint32 current = 3;
  inline int current_size() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 3;
  inline ::google::protobuf::uint32 current(int index) const;
  inline void set_current(int index, ::google::protobuf::uint32 value);
  inline void add_current(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      current() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_current();

  // @@protoc_insertion_point(class_scope:ProtoAchievement.AchievementCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > current_;
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static AchievementCPP* default_instance_;
};
// -------------------------------------------------------------------

class AchievementAllCPP : public ::google::protobuf::Message {
 public:
  AchievementAllCPP();
  virtual ~AchievementAllCPP();

  AchievementAllCPP(const AchievementAllCPP& from);

  inline AchievementAllCPP& operator=(const AchievementAllCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementAllCPP& default_instance();

  void Swap(AchievementAllCPP* other);

  // implements Message ----------------------------------------------

  AchievementAllCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementAllCPP& from);
  void MergeFrom(const AchievementAllCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoAchievement.AchievementCPP achievement = 1;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  inline const ::ProtoAchievement::AchievementCPP& achievement(int index) const;
  inline ::ProtoAchievement::AchievementCPP* mutable_achievement(int index);
  inline ::ProtoAchievement::AchievementCPP* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoAchievement::AchievementCPP >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoAchievement::AchievementCPP >*
      mutable_achievement();

  // @@protoc_insertion_point(class_scope:ProtoAchievement.AchievementAllCPP)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoAchievement::AchievementCPP > achievement_;
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static AchievementAllCPP* default_instance_;
};
// -------------------------------------------------------------------

class VerifyAchievementReq : public ::google::protobuf::Message {
 public:
  VerifyAchievementReq();
  virtual ~VerifyAchievementReq();

  VerifyAchievementReq(const VerifyAchievementReq& from);

  inline VerifyAchievementReq& operator=(const VerifyAchievementReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyAchievementReq& default_instance();

  void Swap(VerifyAchievementReq* other);

  // implements Message ----------------------------------------------

  VerifyAchievementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyAchievementReq& from);
  void MergeFrom(const VerifyAchievementReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoAchievement.VerifyAchievementReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static VerifyAchievementReq* default_instance_;
};
// -------------------------------------------------------------------

class PushAchievementReq : public ::google::protobuf::Message {
 public:
  PushAchievementReq();
  virtual ~PushAchievementReq();

  PushAchievementReq(const PushAchievementReq& from);

  inline PushAchievementReq& operator=(const PushAchievementReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushAchievementReq& default_instance();

  void Swap(PushAchievementReq* other);

  // implements Message ----------------------------------------------

  PushAchievementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushAchievementReq& from);
  void MergeFrom(const PushAchievementReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoAchievement.AchievementAllCPP achievements = 1;
  inline bool has_achievements() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 1;
  inline const ::ProtoAchievement::AchievementAllCPP& achievements() const;
  inline ::ProtoAchievement::AchievementAllCPP* mutable_achievements();
  inline ::ProtoAchievement::AchievementAllCPP* release_achievements();
  inline void set_allocated_achievements(::ProtoAchievement::AchievementAllCPP* achievements);

  // @@protoc_insertion_point(class_scope:ProtoAchievement.PushAchievementReq)
 private:
  inline void set_has_achievements();
  inline void clear_has_achievements();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoAchievement::AchievementAllCPP* achievements_;
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static PushAchievementReq* default_instance_;
};
// -------------------------------------------------------------------

class GetAchievementRewardReq : public ::google::protobuf::Message {
 public:
  GetAchievementRewardReq();
  virtual ~GetAchievementRewardReq();

  GetAchievementRewardReq(const GetAchievementRewardReq& from);

  inline GetAchievementRewardReq& operator=(const GetAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAchievementRewardReq& default_instance();

  void Swap(GetAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  GetAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAchievementRewardReq& from);
  void MergeFrom(const GetAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoAchievement.GetAchievementRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static GetAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class GetAchievementRewardResp : public ::google::protobuf::Message {
 public:
  GetAchievementRewardResp();
  virtual ~GetAchievementRewardResp();

  GetAchievementRewardResp(const GetAchievementRewardResp& from);

  inline GetAchievementRewardResp& operator=(const GetAchievementRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAchievementRewardResp& default_instance();

  void Swap(GetAchievementRewardResp* other);

  // implements Message ----------------------------------------------

  GetAchievementRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAchievementRewardResp& from);
  void MergeFrom(const GetAchievementRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataCommon.EquipmentAllCPP equips = 1;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::DataCommon::EquipmentAllCPP& equips() const;
  inline ::DataCommon::EquipmentAllCPP* mutable_equips();
  inline ::DataCommon::EquipmentAllCPP* release_equips();
  inline void set_allocated_equips(::DataCommon::EquipmentAllCPP* equips);

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::DataCommon::CommonBaseRewardCPP& base() const;
  inline ::DataCommon::CommonBaseRewardCPP* mutable_base();
  inline ::DataCommon::CommonBaseRewardCPP* release_base();
  inline void set_allocated_base(::DataCommon::CommonBaseRewardCPP* base);

  // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline const ::ProtoHero::HeroBaseInfoCPP& hero() const;
  inline ::ProtoHero::HeroBaseInfoCPP* mutable_hero();
  inline ::ProtoHero::HeroBaseInfoCPP* release_hero();
  inline void set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero);

  // required .ProtoAchievement.AchievementCPP achievement = 4;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 4;
  inline const ::ProtoAchievement::AchievementCPP& achievement() const;
  inline ::ProtoAchievement::AchievementCPP* mutable_achievement();
  inline ::ProtoAchievement::AchievementCPP* release_achievement();
  inline void set_allocated_achievement(::ProtoAchievement::AchievementCPP* achievement);

  // @@protoc_insertion_point(class_scope:ProtoAchievement.GetAchievementRewardResp)
 private:
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_achievement();
  inline void clear_has_achievement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::EquipmentAllCPP* equips_;
  ::DataCommon::CommonBaseRewardCPP* base_;
  ::ProtoHero::HeroBaseInfoCPP* hero_;
  ::ProtoAchievement::AchievementCPP* achievement_;
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static GetAchievementRewardResp* default_instance_;
};
// ===================================================================


// ===================================================================

// AchievementCPP

// required uint32 id = 1;
inline bool AchievementCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchievementCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchievementCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchievementCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AchievementCPP::id() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.AchievementCPP.id)
  return id_;
}
inline void AchievementCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoAchievement.AchievementCPP.id)
}

// required uint32 status = 2;
inline bool AchievementCPP::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchievementCPP::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchievementCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchievementCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AchievementCPP::status() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.AchievementCPP.status)
  return status_;
}
inline void AchievementCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoAchievement.AchievementCPP.status)
}

// repeated uint32 current = 3;
inline int AchievementCPP::current_size() const {
  return current_.size();
}
inline void AchievementCPP::clear_current() {
  current_.Clear();
}
inline ::google::protobuf::uint32 AchievementCPP::current(int index) const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.AchievementCPP.current)
  return current_.Get(index);
}
inline void AchievementCPP::set_current(int index, ::google::protobuf::uint32 value) {
  current_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoAchievement.AchievementCPP.current)
}
inline void AchievementCPP::add_current(::google::protobuf::uint32 value) {
  current_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoAchievement.AchievementCPP.current)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AchievementCPP::current() const {
  // @@protoc_insertion_point(field_list:ProtoAchievement.AchievementCPP.current)
  return current_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AchievementCPP::mutable_current() {
  // @@protoc_insertion_point(field_mutable_list:ProtoAchievement.AchievementCPP.current)
  return &current_;
}

// -------------------------------------------------------------------

// AchievementAllCPP

// repeated .ProtoAchievement.AchievementCPP achievement = 1;
inline int AchievementAllCPP::achievement_size() const {
  return achievement_.size();
}
inline void AchievementAllCPP::clear_achievement() {
  achievement_.Clear();
}
inline const ::ProtoAchievement::AchievementCPP& AchievementAllCPP::achievement(int index) const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.AchievementAllCPP.achievement)
  return achievement_.Get(index);
}
inline ::ProtoAchievement::AchievementCPP* AchievementAllCPP::mutable_achievement(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoAchievement.AchievementAllCPP.achievement)
  return achievement_.Mutable(index);
}
inline ::ProtoAchievement::AchievementCPP* AchievementAllCPP::add_achievement() {
  // @@protoc_insertion_point(field_add:ProtoAchievement.AchievementAllCPP.achievement)
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoAchievement::AchievementCPP >&
AchievementAllCPP::achievement() const {
  // @@protoc_insertion_point(field_list:ProtoAchievement.AchievementAllCPP.achievement)
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoAchievement::AchievementCPP >*
AchievementAllCPP::mutable_achievement() {
  // @@protoc_insertion_point(field_mutable_list:ProtoAchievement.AchievementAllCPP.achievement)
  return &achievement_;
}

// -------------------------------------------------------------------

// VerifyAchievementReq

// required uint32 type = 1;
inline bool VerifyAchievementReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyAchievementReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyAchievementReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyAchievementReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 VerifyAchievementReq::type() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.VerifyAchievementReq.type)
  return type_;
}
inline void VerifyAchievementReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ProtoAchievement.VerifyAchievementReq.type)
}

// -------------------------------------------------------------------

// PushAchievementReq

// required .ProtoAchievement.AchievementAllCPP achievements = 1;
inline bool PushAchievementReq::has_achievements() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushAchievementReq::set_has_achievements() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushAchievementReq::clear_has_achievements() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushAchievementReq::clear_achievements() {
  if (achievements_ != NULL) achievements_->::ProtoAchievement::AchievementAllCPP::Clear();
  clear_has_achievements();
}
inline const ::ProtoAchievement::AchievementAllCPP& PushAchievementReq::achievements() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.PushAchievementReq.achievements)
  return achievements_ != NULL ? *achievements_ : *default_instance_->achievements_;
}
inline ::ProtoAchievement::AchievementAllCPP* PushAchievementReq::mutable_achievements() {
  set_has_achievements();
  if (achievements_ == NULL) achievements_ = new ::ProtoAchievement::AchievementAllCPP;
  // @@protoc_insertion_point(field_mutable:ProtoAchievement.PushAchievementReq.achievements)
  return achievements_;
}
inline ::ProtoAchievement::AchievementAllCPP* PushAchievementReq::release_achievements() {
  clear_has_achievements();
  ::ProtoAchievement::AchievementAllCPP* temp = achievements_;
  achievements_ = NULL;
  return temp;
}
inline void PushAchievementReq::set_allocated_achievements(::ProtoAchievement::AchievementAllCPP* achievements) {
  delete achievements_;
  achievements_ = achievements;
  if (achievements) {
    set_has_achievements();
  } else {
    clear_has_achievements();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAchievement.PushAchievementReq.achievements)
}

// -------------------------------------------------------------------

// GetAchievementRewardReq

// required uint32 id = 1;
inline bool GetAchievementRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAchievementRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAchievementRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAchievementRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetAchievementRewardReq::id() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.GetAchievementRewardReq.id)
  return id_;
}
inline void GetAchievementRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoAchievement.GetAchievementRewardReq.id)
}

// -------------------------------------------------------------------

// GetAchievementRewardResp

// optional .DataCommon.EquipmentAllCPP equips = 1;
inline bool GetAchievementRewardResp::has_equips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAchievementRewardResp::set_has_equips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAchievementRewardResp::clear_has_equips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAchievementRewardResp::clear_equips() {
  if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
  clear_has_equips();
}
inline const ::DataCommon::EquipmentAllCPP& GetAchievementRewardResp::equips() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.GetAchievementRewardResp.equips)
  return equips_ != NULL ? *equips_ : *default_instance_->equips_;
}
inline ::DataCommon::EquipmentAllCPP* GetAchievementRewardResp::mutable_equips() {
  set_has_equips();
  if (equips_ == NULL) equips_ = new ::DataCommon::EquipmentAllCPP;
  // @@protoc_insertion_point(field_mutable:ProtoAchievement.GetAchievementRewardResp.equips)
  return equips_;
}
inline ::DataCommon::EquipmentAllCPP* GetAchievementRewardResp::release_equips() {
  clear_has_equips();
  ::DataCommon::EquipmentAllCPP* temp = equips_;
  equips_ = NULL;
  return temp;
}
inline void GetAchievementRewardResp::set_allocated_equips(::DataCommon::EquipmentAllCPP* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAchievement.GetAchievementRewardResp.equips)
}

// optional .DataCommon.CommonBaseRewardCPP base = 2;
inline bool GetAchievementRewardResp::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAchievementRewardResp::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAchievementRewardResp::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAchievementRewardResp::clear_base() {
  if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
  clear_has_base();
}
inline const ::DataCommon::CommonBaseRewardCPP& GetAchievementRewardResp::base() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.GetAchievementRewardResp.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::DataCommon::CommonBaseRewardCPP* GetAchievementRewardResp::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::DataCommon::CommonBaseRewardCPP;
  // @@protoc_insertion_point(field_mutable:ProtoAchievement.GetAchievementRewardResp.base)
  return base_;
}
inline ::DataCommon::CommonBaseRewardCPP* GetAchievementRewardResp::release_base() {
  clear_has_base();
  ::DataCommon::CommonBaseRewardCPP* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetAchievementRewardResp::set_allocated_base(::DataCommon::CommonBaseRewardCPP* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAchievement.GetAchievementRewardResp.base)
}

// optional .ProtoHero.HeroBaseInfoCPP hero = 3;
inline bool GetAchievementRewardResp::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAchievementRewardResp::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAchievementRewardResp::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAchievementRewardResp::clear_hero() {
  if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
  clear_has_hero();
}
inline const ::ProtoHero::HeroBaseInfoCPP& GetAchievementRewardResp::hero() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.GetAchievementRewardResp.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* GetAchievementRewardResp::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::ProtoHero::HeroBaseInfoCPP;
  // @@protoc_insertion_point(field_mutable:ProtoAchievement.GetAchievementRewardResp.hero)
  return hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* GetAchievementRewardResp::release_hero() {
  clear_has_hero();
  ::ProtoHero::HeroBaseInfoCPP* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void GetAchievementRewardResp::set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAchievement.GetAchievementRewardResp.hero)
}

// required .ProtoAchievement.AchievementCPP achievement = 4;
inline bool GetAchievementRewardResp::has_achievement() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAchievementRewardResp::set_has_achievement() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAchievementRewardResp::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAchievementRewardResp::clear_achievement() {
  if (achievement_ != NULL) achievement_->::ProtoAchievement::AchievementCPP::Clear();
  clear_has_achievement();
}
inline const ::ProtoAchievement::AchievementCPP& GetAchievementRewardResp::achievement() const {
  // @@protoc_insertion_point(field_get:ProtoAchievement.GetAchievementRewardResp.achievement)
  return achievement_ != NULL ? *achievement_ : *default_instance_->achievement_;
}
inline ::ProtoAchievement::AchievementCPP* GetAchievementRewardResp::mutable_achievement() {
  set_has_achievement();
  if (achievement_ == NULL) achievement_ = new ::ProtoAchievement::AchievementCPP;
  // @@protoc_insertion_point(field_mutable:ProtoAchievement.GetAchievementRewardResp.achievement)
  return achievement_;
}
inline ::ProtoAchievement::AchievementCPP* GetAchievementRewardResp::release_achievement() {
  clear_has_achievement();
  ::ProtoAchievement::AchievementCPP* temp = achievement_;
  achievement_ = NULL;
  return temp;
}
inline void GetAchievementRewardResp::set_allocated_achievement(::ProtoAchievement::AchievementCPP* achievement) {
  delete achievement_;
  achievement_ = achievement;
  if (achievement) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAchievement.GetAchievementRewardResp.achievement)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAchievement

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoAchievement_2eproto__INCLUDED
