// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoOfficial.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoOfficial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoOfficial {

namespace {

const ::google::protobuf::Descriptor* DepartmentRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartmentRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonnelRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonnelRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivilegeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivilegeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepartmentMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartmentMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepartmentLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartmentLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfficialInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfficialInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfficialInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfficialInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushJobChangeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushJobChangeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppointDeputyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppointDeputyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppointDeputyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppointDeputyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyExitResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyExitResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgreeJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgreeJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgreeJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgreeJoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefuseJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefuseJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefuseJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefuseJoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetNoticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetNoticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSalaryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSalaryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSalaryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSalaryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDepartmentRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDepartmentRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDepartmentRecordResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDepartmentRecordResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushPublishToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushPublishToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondTokenResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondTokenResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPersonnelRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPersonnelRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPersonnelRecordResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPersonnelRecordResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrivilegeRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrivilegeRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrivilegeRecordResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrivilegeRecordResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutMemberResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutMemberResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eDepartment_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoOfficial_2eproto() {
  protobuf_AddDesc_ProtoOfficial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoOfficial.proto");
  GOOGLE_CHECK(file != NULL);
  DepartmentRecord_descriptor_ = file->message_type(0);
  static const int DepartmentRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, operate_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, target_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, op_),
  };
  DepartmentRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepartmentRecord_descriptor_,
      DepartmentRecord::default_instance_,
      DepartmentRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepartmentRecord));
  PersonnelRecord_descriptor_ = file->message_type(1);
  static const int PersonnelRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, ts_),
  };
  PersonnelRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonnelRecord_descriptor_,
      PersonnelRecord::default_instance_,
      PersonnelRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonnelRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonnelRecord));
  PrivilegeRecord_descriptor_ = file->message_type(2);
  static const int PrivilegeRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, params_),
  };
  PrivilegeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivilegeRecord_descriptor_,
      PrivilegeRecord::default_instance_,
      PrivilegeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivilegeRecord));
  DepartmentMember_descriptor_ = file->message_type(3);
  static const int DepartmentMember_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, head_),
  };
  DepartmentMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepartmentMember_descriptor_,
      DepartmentMember::default_instance_,
      DepartmentMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepartmentMember));
  DepartmentLeader_descriptor_ = file->message_type(4);
  static const int DepartmentLeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentLeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentLeader, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentLeader, prestige_),
  };
  DepartmentLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepartmentLeader_descriptor_,
      DepartmentLeader::default_instance_,
      DepartmentLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepartmentLeader));
  PublishToken_descriptor_ = file->message_type(5);
  static const int PublishToken_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, kingdom_),
  };
  PublishToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishToken_descriptor_,
      PublishToken::default_instance_,
      PublishToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishToken));
  OfficialInfoReq_descriptor_ = file->message_type(6);
  static const int OfficialInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoReq, department_),
  };
  OfficialInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfficialInfoReq_descriptor_,
      OfficialInfoReq::default_instance_,
      OfficialInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfficialInfoReq));
  OfficialInfoResp_descriptor_ = file->message_type(7);
  static const int OfficialInfoResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, leaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, country_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, depart_notice_),
  };
  OfficialInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfficialInfoResp_descriptor_,
      OfficialInfoResp::default_instance_,
      OfficialInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficialInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfficialInfoResp));
  PushJobChangeMsg_descriptor_ = file->message_type(8);
  static const int PushJobChangeMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushJobChangeMsg, origin_depart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushJobChangeMsg, origin_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushJobChangeMsg, target_depart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushJobChangeMsg, target_job_),
  };
  PushJobChangeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushJobChangeMsg_descriptor_,
      PushJobChangeMsg::default_instance_,
      PushJobChangeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushJobChangeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushJobChangeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushJobChangeMsg));
  ChallengeReq_descriptor_ = file->message_type(9);
  static const int ChallengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeReq, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeReq, official_),
  };
  ChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeReq_descriptor_,
      ChallengeReq::default_instance_,
      ChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeReq));
  ChallengeResp_descriptor_ = file->message_type(10);
  static const int ChallengeResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, hero_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, hero_troops_),
  };
  ChallengeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeResp_descriptor_,
      ChallengeResp::default_instance_,
      ChallengeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeResp));
  StartChallengeReq_descriptor_ = file->message_type(11);
  static const int StartChallengeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallengeReq, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallengeReq, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallengeReq, hero_ids_),
  };
  StartChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartChallengeReq_descriptor_,
      StartChallengeReq::default_instance_,
      StartChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartChallengeReq));
  AppointDeputyReq_descriptor_ = file->message_type(12);
  static const int AppointDeputyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyReq, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyReq, uid_),
  };
  AppointDeputyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppointDeputyReq_descriptor_,
      AppointDeputyReq::default_instance_,
      AppointDeputyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppointDeputyReq));
  AppointDeputyResp_descriptor_ = file->message_type(13);
  static const int AppointDeputyResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, records_),
  };
  AppointDeputyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppointDeputyResp_descriptor_,
      AppointDeputyResp::default_instance_,
      AppointDeputyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppointDeputyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppointDeputyResp));
  ApplyJoinReq_descriptor_ = file->message_type(14);
  static const int ApplyJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, department_),
  };
  ApplyJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinReq_descriptor_,
      ApplyJoinReq::default_instance_,
      ApplyJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinReq));
  ApplyJoinResp_descriptor_ = file->message_type(15);
  static const int ApplyJoinResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, records_),
  };
  ApplyJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinResp_descriptor_,
      ApplyJoinResp::default_instance_,
      ApplyJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinResp));
  ApplyExitReq_descriptor_ = file->message_type(16);
  static const int ApplyExitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitReq, department_),
  };
  ApplyExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyExitReq_descriptor_,
      ApplyExitReq::default_instance_,
      ApplyExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyExitReq));
  ApplyExitResp_descriptor_ = file->message_type(17);
  static const int ApplyExitResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitResp, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitResp, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitResp, members_),
  };
  ApplyExitResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyExitResp_descriptor_,
      ApplyExitResp::default_instance_,
      ApplyExitResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyExitResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyExitResp));
  AgreeJoinReq_descriptor_ = file->message_type(18);
  static const int AgreeJoinReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinReq, department_),
  };
  AgreeJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgreeJoinReq_descriptor_,
      AgreeJoinReq::default_instance_,
      AgreeJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgreeJoinReq));
  AgreeJoinResp_descriptor_ = file->message_type(19);
  static const int AgreeJoinResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinResp, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinResp, records_),
  };
  AgreeJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgreeJoinResp_descriptor_,
      AgreeJoinResp::default_instance_,
      AgreeJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgreeJoinResp));
  RefuseJoinReq_descriptor_ = file->message_type(20);
  static const int RefuseJoinReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinReq, department_),
  };
  RefuseJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefuseJoinReq_descriptor_,
      RefuseJoinReq::default_instance_,
      RefuseJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefuseJoinReq));
  RefuseJoinResp_descriptor_ = file->message_type(21);
  static const int RefuseJoinResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinResp, records_),
  };
  RefuseJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefuseJoinResp_descriptor_,
      RefuseJoinResp::default_instance_,
      RefuseJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefuseJoinResp));
  SetNoticeReq_descriptor_ = file->message_type(22);
  static const int SetNoticeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNoticeReq, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNoticeReq, text_),
  };
  SetNoticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetNoticeReq_descriptor_,
      SetNoticeReq::default_instance_,
      SetNoticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNoticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNoticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetNoticeReq));
  GetSalaryReq_descriptor_ = file->message_type(23);
  static const int GetSalaryReq_offsets_[1] = {
  };
  GetSalaryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSalaryReq_descriptor_,
      GetSalaryReq::default_instance_,
      GetSalaryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSalaryReq));
  GetSalaryResp_descriptor_ = file->message_type(24);
  static const int GetSalaryResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryResp, salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryResp, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryResp, job_reward_ts_),
  };
  GetSalaryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSalaryResp_descriptor_,
      GetSalaryResp::default_instance_,
      GetSalaryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSalaryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSalaryResp));
  GetDepartmentRecordReq_descriptor_ = file->message_type(25);
  static const int GetDepartmentRecordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepartmentRecordReq, department_),
  };
  GetDepartmentRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDepartmentRecordReq_descriptor_,
      GetDepartmentRecordReq::default_instance_,
      GetDepartmentRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepartmentRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepartmentRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDepartmentRecordReq));
  GetDepartmentRecordResp_descriptor_ = file->message_type(26);
  static const int GetDepartmentRecordResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepartmentRecordResp, records_),
  };
  GetDepartmentRecordResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDepartmentRecordResp_descriptor_,
      GetDepartmentRecordResp::default_instance_,
      GetDepartmentRecordResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepartmentRecordResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDepartmentRecordResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDepartmentRecordResp));
  PublishTokenReq_descriptor_ = file->message_type(27);
  static const int PublishTokenReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishTokenReq, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishTokenReq, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishTokenReq, department_),
  };
  PublishTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishTokenReq_descriptor_,
      PublishTokenReq::default_instance_,
      PublishTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishTokenReq));
  PushPublishToken_descriptor_ = file->message_type(28);
  static const int PushPublishToken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPublishToken, token_),
  };
  PushPublishToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushPublishToken_descriptor_,
      PushPublishToken::default_instance_,
      PushPublishToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPublishToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPublishToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushPublishToken));
  RespondTokenReq_descriptor_ = file->message_type(29);
  static const int RespondTokenReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenReq, hero_ids_),
  };
  RespondTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondTokenReq_descriptor_,
      RespondTokenReq::default_instance_,
      RespondTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondTokenReq));
  RespondTokenResp_descriptor_ = file->message_type(30);
  static const int RespondTokenResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenResp, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenResp, token_ts_),
  };
  RespondTokenResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondTokenResp_descriptor_,
      RespondTokenResp::default_instance_,
      RespondTokenResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondTokenResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondTokenResp));
  GetPersonnelRecordReq_descriptor_ = file->message_type(31);
  static const int GetPersonnelRecordReq_offsets_[1] = {
  };
  GetPersonnelRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPersonnelRecordReq_descriptor_,
      GetPersonnelRecordReq::default_instance_,
      GetPersonnelRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonnelRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonnelRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPersonnelRecordReq));
  GetPersonnelRecordResp_descriptor_ = file->message_type(32);
  static const int GetPersonnelRecordResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonnelRecordResp, records_),
  };
  GetPersonnelRecordResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPersonnelRecordResp_descriptor_,
      GetPersonnelRecordResp::default_instance_,
      GetPersonnelRecordResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonnelRecordResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonnelRecordResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPersonnelRecordResp));
  GetPrivilegeRecordReq_descriptor_ = file->message_type(33);
  static const int GetPrivilegeRecordReq_offsets_[1] = {
  };
  GetPrivilegeRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrivilegeRecordReq_descriptor_,
      GetPrivilegeRecordReq::default_instance_,
      GetPrivilegeRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrivilegeRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrivilegeRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrivilegeRecordReq));
  GetPrivilegeRecordResp_descriptor_ = file->message_type(34);
  static const int GetPrivilegeRecordResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrivilegeRecordResp, records_),
  };
  GetPrivilegeRecordResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrivilegeRecordResp_descriptor_,
      GetPrivilegeRecordResp::default_instance_,
      GetPrivilegeRecordResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrivilegeRecordResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrivilegeRecordResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrivilegeRecordResp));
  KickOutMemberReq_descriptor_ = file->message_type(35);
  static const int KickOutMemberReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberReq, department_),
  };
  KickOutMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutMemberReq_descriptor_,
      KickOutMemberReq::default_instance_,
      KickOutMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutMemberReq));
  KickOutMemberResp_descriptor_ = file->message_type(36);
  static const int KickOutMemberResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberResp, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberResp, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberResp, records_),
  };
  KickOutMemberResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutMemberResp_descriptor_,
      KickOutMemberResp::default_instance_,
      KickOutMemberResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutMemberResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutMemberResp));
  eDepartment_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoOfficial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepartmentRecord_descriptor_, &DepartmentRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonnelRecord_descriptor_, &PersonnelRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivilegeRecord_descriptor_, &PrivilegeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepartmentMember_descriptor_, &DepartmentMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepartmentLeader_descriptor_, &DepartmentLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishToken_descriptor_, &PublishToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfficialInfoReq_descriptor_, &OfficialInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfficialInfoResp_descriptor_, &OfficialInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushJobChangeMsg_descriptor_, &PushJobChangeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeReq_descriptor_, &ChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeResp_descriptor_, &ChallengeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartChallengeReq_descriptor_, &StartChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppointDeputyReq_descriptor_, &AppointDeputyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppointDeputyResp_descriptor_, &AppointDeputyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinReq_descriptor_, &ApplyJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinResp_descriptor_, &ApplyJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyExitReq_descriptor_, &ApplyExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyExitResp_descriptor_, &ApplyExitResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgreeJoinReq_descriptor_, &AgreeJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgreeJoinResp_descriptor_, &AgreeJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefuseJoinReq_descriptor_, &RefuseJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefuseJoinResp_descriptor_, &RefuseJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetNoticeReq_descriptor_, &SetNoticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSalaryReq_descriptor_, &GetSalaryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSalaryResp_descriptor_, &GetSalaryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDepartmentRecordReq_descriptor_, &GetDepartmentRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDepartmentRecordResp_descriptor_, &GetDepartmentRecordResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishTokenReq_descriptor_, &PublishTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushPublishToken_descriptor_, &PushPublishToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondTokenReq_descriptor_, &RespondTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondTokenResp_descriptor_, &RespondTokenResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPersonnelRecordReq_descriptor_, &GetPersonnelRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPersonnelRecordResp_descriptor_, &GetPersonnelRecordResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrivilegeRecordReq_descriptor_, &GetPrivilegeRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrivilegeRecordResp_descriptor_, &GetPrivilegeRecordResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutMemberReq_descriptor_, &KickOutMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutMemberResp_descriptor_, &KickOutMemberResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoOfficial_2eproto() {
  delete DepartmentRecord::default_instance_;
  delete DepartmentRecord_reflection_;
  delete PersonnelRecord::default_instance_;
  delete PersonnelRecord_reflection_;
  delete PrivilegeRecord::default_instance_;
  delete PrivilegeRecord_reflection_;
  delete DepartmentMember::default_instance_;
  delete DepartmentMember_reflection_;
  delete DepartmentLeader::default_instance_;
  delete DepartmentLeader_reflection_;
  delete PublishToken::default_instance_;
  delete PublishToken_reflection_;
  delete OfficialInfoReq::default_instance_;
  delete OfficialInfoReq_reflection_;
  delete OfficialInfoResp::default_instance_;
  delete OfficialInfoResp_reflection_;
  delete PushJobChangeMsg::default_instance_;
  delete PushJobChangeMsg_reflection_;
  delete ChallengeReq::default_instance_;
  delete ChallengeReq_reflection_;
  delete ChallengeResp::default_instance_;
  delete ChallengeResp_reflection_;
  delete StartChallengeReq::default_instance_;
  delete StartChallengeReq_reflection_;
  delete AppointDeputyReq::default_instance_;
  delete AppointDeputyReq_reflection_;
  delete AppointDeputyResp::default_instance_;
  delete AppointDeputyResp_reflection_;
  delete ApplyJoinReq::default_instance_;
  delete ApplyJoinReq_reflection_;
  delete ApplyJoinResp::default_instance_;
  delete ApplyJoinResp_reflection_;
  delete ApplyExitReq::default_instance_;
  delete ApplyExitReq_reflection_;
  delete ApplyExitResp::default_instance_;
  delete ApplyExitResp_reflection_;
  delete AgreeJoinReq::default_instance_;
  delete AgreeJoinReq_reflection_;
  delete AgreeJoinResp::default_instance_;
  delete AgreeJoinResp_reflection_;
  delete RefuseJoinReq::default_instance_;
  delete RefuseJoinReq_reflection_;
  delete RefuseJoinResp::default_instance_;
  delete RefuseJoinResp_reflection_;
  delete SetNoticeReq::default_instance_;
  delete SetNoticeReq_reflection_;
  delete GetSalaryReq::default_instance_;
  delete GetSalaryReq_reflection_;
  delete GetSalaryResp::default_instance_;
  delete GetSalaryResp_reflection_;
  delete GetDepartmentRecordReq::default_instance_;
  delete GetDepartmentRecordReq_reflection_;
  delete GetDepartmentRecordResp::default_instance_;
  delete GetDepartmentRecordResp_reflection_;
  delete PublishTokenReq::default_instance_;
  delete PublishTokenReq_reflection_;
  delete PushPublishToken::default_instance_;
  delete PushPublishToken_reflection_;
  delete RespondTokenReq::default_instance_;
  delete RespondTokenReq_reflection_;
  delete RespondTokenResp::default_instance_;
  delete RespondTokenResp_reflection_;
  delete GetPersonnelRecordReq::default_instance_;
  delete GetPersonnelRecordReq_reflection_;
  delete GetPersonnelRecordResp::default_instance_;
  delete GetPersonnelRecordResp_reflection_;
  delete GetPrivilegeRecordReq::default_instance_;
  delete GetPrivilegeRecordReq_reflection_;
  delete GetPrivilegeRecordResp::default_instance_;
  delete GetPrivilegeRecordResp_reflection_;
  delete KickOutMemberReq::default_instance_;
  delete KickOutMemberReq_reflection_;
  delete KickOutMemberResp::default_instance_;
  delete KickOutMemberResp_reflection_;
}

void protobuf_AddDesc_ProtoOfficial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoOfficial.proto\022\rProtoOfficial\"\204\001\n"
    "\020DepartmentRecord\022\016\n\006params\030\001 \002(\r\022\017\n\007ope"
    "rate\030\002 \002(\014\022\016\n\006target\030\003 \002(\014\022\023\n\013operate_jo"
    "b\030\004 \002(\r\022\022\n\ntarget_job\030\005 \002(\r\022\n\n\002ts\030\006 \002(\r\022"
    "\n\n\002op\030\007 \002(\r\"\200\001\n\017PersonnelRecord\022\017\n\007opera"
    "te\030\001 \002(\014\022\016\n\006target\030\002 \002(\014\022.\n\ndepartment\030\003"
    " \002(\0162\032.ProtoOfficial.eDepartment\022\020\n\010offi"
    "cial\030\004 \002(\r\022\n\n\002ts\030\005 \002(\r\"\236\001\n\017PrivilegeReco"
    "rd\022\017\n\007operate\030\001 \002(\014\022\016\n\006target\030\002 \002(\014\022.\n\nd"
    "epartment\030\003 \002(\0162\032.ProtoOfficial.eDepartm"
    "ent\022\020\n\010official\030\004 \002(\r\022\n\n\002ts\030\005 \002(\r\022\014\n\004typ"
    "e\030\006 \002(\r\022\016\n\006params\030\007 \002(\r\"Z\n\020DepartmentMem"
    "ber\022\020\n\010official\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\014\n\004na"
    "me\030\003 \002(\014\022\013\n\003lvl\030\004 \002(\r\022\014\n\004head\030\005 \002(\014\"\177\n\020D"
    "epartmentLeader\022(\n\004type\030\001 \002(\0162\032.ProtoOff"
    "icial.eDepartment\022/\n\006leader\030\002 \002(\0132\037.Prot"
    "oOfficial.DepartmentMember\022\020\n\010prestige\030\003"
    " \002(\r\"\210\001\n\014PublishToken\022.\n\ndepartment\030\001 \002("
    "\0162\032.ProtoOfficial.eDepartment\022\n\n\002ts\030\002 \002("
    "\r\022\017\n\007city_id\030\003 \002(\r\022\014\n\004text\030\004 \002(\014\022\014\n\004name"
    "\030\005 \002(\014\022\017\n\007kingdom\030\006 \002(\r\"A\n\017OfficialInfoR"
    "eq\022.\n\ndepartment\030\001 \002(\0162\032.ProtoOfficial.e"
    "Department\"\325\001\n\020OfficialInfoResp\0220\n\007leade"
    "rs\030\001 \003(\0132\037.ProtoOfficial.DepartmentLeade"
    "r\022.\n\ndepartment\030\002 \002(\0162\032.ProtoOfficial.eD"
    "epartment\0220\n\007members\030\003 \003(\0132\037.ProtoOffici"
    "al.DepartmentMember\022\026\n\016country_notice\030\004 "
    "\002(\014\022\025\n\rdepart_notice\030\005 \002(\014\"\240\001\n\020PushJobCh"
    "angeMsg\0221\n\rorigin_depart\030\001 \002(\0162\032.ProtoOf"
    "ficial.eDepartment\022\022\n\norigin_job\030\002 \002(\005\0221"
    "\n\rtarget_depart\030\003 \002(\0162\032.ProtoOfficial.eD"
    "epartment\022\022\n\ntarget_job\030\004 \002(\005\"P\n\014Challen"
    "geReq\022.\n\ndepartment\030\001 \002(\0162\032.ProtoOfficia"
    "l.eDepartment\022\020\n\010official\030\002 \002(\r\"\212\001\n\rChal"
    "lengeResp\022.\n\ndepartment\030\001 \002(\0162\032.ProtoOff"
    "icial.eDepartment\022\020\n\010official\030\002 \002(\r\022\020\n\010h"
    "ero_ids\030\003 \003(\r\022\020\n\010hero_lvl\030\004 \003(\r\022\023\n\013hero_"
    "troops\030\005 \003(\r\"g\n\021StartChallengeReq\022.\n\ndep"
    "artment\030\001 \002(\0162\032.ProtoOfficial.eDepartmen"
    "t\022\020\n\010official\030\002 \002(\r\022\020\n\010hero_ids\030\003 \003(\r\"O\n"
    "\020AppointDeputyReq\022.\n\ndepartment\030\001 \002(\0162\032."
    "ProtoOfficial.eDepartment\022\013\n\003uid\030\002 \002(\r\"\342"
    "\001\n\021AppointDeputyResp\022.\n\ndepartment\030\001 \002(\016"
    "2\032.ProtoOfficial.eDepartment\022\013\n\003uid\030\002 \002("
    "\r\022\016\n\006origin\030\003 \002(\r\022\016\n\006target\030\004 \002(\r\022\014\n\004nam"
    "e\030\005 \002(\014\0220\n\007members\030\006 \003(\0132\037.ProtoOfficial"
    ".DepartmentMember\0220\n\007records\030\007 \003(\0132\037.Pro"
    "toOfficial.DepartmentRecord\">\n\014ApplyJoin"
    "Req\022.\n\ndepartment\030\001 \002(\0162\032.ProtoOfficial."
    "eDepartment\"\243\001\n\rApplyJoinResp\022.\n\ndepartm"
    "ent\030\001 \002(\0162\032.ProtoOfficial.eDepartment\0220\n"
    "\007members\030\002 \003(\0132\037.ProtoOfficial.Departmen"
    "tMember\0220\n\007records\030\003 \003(\0132\037.ProtoOfficial"
    ".DepartmentRecord\">\n\014ApplyExitReq\022.\n\ndep"
    "artment\030\001 \002(\0162\032.ProtoOfficial.eDepartmen"
    "t\"\225\001\n\rApplyExitResp\022.\n\ndepartment\030\001 \002(\0162"
    "\032.ProtoOfficial.eDepartment\022\020\n\010official\030"
    "\002 \002(\r\022\020\n\010prestige\030\003 \002(\r\0220\n\007members\030\004 \003(\013"
    "2\037.ProtoOfficial.DepartmentMember\"K\n\014Agr"
    "eeJoinReq\022\013\n\003uid\030\001 \002(\r\022.\n\ndepartment\030\002 \002"
    "(\0162\032.ProtoOfficial.eDepartment\"\243\001\n\rAgree"
    "JoinResp\022.\n\ndepartment\030\001 \002(\0162\032.ProtoOffi"
    "cial.eDepartment\0220\n\007members\030\002 \003(\0132\037.Prot"
    "oOfficial.DepartmentMember\0220\n\007records\030\003 "
    "\003(\0132\037.ProtoOfficial.DepartmentRecord\"L\n\r"
    "RefuseJoinReq\022\013\n\003uid\030\001 \002(\r\022.\n\ndepartment"
    "\030\002 \002(\0162\032.ProtoOfficial.eDepartment\"r\n\016Re"
    "fuseJoinResp\022.\n\ndepartment\030\001 \002(\0162\032.Proto"
    "Official.eDepartment\0220\n\007records\030\002 \003(\0132\037."
    "ProtoOfficial.DepartmentRecord\"L\n\014SetNot"
    "iceReq\022.\n\ndepartment\030\001 \002(\0162\032.ProtoOffici"
    "al.eDepartment\022\014\n\004text\030\002 \002(\014\"\016\n\014GetSalar"
    "yReq\"E\n\rGetSalaryResp\022\016\n\006salary\030\001 \002(\r\022\r\n"
    "\005coins\030\002 \002(\r\022\025\n\rjob_reward_ts\030\003 \002(\r\"H\n\026G"
    "etDepartmentRecordReq\022.\n\ndepartment\030\001 \002("
    "\0162\032.ProtoOfficial.eDepartment\"K\n\027GetDepa"
    "rtmentRecordResp\0220\n\007records\030\001 \003(\0132\037.Prot"
    "oOfficial.DepartmentRecord\"`\n\017PublishTok"
    "enReq\022\017\n\007city_id\030\001 \002(\r\022\014\n\004text\030\002 \002(\014\022.\n\n"
    "department\030\003 \002(\0162\032.ProtoOfficial.eDepart"
    "ment\">\n\020PushPublishToken\022*\n\005token\030\001 \002(\0132"
    "\033.ProtoOfficial.PublishToken\"#\n\017RespondT"
    "okenReq\022\020\n\010hero_ids\030\001 \003(\r\"6\n\020RespondToke"
    "nResp\022\020\n\010hero_ids\030\001 \003(\r\022\020\n\010token_ts\030\002 \002("
    "\r\"\027\n\025GetPersonnelRecordReq\"I\n\026GetPersonn"
    "elRecordResp\022/\n\007records\030\001 \003(\0132\036.ProtoOff"
    "icial.PersonnelRecord\"\027\n\025GetPrivilegeRec"
    "ordReq\"I\n\026GetPrivilegeRecordResp\022/\n\007reco"
    "rds\030\001 \003(\0132\036.ProtoOfficial.PrivilegeRecor"
    "d\"O\n\020KickOutMemberReq\022\013\n\003uid\030\001 \002(\r\022.\n\nde"
    "partment\030\002 \002(\0162\032.ProtoOfficial.eDepartme"
    "nt\"\247\001\n\021KickOutMemberResp\022.\n\ndepartment\030\001"
    " \002(\0162\032.ProtoOfficial.eDepartment\0220\n\007memb"
    "ers\030\002 \003(\0132\037.ProtoOfficial.DepartmentMemb"
    "er\0220\n\007records\030\003 \003(\0132\037.ProtoOfficial.Depa"
    "rtmentRecord*f\n\013eDepartment\022\n\n\006e_None\020\000\022"
    "\017\n\013e_Commander\020\001\022\r\n\te_Defense\020\002\022\017\n\013e_Pre"
    "sident\020\003\022\r\n\te_Marshal\020\004\022\013\n\007e_Staff\020\005", 3916);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoOfficial.proto", &protobuf_RegisterTypes);
  DepartmentRecord::default_instance_ = new DepartmentRecord();
  PersonnelRecord::default_instance_ = new PersonnelRecord();
  PrivilegeRecord::default_instance_ = new PrivilegeRecord();
  DepartmentMember::default_instance_ = new DepartmentMember();
  DepartmentLeader::default_instance_ = new DepartmentLeader();
  PublishToken::default_instance_ = new PublishToken();
  OfficialInfoReq::default_instance_ = new OfficialInfoReq();
  OfficialInfoResp::default_instance_ = new OfficialInfoResp();
  PushJobChangeMsg::default_instance_ = new PushJobChangeMsg();
  ChallengeReq::default_instance_ = new ChallengeReq();
  ChallengeResp::default_instance_ = new ChallengeResp();
  StartChallengeReq::default_instance_ = new StartChallengeReq();
  AppointDeputyReq::default_instance_ = new AppointDeputyReq();
  AppointDeputyResp::default_instance_ = new AppointDeputyResp();
  ApplyJoinReq::default_instance_ = new ApplyJoinReq();
  ApplyJoinResp::default_instance_ = new ApplyJoinResp();
  ApplyExitReq::default_instance_ = new ApplyExitReq();
  ApplyExitResp::default_instance_ = new ApplyExitResp();
  AgreeJoinReq::default_instance_ = new AgreeJoinReq();
  AgreeJoinResp::default_instance_ = new AgreeJoinResp();
  RefuseJoinReq::default_instance_ = new RefuseJoinReq();
  RefuseJoinResp::default_instance_ = new RefuseJoinResp();
  SetNoticeReq::default_instance_ = new SetNoticeReq();
  GetSalaryReq::default_instance_ = new GetSalaryReq();
  GetSalaryResp::default_instance_ = new GetSalaryResp();
  GetDepartmentRecordReq::default_instance_ = new GetDepartmentRecordReq();
  GetDepartmentRecordResp::default_instance_ = new GetDepartmentRecordResp();
  PublishTokenReq::default_instance_ = new PublishTokenReq();
  PushPublishToken::default_instance_ = new PushPublishToken();
  RespondTokenReq::default_instance_ = new RespondTokenReq();
  RespondTokenResp::default_instance_ = new RespondTokenResp();
  GetPersonnelRecordReq::default_instance_ = new GetPersonnelRecordReq();
  GetPersonnelRecordResp::default_instance_ = new GetPersonnelRecordResp();
  GetPrivilegeRecordReq::default_instance_ = new GetPrivilegeRecordReq();
  GetPrivilegeRecordResp::default_instance_ = new GetPrivilegeRecordResp();
  KickOutMemberReq::default_instance_ = new KickOutMemberReq();
  KickOutMemberResp::default_instance_ = new KickOutMemberResp();
  DepartmentRecord::default_instance_->InitAsDefaultInstance();
  PersonnelRecord::default_instance_->InitAsDefaultInstance();
  PrivilegeRecord::default_instance_->InitAsDefaultInstance();
  DepartmentMember::default_instance_->InitAsDefaultInstance();
  DepartmentLeader::default_instance_->InitAsDefaultInstance();
  PublishToken::default_instance_->InitAsDefaultInstance();
  OfficialInfoReq::default_instance_->InitAsDefaultInstance();
  OfficialInfoResp::default_instance_->InitAsDefaultInstance();
  PushJobChangeMsg::default_instance_->InitAsDefaultInstance();
  ChallengeReq::default_instance_->InitAsDefaultInstance();
  ChallengeResp::default_instance_->InitAsDefaultInstance();
  StartChallengeReq::default_instance_->InitAsDefaultInstance();
  AppointDeputyReq::default_instance_->InitAsDefaultInstance();
  AppointDeputyResp::default_instance_->InitAsDefaultInstance();
  ApplyJoinReq::default_instance_->InitAsDefaultInstance();
  ApplyJoinResp::default_instance_->InitAsDefaultInstance();
  ApplyExitReq::default_instance_->InitAsDefaultInstance();
  ApplyExitResp::default_instance_->InitAsDefaultInstance();
  AgreeJoinReq::default_instance_->InitAsDefaultInstance();
  AgreeJoinResp::default_instance_->InitAsDefaultInstance();
  RefuseJoinReq::default_instance_->InitAsDefaultInstance();
  RefuseJoinResp::default_instance_->InitAsDefaultInstance();
  SetNoticeReq::default_instance_->InitAsDefaultInstance();
  GetSalaryReq::default_instance_->InitAsDefaultInstance();
  GetSalaryResp::default_instance_->InitAsDefaultInstance();
  GetDepartmentRecordReq::default_instance_->InitAsDefaultInstance();
  GetDepartmentRecordResp::default_instance_->InitAsDefaultInstance();
  PublishTokenReq::default_instance_->InitAsDefaultInstance();
  PushPublishToken::default_instance_->InitAsDefaultInstance();
  RespondTokenReq::default_instance_->InitAsDefaultInstance();
  RespondTokenResp::default_instance_->InitAsDefaultInstance();
  GetPersonnelRecordReq::default_instance_->InitAsDefaultInstance();
  GetPersonnelRecordResp::default_instance_->InitAsDefaultInstance();
  GetPrivilegeRecordReq::default_instance_->InitAsDefaultInstance();
  GetPrivilegeRecordResp::default_instance_->InitAsDefaultInstance();
  KickOutMemberReq::default_instance_->InitAsDefaultInstance();
  KickOutMemberResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoOfficial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoOfficial_2eproto {
  StaticDescriptorInitializer_ProtoOfficial_2eproto() {
    protobuf_AddDesc_ProtoOfficial_2eproto();
  }
} static_descriptor_initializer_ProtoOfficial_2eproto_;
const ::google::protobuf::EnumDescriptor* eDepartment_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDepartment_descriptor_;
}
bool eDepartment_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DepartmentRecord::kParamsFieldNumber;
const int DepartmentRecord::kOperateFieldNumber;
const int DepartmentRecord::kTargetFieldNumber;
const int DepartmentRecord::kOperateJobFieldNumber;
const int DepartmentRecord::kTargetJobFieldNumber;
const int DepartmentRecord::kTsFieldNumber;
const int DepartmentRecord::kOpFieldNumber;
#endif  // !_MSC_VER

DepartmentRecord::DepartmentRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.DepartmentRecord)
}

void DepartmentRecord::InitAsDefaultInstance() {
}

DepartmentRecord::DepartmentRecord(const DepartmentRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.DepartmentRecord)
}

void DepartmentRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  params_ = 0u;
  operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operate_job_ = 0u;
  target_job_ = 0u;
  ts_ = 0u;
  op_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartmentRecord::~DepartmentRecord() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.DepartmentRecord)
  SharedDtor();
}

void DepartmentRecord::SharedDtor() {
  if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operate_;
  }
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void DepartmentRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartmentRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartmentRecord_descriptor_;
}

const DepartmentRecord& DepartmentRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

DepartmentRecord* DepartmentRecord::default_instance_ = NULL;

DepartmentRecord* DepartmentRecord::New() const {
  return new DepartmentRecord;
}

void DepartmentRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepartmentRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(params_, operate_job_);
    ZR_(target_job_, op_);
    if (has_operate()) {
      if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operate_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepartmentRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.DepartmentRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 params = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &params_)));
          set_has_params();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operate;
        break;
      }

      // required bytes operate = 2;
      case 2: {
        if (tag == 18) {
         parse_operate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // required bytes target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operate_job;
        break;
      }

      // required uint32 operate_job = 4;
      case 4: {
        if (tag == 32) {
         parse_operate_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_job_)));
          set_has_operate_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_job;
        break;
      }

      // required uint32 target_job = 5;
      case 5: {
        if (tag == 40) {
         parse_target_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_job_)));
          set_has_target_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ts;
        break;
      }

      // required uint32 ts = 6;
      case 6: {
        if (tag == 48) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_op;
        break;
      }

      // required uint32 op = 7;
      case 7: {
        if (tag == 56) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.DepartmentRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.DepartmentRecord)
  return false;
#undef DO_
}

void DepartmentRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.DepartmentRecord)
  // required uint32 params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->params(), output);
  }

  // required bytes operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->operate(), output);
  }

  // required bytes target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->target(), output);
  }

  // required uint32 operate_job = 4;
  if (has_operate_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operate_job(), output);
  }

  // required uint32 target_job = 5;
  if (has_target_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_job(), output);
  }

  // required uint32 ts = 6;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ts(), output);
  }

  // required uint32 op = 7;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.DepartmentRecord)
}

::google::protobuf::uint8* DepartmentRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.DepartmentRecord)
  // required uint32 params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->params(), target);
  }

  // required bytes operate = 2;
  if (has_operate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->operate(), target);
  }

  // required bytes target = 3;
  if (has_target()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->target(), target);
  }

  // required uint32 operate_job = 4;
  if (has_operate_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operate_job(), target);
  }

  // required uint32 target_job = 5;
  if (has_target_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_job(), target);
  }

  // required uint32 ts = 6;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ts(), target);
  }

  // required uint32 op = 7;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.DepartmentRecord)
  return target;
}

int DepartmentRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->params());
    }

    // required bytes operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operate());
    }

    // required bytes target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target());
    }

    // required uint32 operate_job = 4;
    if (has_operate_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_job());
    }

    // required uint32 target_job = 5;
    if (has_target_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_job());
    }

    // required uint32 ts = 6;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 op = 7;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartmentRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepartmentRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepartmentRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepartmentRecord::MergeFrom(const DepartmentRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      set_params(from.params());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_operate_job()) {
      set_operate_job(from.operate_job());
    }
    if (from.has_target_job()) {
      set_target_job(from.target_job());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepartmentRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartmentRecord::CopyFrom(const DepartmentRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartmentRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void DepartmentRecord::Swap(DepartmentRecord* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(operate_, other->operate_);
    std::swap(target_, other->target_);
    std::swap(operate_job_, other->operate_job_);
    std::swap(target_job_, other->target_job_);
    std::swap(ts_, other->ts_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepartmentRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartmentRecord_descriptor_;
  metadata.reflection = DepartmentRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonnelRecord::kOperateFieldNumber;
const int PersonnelRecord::kTargetFieldNumber;
const int PersonnelRecord::kDepartmentFieldNumber;
const int PersonnelRecord::kOfficialFieldNumber;
const int PersonnelRecord::kTsFieldNumber;
#endif  // !_MSC_VER

PersonnelRecord::PersonnelRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.PersonnelRecord)
}

void PersonnelRecord::InitAsDefaultInstance() {
}

PersonnelRecord::PersonnelRecord(const PersonnelRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.PersonnelRecord)
}

void PersonnelRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = 0;
  official_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonnelRecord::~PersonnelRecord() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.PersonnelRecord)
  SharedDtor();
}

void PersonnelRecord::SharedDtor() {
  if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operate_;
  }
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void PersonnelRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonnelRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonnelRecord_descriptor_;
}

const PersonnelRecord& PersonnelRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

PersonnelRecord* PersonnelRecord::default_instance_ = NULL;

PersonnelRecord* PersonnelRecord::New() const {
  return new PersonnelRecord;
}

void PersonnelRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PersonnelRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(department_, ts_);
    if (has_operate()) {
      if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operate_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonnelRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.PersonnelRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes operate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required bytes target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 3;
      case 3: {
        if (tag == 24) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_official;
        break;
      }

      // required uint32 official = 4;
      case 4: {
        if (tag == 32) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.PersonnelRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.PersonnelRecord)
  return false;
#undef DO_
}

void PersonnelRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.PersonnelRecord)
  // required bytes operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->operate(), output);
  }

  // required bytes target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target(), output);
  }

  // required .ProtoOfficial.eDepartment department = 3;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->department(), output);
  }

  // required uint32 official = 4;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->official(), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.PersonnelRecord)
}

::google::protobuf::uint8* PersonnelRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.PersonnelRecord)
  // required bytes operate = 1;
  if (has_operate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->operate(), target);
  }

  // required bytes target = 2;
  if (has_target()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target(), target);
  }

  // required .ProtoOfficial.eDepartment department = 3;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->department(), target);
  }

  // required uint32 official = 4;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->official(), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.PersonnelRecord)
  return target;
}

int PersonnelRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operate());
    }

    // required bytes target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target());
    }

    // required .ProtoOfficial.eDepartment department = 3;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 official = 4;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonnelRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonnelRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonnelRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonnelRecord::MergeFrom(const PersonnelRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonnelRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonnelRecord::CopyFrom(const PersonnelRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonnelRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PersonnelRecord::Swap(PersonnelRecord* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(target_, other->target_);
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonnelRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonnelRecord_descriptor_;
  metadata.reflection = PersonnelRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivilegeRecord::kOperateFieldNumber;
const int PrivilegeRecord::kTargetFieldNumber;
const int PrivilegeRecord::kDepartmentFieldNumber;
const int PrivilegeRecord::kOfficialFieldNumber;
const int PrivilegeRecord::kTsFieldNumber;
const int PrivilegeRecord::kTypeFieldNumber;
const int PrivilegeRecord::kParamsFieldNumber;
#endif  // !_MSC_VER

PrivilegeRecord::PrivilegeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.PrivilegeRecord)
}

void PrivilegeRecord::InitAsDefaultInstance() {
}

PrivilegeRecord::PrivilegeRecord(const PrivilegeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.PrivilegeRecord)
}

void PrivilegeRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = 0;
  official_ = 0u;
  ts_ = 0u;
  type_ = 0u;
  params_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivilegeRecord::~PrivilegeRecord() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.PrivilegeRecord)
  SharedDtor();
}

void PrivilegeRecord::SharedDtor() {
  if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operate_;
  }
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void PrivilegeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivilegeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivilegeRecord_descriptor_;
}

const PrivilegeRecord& PrivilegeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

PrivilegeRecord* PrivilegeRecord::default_instance_ = NULL;

PrivilegeRecord* PrivilegeRecord::New() const {
  return new PrivilegeRecord;
}

void PrivilegeRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrivilegeRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(department_, params_);
    if (has_operate()) {
      if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operate_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivilegeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.PrivilegeRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes operate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required bytes target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 3;
      case 3: {
        if (tag == 24) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_official;
        break;
      }

      // required uint32 official = 4;
      case 4: {
        if (tag == 32) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required uint32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_params;
        break;
      }

      // required uint32 params = 7;
      case 7: {
        if (tag == 56) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &params_)));
          set_has_params();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.PrivilegeRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.PrivilegeRecord)
  return false;
#undef DO_
}

void PrivilegeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.PrivilegeRecord)
  // required bytes operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->operate(), output);
  }

  // required bytes target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target(), output);
  }

  // required .ProtoOfficial.eDepartment department = 3;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->department(), output);
  }

  // required uint32 official = 4;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->official(), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  // required uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // required uint32 params = 7;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.PrivilegeRecord)
}

::google::protobuf::uint8* PrivilegeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.PrivilegeRecord)
  // required bytes operate = 1;
  if (has_operate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->operate(), target);
  }

  // required bytes target = 2;
  if (has_target()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target(), target);
  }

  // required .ProtoOfficial.eDepartment department = 3;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->department(), target);
  }

  // required uint32 official = 4;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->official(), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  // required uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // required uint32 params = 7;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.PrivilegeRecord)
  return target;
}

int PrivilegeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operate());
    }

    // required bytes target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target());
    }

    // required .ProtoOfficial.eDepartment department = 3;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 official = 4;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 params = 7;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivilegeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivilegeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivilegeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivilegeRecord::MergeFrom(const PrivilegeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivilegeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivilegeRecord::CopyFrom(const PrivilegeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PrivilegeRecord::Swap(PrivilegeRecord* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(target_, other->target_);
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    std::swap(ts_, other->ts_);
    std::swap(type_, other->type_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivilegeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivilegeRecord_descriptor_;
  metadata.reflection = PrivilegeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepartmentMember::kOfficialFieldNumber;
const int DepartmentMember::kUidFieldNumber;
const int DepartmentMember::kNameFieldNumber;
const int DepartmentMember::kLvlFieldNumber;
const int DepartmentMember::kHeadFieldNumber;
#endif  // !_MSC_VER

DepartmentMember::DepartmentMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.DepartmentMember)
}

void DepartmentMember::InitAsDefaultInstance() {
}

DepartmentMember::DepartmentMember(const DepartmentMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.DepartmentMember)
}

void DepartmentMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  official_ = 0u;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lvl_ = 0u;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartmentMember::~DepartmentMember() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.DepartmentMember)
  SharedDtor();
}

void DepartmentMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void DepartmentMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartmentMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartmentMember_descriptor_;
}

const DepartmentMember& DepartmentMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

DepartmentMember* DepartmentMember::default_instance_ = NULL;

DepartmentMember* DepartmentMember::New() const {
  return new DepartmentMember;
}

void DepartmentMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepartmentMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(official_, uid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    lvl_ = 0u;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepartmentMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.DepartmentMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 official = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lvl;
        break;
      }

      // required uint32 lvl = 4;
      case 4: {
        if (tag == 32) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }

      // required bytes head = 5;
      case 5: {
        if (tag == 42) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.DepartmentMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.DepartmentMember)
  return false;
#undef DO_
}

void DepartmentMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.DepartmentMember)
  // required uint32 official = 1;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->official(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required uint32 lvl = 4;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lvl(), output);
  }

  // required bytes head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.DepartmentMember)
}

::google::protobuf::uint8* DepartmentMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.DepartmentMember)
  // required uint32 official = 1;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->official(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint32 lvl = 4;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lvl(), target);
  }

  // required bytes head = 5;
  if (has_head()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.DepartmentMember)
  return target;
}

int DepartmentMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 official = 1;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 lvl = 4;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // required bytes head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartmentMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepartmentMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepartmentMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepartmentMember::MergeFrom(const DepartmentMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepartmentMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartmentMember::CopyFrom(const DepartmentMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartmentMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DepartmentMember::Swap(DepartmentMember* other) {
  if (other != this) {
    std::swap(official_, other->official_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(lvl_, other->lvl_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepartmentMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartmentMember_descriptor_;
  metadata.reflection = DepartmentMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepartmentLeader::kTypeFieldNumber;
const int DepartmentLeader::kLeaderFieldNumber;
const int DepartmentLeader::kPrestigeFieldNumber;
#endif  // !_MSC_VER

DepartmentLeader::DepartmentLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.DepartmentLeader)
}

void DepartmentLeader::InitAsDefaultInstance() {
  leader_ = const_cast< ::ProtoOfficial::DepartmentMember*>(&::ProtoOfficial::DepartmentMember::default_instance());
}

DepartmentLeader::DepartmentLeader(const DepartmentLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.DepartmentLeader)
}

void DepartmentLeader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  leader_ = NULL;
  prestige_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartmentLeader::~DepartmentLeader() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.DepartmentLeader)
  SharedDtor();
}

void DepartmentLeader::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
  }
}

void DepartmentLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartmentLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartmentLeader_descriptor_;
}

const DepartmentLeader& DepartmentLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

DepartmentLeader* DepartmentLeader::default_instance_ = NULL;

DepartmentLeader* DepartmentLeader::New() const {
  return new DepartmentLeader;
}

void DepartmentLeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepartmentLeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, prestige_);
    if (has_leader()) {
      if (leader_ != NULL) leader_->::ProtoOfficial::DepartmentMember::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepartmentLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.DepartmentLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_type(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // required .ProtoOfficial.DepartmentMember leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prestige;
        break;
      }

      // required uint32 prestige = 3;
      case 3: {
        if (tag == 24) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.DepartmentLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.DepartmentLeader)
  return false;
#undef DO_
}

void DepartmentLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.DepartmentLeader)
  // required .ProtoOfficial.eDepartment type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ProtoOfficial.DepartmentMember leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  // required uint32 prestige = 3;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prestige(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.DepartmentLeader)
}

::google::protobuf::uint8* DepartmentLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.DepartmentLeader)
  // required .ProtoOfficial.eDepartment type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ProtoOfficial.DepartmentMember leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  // required uint32 prestige = 3;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prestige(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.DepartmentLeader)
  return target;
}

int DepartmentLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .ProtoOfficial.DepartmentMember leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

    // required uint32 prestige = 3;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartmentLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepartmentLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepartmentLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepartmentLeader::MergeFrom(const DepartmentLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_leader()) {
      mutable_leader()->::ProtoOfficial::DepartmentMember::MergeFrom(from.leader());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepartmentLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartmentLeader::CopyFrom(const DepartmentLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartmentLeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_leader()) {
    if (!this->leader().IsInitialized()) return false;
  }
  return true;
}

void DepartmentLeader::Swap(DepartmentLeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(leader_, other->leader_);
    std::swap(prestige_, other->prestige_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepartmentLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartmentLeader_descriptor_;
  metadata.reflection = DepartmentLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishToken::kDepartmentFieldNumber;
const int PublishToken::kTsFieldNumber;
const int PublishToken::kCityIdFieldNumber;
const int PublishToken::kTextFieldNumber;
const int PublishToken::kNameFieldNumber;
const int PublishToken::kKingdomFieldNumber;
#endif  // !_MSC_VER

PublishToken::PublishToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.PublishToken)
}

void PublishToken::InitAsDefaultInstance() {
}

PublishToken::PublishToken(const PublishToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.PublishToken)
}

void PublishToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  department_ = 0;
  ts_ = 0u;
  city_id_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kingdom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishToken::~PublishToken() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.PublishToken)
  SharedDtor();
}

void PublishToken::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PublishToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishToken_descriptor_;
}

const PublishToken& PublishToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

PublishToken* PublishToken::default_instance_ = NULL;

PublishToken* PublishToken::New() const {
  return new PublishToken;
}

void PublishToken::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PublishToken*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(department_, ts_);
    ZR_(city_id_, kingdom_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.PublishToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 3;
      case 3: {
        if (tag == 24) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // required bytes text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kingdom;
        break;
      }

      // required uint32 kingdom = 6;
      case 6: {
        if (tag == 48) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.PublishToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.PublishToken)
  return false;
#undef DO_
}

void PublishToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.PublishToken)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  // required bytes text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->text(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  // required uint32 kingdom = 6;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kingdom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.PublishToken)
}

::google::protobuf::uint8* PublishToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.PublishToken)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  // required bytes text = 4;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->text(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // required uint32 kingdom = 6;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kingdom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.PublishToken)
  return target;
}

int PublishToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // required bytes text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 kingdom = 6;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishToken::MergeFrom(const PublishToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishToken::CopyFrom(const PublishToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PublishToken::Swap(PublishToken* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(ts_, other->ts_);
    std::swap(city_id_, other->city_id_);
    std::swap(text_, other->text_);
    std::swap(name_, other->name_);
    std::swap(kingdom_, other->kingdom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishToken_descriptor_;
  metadata.reflection = PublishToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfficialInfoReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

OfficialInfoReq::OfficialInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.OfficialInfoReq)
}

void OfficialInfoReq::InitAsDefaultInstance() {
}

OfficialInfoReq::OfficialInfoReq(const OfficialInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.OfficialInfoReq)
}

void OfficialInfoReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialInfoReq::~OfficialInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.OfficialInfoReq)
  SharedDtor();
}

void OfficialInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfficialInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfficialInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfficialInfoReq_descriptor_;
}

const OfficialInfoReq& OfficialInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

OfficialInfoReq* OfficialInfoReq::default_instance_ = NULL;

OfficialInfoReq* OfficialInfoReq::New() const {
  return new OfficialInfoReq;
}

void OfficialInfoReq::Clear() {
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfficialInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.OfficialInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.OfficialInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.OfficialInfoReq)
  return false;
#undef DO_
}

void OfficialInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.OfficialInfoReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.OfficialInfoReq)
}

::google::protobuf::uint8* OfficialInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.OfficialInfoReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.OfficialInfoReq)
  return target;
}

int OfficialInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfficialInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfficialInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfficialInfoReq::MergeFrom(const OfficialInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfficialInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfficialInfoReq::CopyFrom(const OfficialInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfficialInfoReq::Swap(OfficialInfoReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfficialInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfficialInfoReq_descriptor_;
  metadata.reflection = OfficialInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfficialInfoResp::kLeadersFieldNumber;
const int OfficialInfoResp::kDepartmentFieldNumber;
const int OfficialInfoResp::kMembersFieldNumber;
const int OfficialInfoResp::kCountryNoticeFieldNumber;
const int OfficialInfoResp::kDepartNoticeFieldNumber;
#endif  // !_MSC_VER

OfficialInfoResp::OfficialInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.OfficialInfoResp)
}

void OfficialInfoResp::InitAsDefaultInstance() {
}

OfficialInfoResp::OfficialInfoResp(const OfficialInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.OfficialInfoResp)
}

void OfficialInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  department_ = 0;
  country_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depart_notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficialInfoResp::~OfficialInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.OfficialInfoResp)
  SharedDtor();
}

void OfficialInfoResp::SharedDtor() {
  if (country_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_notice_;
  }
  if (depart_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete depart_notice_;
  }
  if (this != default_instance_) {
  }
}

void OfficialInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfficialInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfficialInfoResp_descriptor_;
}

const OfficialInfoResp& OfficialInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

OfficialInfoResp* OfficialInfoResp::default_instance_ = NULL;

OfficialInfoResp* OfficialInfoResp::New() const {
  return new OfficialInfoResp;
}

void OfficialInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 26) {
    department_ = 0;
    if (has_country_notice()) {
      if (country_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_notice_->clear();
      }
    }
    if (has_depart_notice()) {
      if (depart_notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        depart_notice_->clear();
      }
    }
  }
  leaders_.Clear();
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfficialInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.OfficialInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOfficial.DepartmentLeader leaders = 1;
      case 1: {
        if (tag == 10) {
         parse_leaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_leaders;
        if (input->ExpectTag(16)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 2;
      case 2: {
        if (tag == 16) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .ProtoOfficial.DepartmentMember members = 3;
      case 3: {
        if (tag == 26) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(34)) goto parse_country_notice;
        break;
      }

      // required bytes country_notice = 4;
      case 4: {
        if (tag == 34) {
         parse_country_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_country_notice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_depart_notice;
        break;
      }

      // required bytes depart_notice = 5;
      case 5: {
        if (tag == 42) {
         parse_depart_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_depart_notice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.OfficialInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.OfficialInfoResp)
  return false;
#undef DO_
}

void OfficialInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.OfficialInfoResp)
  // repeated .ProtoOfficial.DepartmentLeader leaders = 1;
  for (int i = 0; i < this->leaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leaders(i), output);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->department(), output);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // required bytes country_notice = 4;
  if (has_country_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->country_notice(), output);
  }

  // required bytes depart_notice = 5;
  if (has_depart_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->depart_notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.OfficialInfoResp)
}

::google::protobuf::uint8* OfficialInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.OfficialInfoResp)
  // repeated .ProtoOfficial.DepartmentLeader leaders = 1;
  for (int i = 0; i < this->leaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leaders(i), target);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->department(), target);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // required bytes country_notice = 4;
  if (has_country_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->country_notice(), target);
  }

  // required bytes depart_notice = 5;
  if (has_depart_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->depart_notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.OfficialInfoResp)
  return target;
}

int OfficialInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoOfficial.eDepartment department = 2;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required bytes country_notice = 4;
    if (has_country_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->country_notice());
    }

    // required bytes depart_notice = 5;
    if (has_depart_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->depart_notice());
    }

  }
  // repeated .ProtoOfficial.DepartmentLeader leaders = 1;
  total_size += 1 * this->leaders_size();
  for (int i = 0; i < this->leaders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaders(i));
  }

  // repeated .ProtoOfficial.DepartmentMember members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficialInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfficialInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfficialInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfficialInfoResp::MergeFrom(const OfficialInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  leaders_.MergeFrom(from.leaders_);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_country_notice()) {
      set_country_notice(from.country_notice());
    }
    if (from.has_depart_notice()) {
      set_depart_notice(from.depart_notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfficialInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfficialInfoResp::CopyFrom(const OfficialInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficialInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->leaders())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void OfficialInfoResp::Swap(OfficialInfoResp* other) {
  if (other != this) {
    leaders_.Swap(&other->leaders_);
    std::swap(department_, other->department_);
    members_.Swap(&other->members_);
    std::swap(country_notice_, other->country_notice_);
    std::swap(depart_notice_, other->depart_notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfficialInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfficialInfoResp_descriptor_;
  metadata.reflection = OfficialInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushJobChangeMsg::kOriginDepartFieldNumber;
const int PushJobChangeMsg::kOriginJobFieldNumber;
const int PushJobChangeMsg::kTargetDepartFieldNumber;
const int PushJobChangeMsg::kTargetJobFieldNumber;
#endif  // !_MSC_VER

PushJobChangeMsg::PushJobChangeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.PushJobChangeMsg)
}

void PushJobChangeMsg::InitAsDefaultInstance() {
}

PushJobChangeMsg::PushJobChangeMsg(const PushJobChangeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.PushJobChangeMsg)
}

void PushJobChangeMsg::SharedCtor() {
  _cached_size_ = 0;
  origin_depart_ = 0;
  origin_job_ = 0;
  target_depart_ = 0;
  target_job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushJobChangeMsg::~PushJobChangeMsg() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.PushJobChangeMsg)
  SharedDtor();
}

void PushJobChangeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushJobChangeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushJobChangeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushJobChangeMsg_descriptor_;
}

const PushJobChangeMsg& PushJobChangeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

PushJobChangeMsg* PushJobChangeMsg::default_instance_ = NULL;

PushJobChangeMsg* PushJobChangeMsg::New() const {
  return new PushJobChangeMsg;
}

void PushJobChangeMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushJobChangeMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(origin_depart_, target_job_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushJobChangeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.PushJobChangeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment origin_depart = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_origin_depart(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_origin_job;
        break;
      }

      // required int32 origin_job = 2;
      case 2: {
        if (tag == 16) {
         parse_origin_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_job_)));
          set_has_origin_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_depart;
        break;
      }

      // required .ProtoOfficial.eDepartment target_depart = 3;
      case 3: {
        if (tag == 24) {
         parse_target_depart:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_target_depart(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_job;
        break;
      }

      // required int32 target_job = 4;
      case 4: {
        if (tag == 32) {
         parse_target_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_job_)));
          set_has_target_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.PushJobChangeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.PushJobChangeMsg)
  return false;
#undef DO_
}

void PushJobChangeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.PushJobChangeMsg)
  // required .ProtoOfficial.eDepartment origin_depart = 1;
  if (has_origin_depart()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->origin_depart(), output);
  }

  // required int32 origin_job = 2;
  if (has_origin_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->origin_job(), output);
  }

  // required .ProtoOfficial.eDepartment target_depart = 3;
  if (has_target_depart()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->target_depart(), output);
  }

  // required int32 target_job = 4;
  if (has_target_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.PushJobChangeMsg)
}

::google::protobuf::uint8* PushJobChangeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.PushJobChangeMsg)
  // required .ProtoOfficial.eDepartment origin_depart = 1;
  if (has_origin_depart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->origin_depart(), target);
  }

  // required int32 origin_job = 2;
  if (has_origin_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->origin_job(), target);
  }

  // required .ProtoOfficial.eDepartment target_depart = 3;
  if (has_target_depart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->target_depart(), target);
  }

  // required int32 target_job = 4;
  if (has_target_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.PushJobChangeMsg)
  return target;
}

int PushJobChangeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment origin_depart = 1;
    if (has_origin_depart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin_depart());
    }

    // required int32 origin_job = 2;
    if (has_origin_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_job());
    }

    // required .ProtoOfficial.eDepartment target_depart = 3;
    if (has_target_depart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_depart());
    }

    // required int32 target_job = 4;
    if (has_target_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushJobChangeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushJobChangeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushJobChangeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushJobChangeMsg::MergeFrom(const PushJobChangeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin_depart()) {
      set_origin_depart(from.origin_depart());
    }
    if (from.has_origin_job()) {
      set_origin_job(from.origin_job());
    }
    if (from.has_target_depart()) {
      set_target_depart(from.target_depart());
    }
    if (from.has_target_job()) {
      set_target_job(from.target_job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushJobChangeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushJobChangeMsg::CopyFrom(const PushJobChangeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushJobChangeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushJobChangeMsg::Swap(PushJobChangeMsg* other) {
  if (other != this) {
    std::swap(origin_depart_, other->origin_depart_);
    std::swap(origin_job_, other->origin_job_);
    std::swap(target_depart_, other->target_depart_);
    std::swap(target_job_, other->target_job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushJobChangeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushJobChangeMsg_descriptor_;
  metadata.reflection = PushJobChangeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeReq::kDepartmentFieldNumber;
const int ChallengeReq::kOfficialFieldNumber;
#endif  // !_MSC_VER

ChallengeReq::ChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.ChallengeReq)
}

void ChallengeReq::InitAsDefaultInstance() {
}

ChallengeReq::ChallengeReq(const ChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.ChallengeReq)
}

void ChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  official_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeReq::~ChallengeReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.ChallengeReq)
  SharedDtor();
}

void ChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeReq_descriptor_;
}

const ChallengeReq& ChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

ChallengeReq* ChallengeReq::default_instance_ = NULL;

ChallengeReq* ChallengeReq::New() const {
  return new ChallengeReq;
}

void ChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(department_, official_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.ChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_official;
        break;
      }

      // required uint32 official = 2;
      case 2: {
        if (tag == 16) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.ChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.ChallengeReq)
  return false;
#undef DO_
}

void ChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.ChallengeReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 official = 2;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->official(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.ChallengeReq)
}

::google::protobuf::uint8* ChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.ChallengeReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 official = 2;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->official(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.ChallengeReq)
  return target;
}

int ChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 official = 2;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeReq::MergeFrom(const ChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeReq::CopyFrom(const ChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChallengeReq::Swap(ChallengeReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeReq_descriptor_;
  metadata.reflection = ChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeResp::kDepartmentFieldNumber;
const int ChallengeResp::kOfficialFieldNumber;
const int ChallengeResp::kHeroIdsFieldNumber;
const int ChallengeResp::kHeroLvlFieldNumber;
const int ChallengeResp::kHeroTroopsFieldNumber;
#endif  // !_MSC_VER

ChallengeResp::ChallengeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.ChallengeResp)
}

void ChallengeResp::InitAsDefaultInstance() {
}

ChallengeResp::ChallengeResp(const ChallengeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.ChallengeResp)
}

void ChallengeResp::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  official_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeResp::~ChallengeResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.ChallengeResp)
  SharedDtor();
}

void ChallengeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeResp_descriptor_;
}

const ChallengeResp& ChallengeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

ChallengeResp* ChallengeResp::default_instance_ = NULL;

ChallengeResp* ChallengeResp::New() const {
  return new ChallengeResp;
}

void ChallengeResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChallengeResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(department_, official_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_ids_.Clear();
  hero_lvl_.Clear();
  hero_troops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.ChallengeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_official;
        break;
      }

      // required uint32 official = 2;
      case 2: {
        if (tag == 16) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_ids;
        break;
      }

      // repeated uint32 hero_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hero_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_ids;
        if (input->ExpectTag(32)) goto parse_hero_lvl;
        break;
      }

      // repeated uint32 hero_lvl = 4;
      case 4: {
        if (tag == 32) {
         parse_hero_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_hero_lvl())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_lvl())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hero_lvl;
        if (input->ExpectTag(40)) goto parse_hero_troops;
        break;
      }

      // repeated uint32 hero_troops = 5;
      case 5: {
        if (tag == 40) {
         parse_hero_troops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hero_troops())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_troops())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hero_troops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.ChallengeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.ChallengeResp)
  return false;
#undef DO_
}

void ChallengeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.ChallengeResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 official = 2;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->official(), output);
  }

  // repeated uint32 hero_ids = 3;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hero_ids(i), output);
  }

  // repeated uint32 hero_lvl = 4;
  for (int i = 0; i < this->hero_lvl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->hero_lvl(i), output);
  }

  // repeated uint32 hero_troops = 5;
  for (int i = 0; i < this->hero_troops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hero_troops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.ChallengeResp)
}

::google::protobuf::uint8* ChallengeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.ChallengeResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 official = 2;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->official(), target);
  }

  // repeated uint32 hero_ids = 3;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hero_ids(i), target);
  }

  // repeated uint32 hero_lvl = 4;
  for (int i = 0; i < this->hero_lvl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->hero_lvl(i), target);
  }

  // repeated uint32 hero_troops = 5;
  for (int i = 0; i < this->hero_troops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hero_troops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.ChallengeResp)
  return target;
}

int ChallengeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 official = 2;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

  }
  // repeated uint32 hero_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  // repeated uint32 hero_lvl = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_lvl_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_lvl(i));
    }
    total_size += 1 * this->hero_lvl_size() + data_size;
  }

  // repeated uint32 hero_troops = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_troops_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_troops(i));
    }
    total_size += 1 * this->hero_troops_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeResp::MergeFrom(const ChallengeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  hero_lvl_.MergeFrom(from.hero_lvl_);
  hero_troops_.MergeFrom(from.hero_troops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeResp::CopyFrom(const ChallengeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChallengeResp::Swap(ChallengeResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    hero_ids_.Swap(&other->hero_ids_);
    hero_lvl_.Swap(&other->hero_lvl_);
    hero_troops_.Swap(&other->hero_troops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeResp_descriptor_;
  metadata.reflection = ChallengeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartChallengeReq::kDepartmentFieldNumber;
const int StartChallengeReq::kOfficialFieldNumber;
const int StartChallengeReq::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

StartChallengeReq::StartChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.StartChallengeReq)
}

void StartChallengeReq::InitAsDefaultInstance() {
}

StartChallengeReq::StartChallengeReq(const StartChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.StartChallengeReq)
}

void StartChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  official_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartChallengeReq::~StartChallengeReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.StartChallengeReq)
  SharedDtor();
}

void StartChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartChallengeReq_descriptor_;
}

const StartChallengeReq& StartChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

StartChallengeReq* StartChallengeReq::default_instance_ = NULL;

StartChallengeReq* StartChallengeReq::New() const {
  return new StartChallengeReq;
}

void StartChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(department_, official_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.StartChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_official;
        break;
      }

      // required uint32 official = 2;
      case 2: {
        if (tag == 16) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_ids;
        break;
      }

      // repeated uint32 hero_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hero_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.StartChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.StartChallengeReq)
  return false;
#undef DO_
}

void StartChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.StartChallengeReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 official = 2;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->official(), output);
  }

  // repeated uint32 hero_ids = 3;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hero_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.StartChallengeReq)
}

::google::protobuf::uint8* StartChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.StartChallengeReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 official = 2;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->official(), target);
  }

  // repeated uint32 hero_ids = 3;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hero_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.StartChallengeReq)
  return target;
}

int StartChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 official = 2;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

  }
  // repeated uint32 hero_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartChallengeReq::MergeFrom(const StartChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartChallengeReq::CopyFrom(const StartChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartChallengeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartChallengeReq::Swap(StartChallengeReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartChallengeReq_descriptor_;
  metadata.reflection = StartChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppointDeputyReq::kDepartmentFieldNumber;
const int AppointDeputyReq::kUidFieldNumber;
#endif  // !_MSC_VER

AppointDeputyReq::AppointDeputyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.AppointDeputyReq)
}

void AppointDeputyReq::InitAsDefaultInstance() {
}

AppointDeputyReq::AppointDeputyReq(const AppointDeputyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.AppointDeputyReq)
}

void AppointDeputyReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppointDeputyReq::~AppointDeputyReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.AppointDeputyReq)
  SharedDtor();
}

void AppointDeputyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppointDeputyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppointDeputyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppointDeputyReq_descriptor_;
}

const AppointDeputyReq& AppointDeputyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

AppointDeputyReq* AppointDeputyReq::default_instance_ = NULL;

AppointDeputyReq* AppointDeputyReq::New() const {
  return new AppointDeputyReq;
}

void AppointDeputyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppointDeputyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(department_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppointDeputyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.AppointDeputyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.AppointDeputyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.AppointDeputyReq)
  return false;
#undef DO_
}

void AppointDeputyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.AppointDeputyReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.AppointDeputyReq)
}

::google::protobuf::uint8* AppointDeputyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.AppointDeputyReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.AppointDeputyReq)
  return target;
}

int AppointDeputyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppointDeputyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppointDeputyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppointDeputyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppointDeputyReq::MergeFrom(const AppointDeputyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppointDeputyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppointDeputyReq::CopyFrom(const AppointDeputyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppointDeputyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppointDeputyReq::Swap(AppointDeputyReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppointDeputyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppointDeputyReq_descriptor_;
  metadata.reflection = AppointDeputyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppointDeputyResp::kDepartmentFieldNumber;
const int AppointDeputyResp::kUidFieldNumber;
const int AppointDeputyResp::kOriginFieldNumber;
const int AppointDeputyResp::kTargetFieldNumber;
const int AppointDeputyResp::kNameFieldNumber;
const int AppointDeputyResp::kMembersFieldNumber;
const int AppointDeputyResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

AppointDeputyResp::AppointDeputyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.AppointDeputyResp)
}

void AppointDeputyResp::InitAsDefaultInstance() {
}

AppointDeputyResp::AppointDeputyResp(const AppointDeputyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.AppointDeputyResp)
}

void AppointDeputyResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  department_ = 0;
  uid_ = 0u;
  origin_ = 0u;
  target_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppointDeputyResp::~AppointDeputyResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.AppointDeputyResp)
  SharedDtor();
}

void AppointDeputyResp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AppointDeputyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppointDeputyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppointDeputyResp_descriptor_;
}

const AppointDeputyResp& AppointDeputyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

AppointDeputyResp* AppointDeputyResp::default_instance_ = NULL;

AppointDeputyResp* AppointDeputyResp::New() const {
  return new AppointDeputyResp;
}

void AppointDeputyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppointDeputyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(department_, target_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppointDeputyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.AppointDeputyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_origin;
        break;
      }

      // required uint32 origin = 3;
      case 3: {
        if (tag == 24) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // required uint32 target = 4;
      case 4: {
        if (tag == 32) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_members;
        break;
      }

      // repeated .ProtoOfficial.DepartmentMember members = 6;
      case 6: {
        if (tag == 50) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_members;
        if (input->ExpectTag(58)) goto parse_records;
        break;
      }

      // repeated .ProtoOfficial.DepartmentRecord records = 7;
      case 7: {
        if (tag == 58) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.AppointDeputyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.AppointDeputyResp)
  return false;
#undef DO_
}

void AppointDeputyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.AppointDeputyResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->origin(), output);
  }

  // required uint32 target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->members(i), output);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 7;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.AppointDeputyResp)
}

::google::protobuf::uint8* AppointDeputyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.AppointDeputyResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->origin(), target);
  }

  // required uint32 target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->members(i), target);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 7;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.AppointDeputyResp)
  return target;
}

int AppointDeputyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

    // required uint32 target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .ProtoOfficial.DepartmentMember members = 6;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 7;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppointDeputyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppointDeputyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppointDeputyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppointDeputyResp::MergeFrom(const AppointDeputyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppointDeputyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppointDeputyResp::CopyFrom(const AppointDeputyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppointDeputyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void AppointDeputyResp::Swap(AppointDeputyResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(uid_, other->uid_);
    std::swap(origin_, other->origin_);
    std::swap(target_, other->target_);
    std::swap(name_, other->name_);
    members_.Swap(&other->members_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppointDeputyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppointDeputyResp_descriptor_;
  metadata.reflection = AppointDeputyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

ApplyJoinReq::ApplyJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.ApplyJoinReq)
}

void ApplyJoinReq::InitAsDefaultInstance() {
}

ApplyJoinReq::ApplyJoinReq(const ApplyJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.ApplyJoinReq)
}

void ApplyJoinReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinReq::~ApplyJoinReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.ApplyJoinReq)
  SharedDtor();
}

void ApplyJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinReq_descriptor_;
}

const ApplyJoinReq& ApplyJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

ApplyJoinReq* ApplyJoinReq::default_instance_ = NULL;

ApplyJoinReq* ApplyJoinReq::New() const {
  return new ApplyJoinReq;
}

void ApplyJoinReq::Clear() {
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.ApplyJoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.ApplyJoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.ApplyJoinReq)
  return false;
#undef DO_
}

void ApplyJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.ApplyJoinReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.ApplyJoinReq)
}

::google::protobuf::uint8* ApplyJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.ApplyJoinReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.ApplyJoinReq)
  return target;
}

int ApplyJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinReq::MergeFrom(const ApplyJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinReq::CopyFrom(const ApplyJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyJoinReq::Swap(ApplyJoinReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinReq_descriptor_;
  metadata.reflection = ApplyJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinResp::kDepartmentFieldNumber;
const int ApplyJoinResp::kMembersFieldNumber;
const int ApplyJoinResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

ApplyJoinResp::ApplyJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.ApplyJoinResp)
}

void ApplyJoinResp::InitAsDefaultInstance() {
}

ApplyJoinResp::ApplyJoinResp(const ApplyJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.ApplyJoinResp)
}

void ApplyJoinResp::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinResp::~ApplyJoinResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.ApplyJoinResp)
  SharedDtor();
}

void ApplyJoinResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinResp_descriptor_;
}

const ApplyJoinResp& ApplyJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

ApplyJoinResp* ApplyJoinResp::default_instance_ = NULL;

ApplyJoinResp* ApplyJoinResp::New() const {
  return new ApplyJoinResp;
}

void ApplyJoinResp::Clear() {
  department_ = 0;
  members_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.ApplyJoinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .ProtoOfficial.DepartmentMember members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .ProtoOfficial.DepartmentRecord records = 3;
      case 3: {
        if (tag == 26) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.ApplyJoinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.ApplyJoinResp)
  return false;
#undef DO_
}

void ApplyJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.ApplyJoinResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.ApplyJoinResp)
}

::google::protobuf::uint8* ApplyJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.ApplyJoinResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.ApplyJoinResp)
  return target;
}

int ApplyJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  // repeated .ProtoOfficial.DepartmentMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinResp::MergeFrom(const ApplyJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinResp::CopyFrom(const ApplyJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void ApplyJoinResp::Swap(ApplyJoinResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    members_.Swap(&other->members_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinResp_descriptor_;
  metadata.reflection = ApplyJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyExitReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

ApplyExitReq::ApplyExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.ApplyExitReq)
}

void ApplyExitReq::InitAsDefaultInstance() {
}

ApplyExitReq::ApplyExitReq(const ApplyExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.ApplyExitReq)
}

void ApplyExitReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyExitReq::~ApplyExitReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.ApplyExitReq)
  SharedDtor();
}

void ApplyExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyExitReq_descriptor_;
}

const ApplyExitReq& ApplyExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

ApplyExitReq* ApplyExitReq::default_instance_ = NULL;

ApplyExitReq* ApplyExitReq::New() const {
  return new ApplyExitReq;
}

void ApplyExitReq::Clear() {
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.ApplyExitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.ApplyExitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.ApplyExitReq)
  return false;
#undef DO_
}

void ApplyExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.ApplyExitReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.ApplyExitReq)
}

::google::protobuf::uint8* ApplyExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.ApplyExitReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.ApplyExitReq)
  return target;
}

int ApplyExitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyExitReq::MergeFrom(const ApplyExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyExitReq::CopyFrom(const ApplyExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyExitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyExitReq::Swap(ApplyExitReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyExitReq_descriptor_;
  metadata.reflection = ApplyExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyExitResp::kDepartmentFieldNumber;
const int ApplyExitResp::kOfficialFieldNumber;
const int ApplyExitResp::kPrestigeFieldNumber;
const int ApplyExitResp::kMembersFieldNumber;
#endif  // !_MSC_VER

ApplyExitResp::ApplyExitResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.ApplyExitResp)
}

void ApplyExitResp::InitAsDefaultInstance() {
}

ApplyExitResp::ApplyExitResp(const ApplyExitResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.ApplyExitResp)
}

void ApplyExitResp::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  official_ = 0u;
  prestige_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyExitResp::~ApplyExitResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.ApplyExitResp)
  SharedDtor();
}

void ApplyExitResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyExitResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyExitResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyExitResp_descriptor_;
}

const ApplyExitResp& ApplyExitResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

ApplyExitResp* ApplyExitResp::default_instance_ = NULL;

ApplyExitResp* ApplyExitResp::New() const {
  return new ApplyExitResp;
}

void ApplyExitResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApplyExitResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(department_, official_);
    prestige_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyExitResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.ApplyExitResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_official;
        break;
      }

      // required uint32 official = 2;
      case 2: {
        if (tag == 16) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prestige;
        break;
      }

      // required uint32 prestige = 3;
      case 3: {
        if (tag == 24) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .ProtoOfficial.DepartmentMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.ApplyExitResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.ApplyExitResp)
  return false;
#undef DO_
}

void ApplyExitResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.ApplyExitResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required uint32 official = 2;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->official(), output);
  }

  // required uint32 prestige = 3;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prestige(), output);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.ApplyExitResp)
}

::google::protobuf::uint8* ApplyExitResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.ApplyExitResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required uint32 official = 2;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->official(), target);
  }

  // required uint32 prestige = 3;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prestige(), target);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.ApplyExitResp)
  return target;
}

int ApplyExitResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required uint32 official = 2;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official());
    }

    // required uint32 prestige = 3;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

  }
  // repeated .ProtoOfficial.DepartmentMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyExitResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyExitResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyExitResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyExitResp::MergeFrom(const ApplyExitResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyExitResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyExitResp::CopyFrom(const ApplyExitResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyExitResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void ApplyExitResp::Swap(ApplyExitResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(official_, other->official_);
    std::swap(prestige_, other->prestige_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyExitResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyExitResp_descriptor_;
  metadata.reflection = ApplyExitResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgreeJoinReq::kUidFieldNumber;
const int AgreeJoinReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

AgreeJoinReq::AgreeJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.AgreeJoinReq)
}

void AgreeJoinReq::InitAsDefaultInstance() {
}

AgreeJoinReq::AgreeJoinReq(const AgreeJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.AgreeJoinReq)
}

void AgreeJoinReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeJoinReq::~AgreeJoinReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.AgreeJoinReq)
  SharedDtor();
}

void AgreeJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgreeJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgreeJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgreeJoinReq_descriptor_;
}

const AgreeJoinReq& AgreeJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

AgreeJoinReq* AgreeJoinReq::default_instance_ = NULL;

AgreeJoinReq* AgreeJoinReq::New() const {
  return new AgreeJoinReq;
}

void AgreeJoinReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AgreeJoinReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, department_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgreeJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.AgreeJoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 2;
      case 2: {
        if (tag == 16) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.AgreeJoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.AgreeJoinReq)
  return false;
#undef DO_
}

void AgreeJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.AgreeJoinReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.AgreeJoinReq)
}

::google::protobuf::uint8* AgreeJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.AgreeJoinReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.AgreeJoinReq)
  return target;
}

int AgreeJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required .ProtoOfficial.eDepartment department = 2;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgreeJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgreeJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgreeJoinReq::MergeFrom(const AgreeJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgreeJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgreeJoinReq::CopyFrom(const AgreeJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreeJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AgreeJoinReq::Swap(AgreeJoinReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgreeJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgreeJoinReq_descriptor_;
  metadata.reflection = AgreeJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgreeJoinResp::kDepartmentFieldNumber;
const int AgreeJoinResp::kMembersFieldNumber;
const int AgreeJoinResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

AgreeJoinResp::AgreeJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.AgreeJoinResp)
}

void AgreeJoinResp::InitAsDefaultInstance() {
}

AgreeJoinResp::AgreeJoinResp(const AgreeJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.AgreeJoinResp)
}

void AgreeJoinResp::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeJoinResp::~AgreeJoinResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.AgreeJoinResp)
  SharedDtor();
}

void AgreeJoinResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgreeJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgreeJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgreeJoinResp_descriptor_;
}

const AgreeJoinResp& AgreeJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

AgreeJoinResp* AgreeJoinResp::default_instance_ = NULL;

AgreeJoinResp* AgreeJoinResp::New() const {
  return new AgreeJoinResp;
}

void AgreeJoinResp::Clear() {
  department_ = 0;
  members_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgreeJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.AgreeJoinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .ProtoOfficial.DepartmentMember members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .ProtoOfficial.DepartmentRecord records = 3;
      case 3: {
        if (tag == 26) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.AgreeJoinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.AgreeJoinResp)
  return false;
#undef DO_
}

void AgreeJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.AgreeJoinResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.AgreeJoinResp)
}

::google::protobuf::uint8* AgreeJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.AgreeJoinResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.AgreeJoinResp)
  return target;
}

int AgreeJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  // repeated .ProtoOfficial.DepartmentMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgreeJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgreeJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgreeJoinResp::MergeFrom(const AgreeJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgreeJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgreeJoinResp::CopyFrom(const AgreeJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreeJoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void AgreeJoinResp::Swap(AgreeJoinResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    members_.Swap(&other->members_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgreeJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgreeJoinResp_descriptor_;
  metadata.reflection = AgreeJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefuseJoinReq::kUidFieldNumber;
const int RefuseJoinReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

RefuseJoinReq::RefuseJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.RefuseJoinReq)
}

void RefuseJoinReq::InitAsDefaultInstance() {
}

RefuseJoinReq::RefuseJoinReq(const RefuseJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.RefuseJoinReq)
}

void RefuseJoinReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefuseJoinReq::~RefuseJoinReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.RefuseJoinReq)
  SharedDtor();
}

void RefuseJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefuseJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefuseJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefuseJoinReq_descriptor_;
}

const RefuseJoinReq& RefuseJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

RefuseJoinReq* RefuseJoinReq::default_instance_ = NULL;

RefuseJoinReq* RefuseJoinReq::New() const {
  return new RefuseJoinReq;
}

void RefuseJoinReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RefuseJoinReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, department_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefuseJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.RefuseJoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 2;
      case 2: {
        if (tag == 16) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.RefuseJoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.RefuseJoinReq)
  return false;
#undef DO_
}

void RefuseJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.RefuseJoinReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.RefuseJoinReq)
}

::google::protobuf::uint8* RefuseJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.RefuseJoinReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.RefuseJoinReq)
  return target;
}

int RefuseJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required .ProtoOfficial.eDepartment department = 2;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefuseJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefuseJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefuseJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefuseJoinReq::MergeFrom(const RefuseJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefuseJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefuseJoinReq::CopyFrom(const RefuseJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefuseJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RefuseJoinReq::Swap(RefuseJoinReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefuseJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefuseJoinReq_descriptor_;
  metadata.reflection = RefuseJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefuseJoinResp::kDepartmentFieldNumber;
const int RefuseJoinResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

RefuseJoinResp::RefuseJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.RefuseJoinResp)
}

void RefuseJoinResp::InitAsDefaultInstance() {
}

RefuseJoinResp::RefuseJoinResp(const RefuseJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.RefuseJoinResp)
}

void RefuseJoinResp::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefuseJoinResp::~RefuseJoinResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.RefuseJoinResp)
  SharedDtor();
}

void RefuseJoinResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefuseJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefuseJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefuseJoinResp_descriptor_;
}

const RefuseJoinResp& RefuseJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

RefuseJoinResp* RefuseJoinResp::default_instance_ = NULL;

RefuseJoinResp* RefuseJoinResp::New() const {
  return new RefuseJoinResp;
}

void RefuseJoinResp::Clear() {
  department_ = 0;
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefuseJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.RefuseJoinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_records;
        break;
      }

      // repeated .ProtoOfficial.DepartmentRecord records = 2;
      case 2: {
        if (tag == 18) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.RefuseJoinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.RefuseJoinResp)
  return false;
#undef DO_
}

void RefuseJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.RefuseJoinResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.RefuseJoinResp)
}

::google::protobuf::uint8* RefuseJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.RefuseJoinResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.RefuseJoinResp)
  return target;
}

int RefuseJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  // repeated .ProtoOfficial.DepartmentRecord records = 2;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefuseJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefuseJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefuseJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefuseJoinResp::MergeFrom(const RefuseJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefuseJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefuseJoinResp::CopyFrom(const RefuseJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefuseJoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void RefuseJoinResp::Swap(RefuseJoinResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefuseJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefuseJoinResp_descriptor_;
  metadata.reflection = RefuseJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetNoticeReq::kDepartmentFieldNumber;
const int SetNoticeReq::kTextFieldNumber;
#endif  // !_MSC_VER

SetNoticeReq::SetNoticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.SetNoticeReq)
}

void SetNoticeReq::InitAsDefaultInstance() {
}

SetNoticeReq::SetNoticeReq(const SetNoticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.SetNoticeReq)
}

void SetNoticeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  department_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetNoticeReq::~SetNoticeReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.SetNoticeReq)
  SharedDtor();
}

void SetNoticeReq::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void SetNoticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNoticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetNoticeReq_descriptor_;
}

const SetNoticeReq& SetNoticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

SetNoticeReq* SetNoticeReq::default_instance_ = NULL;

SetNoticeReq* SetNoticeReq::New() const {
  return new SetNoticeReq;
}

void SetNoticeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    department_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetNoticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.SetNoticeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required bytes text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.SetNoticeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.SetNoticeReq)
  return false;
#undef DO_
}

void SetNoticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.SetNoticeReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // required bytes text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.SetNoticeReq)
}

::google::protobuf::uint8* SetNoticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.SetNoticeReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // required bytes text = 2;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.SetNoticeReq)
  return target;
}

int SetNoticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

    // required bytes text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNoticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetNoticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetNoticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetNoticeReq::MergeFrom(const SetNoticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetNoticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNoticeReq::CopyFrom(const SetNoticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNoticeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetNoticeReq::Swap(SetNoticeReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetNoticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetNoticeReq_descriptor_;
  metadata.reflection = SetNoticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSalaryReq::GetSalaryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetSalaryReq)
}

void GetSalaryReq::InitAsDefaultInstance() {
}

GetSalaryReq::GetSalaryReq(const GetSalaryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetSalaryReq)
}

void GetSalaryReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSalaryReq::~GetSalaryReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetSalaryReq)
  SharedDtor();
}

void GetSalaryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSalaryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSalaryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSalaryReq_descriptor_;
}

const GetSalaryReq& GetSalaryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetSalaryReq* GetSalaryReq::default_instance_ = NULL;

GetSalaryReq* GetSalaryReq::New() const {
  return new GetSalaryReq;
}

void GetSalaryReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSalaryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetSalaryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetSalaryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetSalaryReq)
  return false;
#undef DO_
}

void GetSalaryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetSalaryReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetSalaryReq)
}

::google::protobuf::uint8* GetSalaryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetSalaryReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetSalaryReq)
  return target;
}

int GetSalaryReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSalaryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSalaryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSalaryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSalaryReq::MergeFrom(const GetSalaryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSalaryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSalaryReq::CopyFrom(const GetSalaryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSalaryReq::IsInitialized() const {

  return true;
}

void GetSalaryReq::Swap(GetSalaryReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSalaryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSalaryReq_descriptor_;
  metadata.reflection = GetSalaryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSalaryResp::kSalaryFieldNumber;
const int GetSalaryResp::kCoinsFieldNumber;
const int GetSalaryResp::kJobRewardTsFieldNumber;
#endif  // !_MSC_VER

GetSalaryResp::GetSalaryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetSalaryResp)
}

void GetSalaryResp::InitAsDefaultInstance() {
}

GetSalaryResp::GetSalaryResp(const GetSalaryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetSalaryResp)
}

void GetSalaryResp::SharedCtor() {
  _cached_size_ = 0;
  salary_ = 0u;
  coins_ = 0u;
  job_reward_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSalaryResp::~GetSalaryResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetSalaryResp)
  SharedDtor();
}

void GetSalaryResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSalaryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSalaryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSalaryResp_descriptor_;
}

const GetSalaryResp& GetSalaryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetSalaryResp* GetSalaryResp::default_instance_ = NULL;

GetSalaryResp* GetSalaryResp::New() const {
  return new GetSalaryResp;
}

void GetSalaryResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetSalaryResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(salary_, job_reward_ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSalaryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetSalaryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 salary = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &salary_)));
          set_has_salary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coins;
        break;
      }

      // required uint32 coins = 2;
      case 2: {
        if (tag == 16) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_job_reward_ts;
        break;
      }

      // required uint32 job_reward_ts = 3;
      case 3: {
        if (tag == 24) {
         parse_job_reward_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_reward_ts_)));
          set_has_job_reward_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetSalaryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetSalaryResp)
  return false;
#undef DO_
}

void GetSalaryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetSalaryResp)
  // required uint32 salary = 1;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->salary(), output);
  }

  // required uint32 coins = 2;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coins(), output);
  }

  // required uint32 job_reward_ts = 3;
  if (has_job_reward_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job_reward_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetSalaryResp)
}

::google::protobuf::uint8* GetSalaryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetSalaryResp)
  // required uint32 salary = 1;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->salary(), target);
  }

  // required uint32 coins = 2;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coins(), target);
  }

  // required uint32 job_reward_ts = 3;
  if (has_job_reward_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job_reward_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetSalaryResp)
  return target;
}

int GetSalaryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 salary = 1;
    if (has_salary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->salary());
    }

    // required uint32 coins = 2;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coins());
    }

    // required uint32 job_reward_ts = 3;
    if (has_job_reward_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_reward_ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSalaryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSalaryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSalaryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSalaryResp::MergeFrom(const GetSalaryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salary()) {
      set_salary(from.salary());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_job_reward_ts()) {
      set_job_reward_ts(from.job_reward_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSalaryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSalaryResp::CopyFrom(const GetSalaryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSalaryResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetSalaryResp::Swap(GetSalaryResp* other) {
  if (other != this) {
    std::swap(salary_, other->salary_);
    std::swap(coins_, other->coins_);
    std::swap(job_reward_ts_, other->job_reward_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSalaryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSalaryResp_descriptor_;
  metadata.reflection = GetSalaryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDepartmentRecordReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

GetDepartmentRecordReq::GetDepartmentRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetDepartmentRecordReq)
}

void GetDepartmentRecordReq::InitAsDefaultInstance() {
}

GetDepartmentRecordReq::GetDepartmentRecordReq(const GetDepartmentRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetDepartmentRecordReq)
}

void GetDepartmentRecordReq::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDepartmentRecordReq::~GetDepartmentRecordReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetDepartmentRecordReq)
  SharedDtor();
}

void GetDepartmentRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDepartmentRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDepartmentRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDepartmentRecordReq_descriptor_;
}

const GetDepartmentRecordReq& GetDepartmentRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetDepartmentRecordReq* GetDepartmentRecordReq::default_instance_ = NULL;

GetDepartmentRecordReq* GetDepartmentRecordReq::New() const {
  return new GetDepartmentRecordReq;
}

void GetDepartmentRecordReq::Clear() {
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDepartmentRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetDepartmentRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetDepartmentRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetDepartmentRecordReq)
  return false;
#undef DO_
}

void GetDepartmentRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetDepartmentRecordReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetDepartmentRecordReq)
}

::google::protobuf::uint8* GetDepartmentRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetDepartmentRecordReq)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetDepartmentRecordReq)
  return target;
}

int GetDepartmentRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDepartmentRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDepartmentRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDepartmentRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDepartmentRecordReq::MergeFrom(const GetDepartmentRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDepartmentRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDepartmentRecordReq::CopyFrom(const GetDepartmentRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDepartmentRecordReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDepartmentRecordReq::Swap(GetDepartmentRecordReq* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDepartmentRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDepartmentRecordReq_descriptor_;
  metadata.reflection = GetDepartmentRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDepartmentRecordResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

GetDepartmentRecordResp::GetDepartmentRecordResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetDepartmentRecordResp)
}

void GetDepartmentRecordResp::InitAsDefaultInstance() {
}

GetDepartmentRecordResp::GetDepartmentRecordResp(const GetDepartmentRecordResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetDepartmentRecordResp)
}

void GetDepartmentRecordResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDepartmentRecordResp::~GetDepartmentRecordResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetDepartmentRecordResp)
  SharedDtor();
}

void GetDepartmentRecordResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDepartmentRecordResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDepartmentRecordResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDepartmentRecordResp_descriptor_;
}

const GetDepartmentRecordResp& GetDepartmentRecordResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetDepartmentRecordResp* GetDepartmentRecordResp::default_instance_ = NULL;

GetDepartmentRecordResp* GetDepartmentRecordResp::New() const {
  return new GetDepartmentRecordResp;
}

void GetDepartmentRecordResp::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDepartmentRecordResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetDepartmentRecordResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOfficial.DepartmentRecord records = 1;
      case 1: {
        if (tag == 10) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetDepartmentRecordResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetDepartmentRecordResp)
  return false;
#undef DO_
}

void GetDepartmentRecordResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetDepartmentRecordResp)
  // repeated .ProtoOfficial.DepartmentRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetDepartmentRecordResp)
}

::google::protobuf::uint8* GetDepartmentRecordResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetDepartmentRecordResp)
  // repeated .ProtoOfficial.DepartmentRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetDepartmentRecordResp)
  return target;
}

int GetDepartmentRecordResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoOfficial.DepartmentRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDepartmentRecordResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDepartmentRecordResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDepartmentRecordResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDepartmentRecordResp::MergeFrom(const GetDepartmentRecordResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDepartmentRecordResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDepartmentRecordResp::CopyFrom(const GetDepartmentRecordResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDepartmentRecordResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void GetDepartmentRecordResp::Swap(GetDepartmentRecordResp* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDepartmentRecordResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDepartmentRecordResp_descriptor_;
  metadata.reflection = GetDepartmentRecordResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishTokenReq::kCityIdFieldNumber;
const int PublishTokenReq::kTextFieldNumber;
const int PublishTokenReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

PublishTokenReq::PublishTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.PublishTokenReq)
}

void PublishTokenReq::InitAsDefaultInstance() {
}

PublishTokenReq::PublishTokenReq(const PublishTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.PublishTokenReq)
}

void PublishTokenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  city_id_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishTokenReq::~PublishTokenReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.PublishTokenReq)
  SharedDtor();
}

void PublishTokenReq::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void PublishTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishTokenReq_descriptor_;
}

const PublishTokenReq& PublishTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

PublishTokenReq* PublishTokenReq::default_instance_ = NULL;

PublishTokenReq* PublishTokenReq::New() const {
  return new PublishTokenReq;
}

void PublishTokenReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PublishTokenReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(city_id_, department_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.PublishTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required bytes text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 3;
      case 3: {
        if (tag == 24) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.PublishTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.PublishTokenReq)
  return false;
#undef DO_
}

void PublishTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.PublishTokenReq)
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // required bytes text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->text(), output);
  }

  // required .ProtoOfficial.eDepartment department = 3;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.PublishTokenReq)
}

::google::protobuf::uint8* PublishTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.PublishTokenReq)
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // required bytes text = 2;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->text(), target);
  }

  // required .ProtoOfficial.eDepartment department = 3;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.PublishTokenReq)
  return target;
}

int PublishTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // required bytes text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // required .ProtoOfficial.eDepartment department = 3;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishTokenReq::MergeFrom(const PublishTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishTokenReq::CopyFrom(const PublishTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PublishTokenReq::Swap(PublishTokenReq* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(text_, other->text_);
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishTokenReq_descriptor_;
  metadata.reflection = PublishTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushPublishToken::kTokenFieldNumber;
#endif  // !_MSC_VER

PushPublishToken::PushPublishToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.PushPublishToken)
}

void PushPublishToken::InitAsDefaultInstance() {
  token_ = const_cast< ::ProtoOfficial::PublishToken*>(&::ProtoOfficial::PublishToken::default_instance());
}

PushPublishToken::PushPublishToken(const PushPublishToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.PushPublishToken)
}

void PushPublishToken::SharedCtor() {
  _cached_size_ = 0;
  token_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushPublishToken::~PushPublishToken() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.PushPublishToken)
  SharedDtor();
}

void PushPublishToken::SharedDtor() {
  if (this != default_instance_) {
    delete token_;
  }
}

void PushPublishToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushPublishToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushPublishToken_descriptor_;
}

const PushPublishToken& PushPublishToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

PushPublishToken* PushPublishToken::default_instance_ = NULL;

PushPublishToken* PushPublishToken::New() const {
  return new PushPublishToken;
}

void PushPublishToken::Clear() {
  if (has_token()) {
    if (token_ != NULL) token_->::ProtoOfficial::PublishToken::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushPublishToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.PushPublishToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.PublishToken token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.PushPublishToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.PushPublishToken)
  return false;
#undef DO_
}

void PushPublishToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.PushPublishToken)
  // required .ProtoOfficial.PublishToken token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.PushPublishToken)
}

::google::protobuf::uint8* PushPublishToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.PushPublishToken)
  // required .ProtoOfficial.PublishToken token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.PushPublishToken)
  return target;
}

int PushPublishToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.PublishToken token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushPublishToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushPublishToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushPublishToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushPublishToken::MergeFrom(const PushPublishToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      mutable_token()->::ProtoOfficial::PublishToken::MergeFrom(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushPublishToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushPublishToken::CopyFrom(const PushPublishToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPublishToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_token()) {
    if (!this->token().IsInitialized()) return false;
  }
  return true;
}

void PushPublishToken::Swap(PushPublishToken* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushPublishToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushPublishToken_descriptor_;
  metadata.reflection = PushPublishToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondTokenReq::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

RespondTokenReq::RespondTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.RespondTokenReq)
}

void RespondTokenReq::InitAsDefaultInstance() {
}

RespondTokenReq::RespondTokenReq(const RespondTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.RespondTokenReq)
}

void RespondTokenReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondTokenReq::~RespondTokenReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.RespondTokenReq)
  SharedDtor();
}

void RespondTokenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespondTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondTokenReq_descriptor_;
}

const RespondTokenReq& RespondTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

RespondTokenReq* RespondTokenReq::default_instance_ = NULL;

RespondTokenReq* RespondTokenReq::New() const {
  return new RespondTokenReq;
}

void RespondTokenReq::Clear() {
  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.RespondTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hero_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hero_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_hero_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.RespondTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.RespondTokenReq)
  return false;
#undef DO_
}

void RespondTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.RespondTokenReq)
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hero_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.RespondTokenReq)
}

::google::protobuf::uint8* RespondTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.RespondTokenReq)
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hero_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.RespondTokenReq)
  return target;
}

int RespondTokenReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 hero_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondTokenReq::MergeFrom(const RespondTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondTokenReq::CopyFrom(const RespondTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondTokenReq::IsInitialized() const {

  return true;
}

void RespondTokenReq::Swap(RespondTokenReq* other) {
  if (other != this) {
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondTokenReq_descriptor_;
  metadata.reflection = RespondTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondTokenResp::kHeroIdsFieldNumber;
const int RespondTokenResp::kTokenTsFieldNumber;
#endif  // !_MSC_VER

RespondTokenResp::RespondTokenResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.RespondTokenResp)
}

void RespondTokenResp::InitAsDefaultInstance() {
}

RespondTokenResp::RespondTokenResp(const RespondTokenResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.RespondTokenResp)
}

void RespondTokenResp::SharedCtor() {
  _cached_size_ = 0;
  token_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondTokenResp::~RespondTokenResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.RespondTokenResp)
  SharedDtor();
}

void RespondTokenResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespondTokenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondTokenResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondTokenResp_descriptor_;
}

const RespondTokenResp& RespondTokenResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

RespondTokenResp* RespondTokenResp::default_instance_ = NULL;

RespondTokenResp* RespondTokenResp::New() const {
  return new RespondTokenResp;
}

void RespondTokenResp::Clear() {
  token_ts_ = 0u;
  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondTokenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.RespondTokenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hero_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hero_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_hero_ids;
        if (input->ExpectTag(16)) goto parse_token_ts;
        break;
      }

      // required uint32 token_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_token_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_ts_)));
          set_has_token_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.RespondTokenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.RespondTokenResp)
  return false;
#undef DO_
}

void RespondTokenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.RespondTokenResp)
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hero_ids(i), output);
  }

  // required uint32 token_ts = 2;
  if (has_token_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->token_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.RespondTokenResp)
}

::google::protobuf::uint8* RespondTokenResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.RespondTokenResp)
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hero_ids(i), target);
  }

  // required uint32 token_ts = 2;
  if (has_token_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->token_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.RespondTokenResp)
  return target;
}

int RespondTokenResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 token_ts = 2;
    if (has_token_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_ts());
    }

  }
  // repeated uint32 hero_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondTokenResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondTokenResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondTokenResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondTokenResp::MergeFrom(const RespondTokenResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_token_ts()) {
      set_token_ts(from.token_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondTokenResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondTokenResp::CopyFrom(const RespondTokenResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondTokenResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RespondTokenResp::Swap(RespondTokenResp* other) {
  if (other != this) {
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(token_ts_, other->token_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondTokenResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondTokenResp_descriptor_;
  metadata.reflection = RespondTokenResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPersonnelRecordReq::GetPersonnelRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetPersonnelRecordReq)
}

void GetPersonnelRecordReq::InitAsDefaultInstance() {
}

GetPersonnelRecordReq::GetPersonnelRecordReq(const GetPersonnelRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetPersonnelRecordReq)
}

void GetPersonnelRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPersonnelRecordReq::~GetPersonnelRecordReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetPersonnelRecordReq)
  SharedDtor();
}

void GetPersonnelRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPersonnelRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonnelRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPersonnelRecordReq_descriptor_;
}

const GetPersonnelRecordReq& GetPersonnelRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetPersonnelRecordReq* GetPersonnelRecordReq::default_instance_ = NULL;

GetPersonnelRecordReq* GetPersonnelRecordReq::New() const {
  return new GetPersonnelRecordReq;
}

void GetPersonnelRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPersonnelRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetPersonnelRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetPersonnelRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetPersonnelRecordReq)
  return false;
#undef DO_
}

void GetPersonnelRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetPersonnelRecordReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetPersonnelRecordReq)
}

::google::protobuf::uint8* GetPersonnelRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetPersonnelRecordReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetPersonnelRecordReq)
  return target;
}

int GetPersonnelRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonnelRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPersonnelRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPersonnelRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPersonnelRecordReq::MergeFrom(const GetPersonnelRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPersonnelRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonnelRecordReq::CopyFrom(const GetPersonnelRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonnelRecordReq::IsInitialized() const {

  return true;
}

void GetPersonnelRecordReq::Swap(GetPersonnelRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPersonnelRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPersonnelRecordReq_descriptor_;
  metadata.reflection = GetPersonnelRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPersonnelRecordResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

GetPersonnelRecordResp::GetPersonnelRecordResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetPersonnelRecordResp)
}

void GetPersonnelRecordResp::InitAsDefaultInstance() {
}

GetPersonnelRecordResp::GetPersonnelRecordResp(const GetPersonnelRecordResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetPersonnelRecordResp)
}

void GetPersonnelRecordResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPersonnelRecordResp::~GetPersonnelRecordResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetPersonnelRecordResp)
  SharedDtor();
}

void GetPersonnelRecordResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPersonnelRecordResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonnelRecordResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPersonnelRecordResp_descriptor_;
}

const GetPersonnelRecordResp& GetPersonnelRecordResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetPersonnelRecordResp* GetPersonnelRecordResp::default_instance_ = NULL;

GetPersonnelRecordResp* GetPersonnelRecordResp::New() const {
  return new GetPersonnelRecordResp;
}

void GetPersonnelRecordResp::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPersonnelRecordResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetPersonnelRecordResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOfficial.PersonnelRecord records = 1;
      case 1: {
        if (tag == 10) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetPersonnelRecordResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetPersonnelRecordResp)
  return false;
#undef DO_
}

void GetPersonnelRecordResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetPersonnelRecordResp)
  // repeated .ProtoOfficial.PersonnelRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetPersonnelRecordResp)
}

::google::protobuf::uint8* GetPersonnelRecordResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetPersonnelRecordResp)
  // repeated .ProtoOfficial.PersonnelRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetPersonnelRecordResp)
  return target;
}

int GetPersonnelRecordResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoOfficial.PersonnelRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonnelRecordResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPersonnelRecordResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPersonnelRecordResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPersonnelRecordResp::MergeFrom(const GetPersonnelRecordResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPersonnelRecordResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonnelRecordResp::CopyFrom(const GetPersonnelRecordResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonnelRecordResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void GetPersonnelRecordResp::Swap(GetPersonnelRecordResp* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPersonnelRecordResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPersonnelRecordResp_descriptor_;
  metadata.reflection = GetPersonnelRecordResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPrivilegeRecordReq::GetPrivilegeRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetPrivilegeRecordReq)
}

void GetPrivilegeRecordReq::InitAsDefaultInstance() {
}

GetPrivilegeRecordReq::GetPrivilegeRecordReq(const GetPrivilegeRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetPrivilegeRecordReq)
}

void GetPrivilegeRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrivilegeRecordReq::~GetPrivilegeRecordReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetPrivilegeRecordReq)
  SharedDtor();
}

void GetPrivilegeRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrivilegeRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrivilegeRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrivilegeRecordReq_descriptor_;
}

const GetPrivilegeRecordReq& GetPrivilegeRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetPrivilegeRecordReq* GetPrivilegeRecordReq::default_instance_ = NULL;

GetPrivilegeRecordReq* GetPrivilegeRecordReq::New() const {
  return new GetPrivilegeRecordReq;
}

void GetPrivilegeRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrivilegeRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetPrivilegeRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetPrivilegeRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetPrivilegeRecordReq)
  return false;
#undef DO_
}

void GetPrivilegeRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetPrivilegeRecordReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetPrivilegeRecordReq)
}

::google::protobuf::uint8* GetPrivilegeRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetPrivilegeRecordReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetPrivilegeRecordReq)
  return target;
}

int GetPrivilegeRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrivilegeRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrivilegeRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrivilegeRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrivilegeRecordReq::MergeFrom(const GetPrivilegeRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrivilegeRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrivilegeRecordReq::CopyFrom(const GetPrivilegeRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrivilegeRecordReq::IsInitialized() const {

  return true;
}

void GetPrivilegeRecordReq::Swap(GetPrivilegeRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrivilegeRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrivilegeRecordReq_descriptor_;
  metadata.reflection = GetPrivilegeRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrivilegeRecordResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

GetPrivilegeRecordResp::GetPrivilegeRecordResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.GetPrivilegeRecordResp)
}

void GetPrivilegeRecordResp::InitAsDefaultInstance() {
}

GetPrivilegeRecordResp::GetPrivilegeRecordResp(const GetPrivilegeRecordResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.GetPrivilegeRecordResp)
}

void GetPrivilegeRecordResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrivilegeRecordResp::~GetPrivilegeRecordResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.GetPrivilegeRecordResp)
  SharedDtor();
}

void GetPrivilegeRecordResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrivilegeRecordResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrivilegeRecordResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrivilegeRecordResp_descriptor_;
}

const GetPrivilegeRecordResp& GetPrivilegeRecordResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

GetPrivilegeRecordResp* GetPrivilegeRecordResp::default_instance_ = NULL;

GetPrivilegeRecordResp* GetPrivilegeRecordResp::New() const {
  return new GetPrivilegeRecordResp;
}

void GetPrivilegeRecordResp::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrivilegeRecordResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.GetPrivilegeRecordResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOfficial.PrivilegeRecord records = 1;
      case 1: {
        if (tag == 10) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.GetPrivilegeRecordResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.GetPrivilegeRecordResp)
  return false;
#undef DO_
}

void GetPrivilegeRecordResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.GetPrivilegeRecordResp)
  // repeated .ProtoOfficial.PrivilegeRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.GetPrivilegeRecordResp)
}

::google::protobuf::uint8* GetPrivilegeRecordResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.GetPrivilegeRecordResp)
  // repeated .ProtoOfficial.PrivilegeRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.GetPrivilegeRecordResp)
  return target;
}

int GetPrivilegeRecordResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoOfficial.PrivilegeRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrivilegeRecordResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrivilegeRecordResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrivilegeRecordResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrivilegeRecordResp::MergeFrom(const GetPrivilegeRecordResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrivilegeRecordResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrivilegeRecordResp::CopyFrom(const GetPrivilegeRecordResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrivilegeRecordResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void GetPrivilegeRecordResp::Swap(GetPrivilegeRecordResp* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrivilegeRecordResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrivilegeRecordResp_descriptor_;
  metadata.reflection = GetPrivilegeRecordResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutMemberReq::kUidFieldNumber;
const int KickOutMemberReq::kDepartmentFieldNumber;
#endif  // !_MSC_VER

KickOutMemberReq::KickOutMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.KickOutMemberReq)
}

void KickOutMemberReq::InitAsDefaultInstance() {
}

KickOutMemberReq::KickOutMemberReq(const KickOutMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.KickOutMemberReq)
}

void KickOutMemberReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutMemberReq::~KickOutMemberReq() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.KickOutMemberReq)
  SharedDtor();
}

void KickOutMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutMemberReq_descriptor_;
}

const KickOutMemberReq& KickOutMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

KickOutMemberReq* KickOutMemberReq::default_instance_ = NULL;

KickOutMemberReq* KickOutMemberReq::New() const {
  return new KickOutMemberReq;
}

void KickOutMemberReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickOutMemberReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, department_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.KickOutMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_department;
        break;
      }

      // required .ProtoOfficial.eDepartment department = 2;
      case 2: {
        if (tag == 16) {
         parse_department:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.KickOutMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.KickOutMemberReq)
  return false;
#undef DO_
}

void KickOutMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.KickOutMemberReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.KickOutMemberReq)
}

::google::protobuf::uint8* KickOutMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.KickOutMemberReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required .ProtoOfficial.eDepartment department = 2;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.KickOutMemberReq)
  return target;
}

int KickOutMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required .ProtoOfficial.eDepartment department = 2;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutMemberReq::MergeFrom(const KickOutMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutMemberReq::CopyFrom(const KickOutMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KickOutMemberReq::Swap(KickOutMemberReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(department_, other->department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutMemberReq_descriptor_;
  metadata.reflection = KickOutMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutMemberResp::kDepartmentFieldNumber;
const int KickOutMemberResp::kMembersFieldNumber;
const int KickOutMemberResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

KickOutMemberResp::KickOutMemberResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOfficial.KickOutMemberResp)
}

void KickOutMemberResp::InitAsDefaultInstance() {
}

KickOutMemberResp::KickOutMemberResp(const KickOutMemberResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOfficial.KickOutMemberResp)
}

void KickOutMemberResp::SharedCtor() {
  _cached_size_ = 0;
  department_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutMemberResp::~KickOutMemberResp() {
  // @@protoc_insertion_point(destructor:ProtoOfficial.KickOutMemberResp)
  SharedDtor();
}

void KickOutMemberResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutMemberResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutMemberResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutMemberResp_descriptor_;
}

const KickOutMemberResp& KickOutMemberResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOfficial_2eproto();
  return *default_instance_;
}

KickOutMemberResp* KickOutMemberResp::default_instance_ = NULL;

KickOutMemberResp* KickOutMemberResp::New() const {
  return new KickOutMemberResp;
}

void KickOutMemberResp::Clear() {
  department_ = 0;
  members_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutMemberResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOfficial.KickOutMemberResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOfficial.eDepartment department = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOfficial::eDepartment_IsValid(value)) {
            set_department(static_cast< ::ProtoOfficial::eDepartment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .ProtoOfficial.DepartmentMember members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .ProtoOfficial.DepartmentRecord records = 3;
      case 3: {
        if (tag == 26) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOfficial.KickOutMemberResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOfficial.KickOutMemberResp)
  return false;
#undef DO_
}

void KickOutMemberResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOfficial.KickOutMemberResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->department(), output);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOfficial.KickOutMemberResp)
}

::google::protobuf::uint8* KickOutMemberResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOfficial.KickOutMemberResp)
  // required .ProtoOfficial.eDepartment department = 1;
  if (has_department()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->department(), target);
  }

  // repeated .ProtoOfficial.DepartmentMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOfficial.KickOutMemberResp)
  return target;
}

int KickOutMemberResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOfficial.eDepartment department = 1;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->department());
    }

  }
  // repeated .ProtoOfficial.DepartmentMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .ProtoOfficial.DepartmentRecord records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutMemberResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutMemberResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutMemberResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutMemberResp::MergeFrom(const KickOutMemberResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutMemberResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutMemberResp::CopyFrom(const KickOutMemberResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutMemberResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void KickOutMemberResp::Swap(KickOutMemberResp* other) {
  if (other != this) {
    std::swap(department_, other->department_);
    members_.Swap(&other->members_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutMemberResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutMemberResp_descriptor_;
  metadata.reflection = KickOutMemberResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoOfficial

// @@protoc_insertion_point(global_scope)
