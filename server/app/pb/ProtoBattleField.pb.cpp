// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBattleField.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBattleField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBattleField {

namespace {

const ::google::protobuf::Descriptor* Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  City_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* RMIField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RMIField_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetBattleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetBattleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBattleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBattleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyBattleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyBattleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCityKingdom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCityKingdom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyCityKingdom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyCityKingdom_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCityCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCityCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyCityCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyCityCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCityMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCityMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyCityMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyCityMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartCityBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartCityBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCityReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyCityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyCityReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRush_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLadder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLadder_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroUid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroUid_reflection_ = NULL;
const ::google::protobuf::Descriptor* HidUid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HidUid_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Turn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Turn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitRush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitRush_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitLadder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitLadder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillOrShapeCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillOrShapeCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillOrShapeGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillOrShapeGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillOrShapeRush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillOrShapeRush_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillOrShapeLadder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillOrShapeLadder_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartRush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRush_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRush_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVision_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyVision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyVision_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImmediatelyCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImmediatelyCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImmediatelyGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImmediatelyGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImmediatelyRush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImmediatelyRush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImmediatelyLadder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImmediatelyLadder_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendNPCMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendNPCMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHistoryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHistoryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHistoryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHistoryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestKillReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestKillReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyKillReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyKillReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMissionPersonalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMissionPersonalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyMissionPersonalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyMissionPersonalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMissionCountryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMissionCountryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyMissionCountryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyMissionCountryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyFight_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBattleField_2eproto() {
  protobuf_AddDesc_ProtoBattleField_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBattleField.proto");
  GOOGLE_CHECK(file != NULL);
  Hero_descriptor_ = file->message_type(0);
  static const int Hero_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, extraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, gate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, ouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, oid_),
  };
  Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hero_descriptor_,
      Hero::default_instance_,
      Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hero));
  City_descriptor_ = file->message_type(1);
  static const int City_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, name_),
  };
  City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      City_descriptor_,
      City::default_instance_,
      City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(City));
  Mission_descriptor_ = file->message_type(2);
  static const int Mission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m1status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m2status_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  RMIField_descriptor_ = file->message_type(3);
  static const int RMIField_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, is_atuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, forbid_talk_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, forbid_move_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, silk_),
  };
  RMIField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RMIField_descriptor_,
      RMIField::default_instance_,
      RMIField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMIField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RMIField));
  BattleReward_descriptor_ = file->message_type(4);
  static const int BattleReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, rp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, ccd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, ctimes_),
  };
  BattleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleReward_descriptor_,
      BattleReward::default_instance_,
      BattleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleReward));
  Field_descriptor_ = file->message_type(5);
  static const int Field_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, rmi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, reward_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  ResetBattleReward_descriptor_ = file->message_type(6);
  static const int ResetBattleReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleReward, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleReward, r_),
  };
  ResetBattleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetBattleReward_descriptor_,
      ResetBattleReward::default_instance_,
      ResetBattleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetBattleReward));
  RequestBattleReward_descriptor_ = file->message_type(7);
  static const int RequestBattleReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBattleReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBattleReward, cash_),
  };
  RequestBattleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBattleReward_descriptor_,
      RequestBattleReward::default_instance_,
      RequestBattleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBattleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBattleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBattleReward));
  ReplyBattleReward_descriptor_ = file->message_type(8);
  static const int ReplyBattleReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBattleReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBattleReward, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBattleReward, equd_),
  };
  ReplyBattleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyBattleReward_descriptor_,
      ReplyBattleReward::default_instance_,
      ReplyBattleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBattleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBattleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyBattleReward));
  HeroReward_descriptor_ = file->message_type(9);
  static const int HeroReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, hexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, occupy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, kill_),
  };
  HeroReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroReward_descriptor_,
      HeroReward::default_instance_,
      HeroReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroReward));
  ItemReward_descriptor_ = file->message_type(10);
  static const int ItemReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemReward, count_),
  };
  ItemReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemReward_descriptor_,
      ItemReward::default_instance_,
      ItemReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemReward));
  UserReward_descriptor_ = file->message_type(11);
  static const int UserReward_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, hexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, bkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, item_),
  };
  UserReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserReward_descriptor_,
      UserReward::default_instance_,
      UserReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserReward));
  MissionState_descriptor_ = file->message_type(12);
  static const int MissionState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionState, mission_),
  };
  MissionState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionState_descriptor_,
      MissionState::default_instance_,
      MissionState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionState));
  RequestHero_descriptor_ = file->message_type(13);
  static const int RequestHero_offsets_[1] = {
  };
  RequestHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHero_descriptor_,
      RequestHero::default_instance_,
      RequestHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHero));
  HeroState_descriptor_ = file->message_type(14);
  static const int HeroState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroState, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroState, reward_),
  };
  HeroState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroState_descriptor_,
      HeroState::default_instance_,
      HeroState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroState));
  CityState_descriptor_ = file->message_type(15);
  static const int CityState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityState, city_),
  };
  CityState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityState_descriptor_,
      CityState::default_instance_,
      CityState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityState));
  RequestMove_descriptor_ = file->message_type(16);
  static const int RequestMove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMove, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMove, cids_),
  };
  RequestMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMove_descriptor_,
      RequestMove::default_instance_,
      RequestMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMove));
  ReplyMove_descriptor_ = file->message_type(17);
  static const int ReplyMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMove, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMove, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMove, mts_),
  };
  ReplyMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyMove_descriptor_,
      ReplyMove::default_instance_,
      ReplyMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyMove));
  RequestStop_descriptor_ = file->message_type(18);
  static const int RequestStop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStop, id_),
  };
  RequestStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStop_descriptor_,
      RequestStop::default_instance_,
      RequestStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStop));
  RequestCityKingdom_descriptor_ = file->message_type(19);
  static const int RequestCityKingdom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityKingdom, cid_),
  };
  RequestCityKingdom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCityKingdom_descriptor_,
      RequestCityKingdom::default_instance_,
      RequestCityKingdom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityKingdom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityKingdom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCityKingdom));
  ReplyCityKingdom_descriptor_ = file->message_type(20);
  static const int ReplyCityKingdom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityKingdom, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityKingdom, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityKingdom, fight_),
  };
  ReplyCityKingdom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyCityKingdom_descriptor_,
      ReplyCityKingdom::default_instance_,
      ReplyCityKingdom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityKingdom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityKingdom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyCityKingdom));
  RequestCityCount_descriptor_ = file->message_type(21);
  static const int RequestCityCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityCount, cid_),
  };
  RequestCityCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCityCount_descriptor_,
      RequestCityCount::default_instance_,
      RequestCityCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCityCount));
  ReplyCityCount_descriptor_ = file->message_type(22);
  static const int ReplyCityCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityCount, count_),
  };
  ReplyCityCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyCityCount_descriptor_,
      ReplyCityCount::default_instance_,
      ReplyCityCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyCityCount));
  RequestCityMaster_descriptor_ = file->message_type(23);
  static const int RequestCityMaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityMaster, cid_),
  };
  RequestCityMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCityMaster_descriptor_,
      RequestCityMaster::default_instance_,
      RequestCityMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCityMaster));
  ReplyCityMaster_descriptor_ = file->message_type(24);
  static const int ReplyCityMaster_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, hero_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, hero_troops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, next_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, ccd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, ctimes_),
  };
  ReplyCityMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyCityMaster_descriptor_,
      ReplyCityMaster::default_instance_,
      ReplyCityMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyCityMaster));
  StartCityBattle_descriptor_ = file->message_type(25);
  static const int StartCityBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCityBattle, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCityBattle, hero_),
  };
  StartCityBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartCityBattle_descriptor_,
      StartCityBattle::default_instance_,
      StartCityBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCityBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCityBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartCityBattle));
  RequestCityReward_descriptor_ = file->message_type(26);
  static const int RequestCityReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityReward, cid_),
  };
  RequestCityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCityReward_descriptor_,
      RequestCityReward::default_instance_,
      RequestCityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCityReward));
  ReplyCityReward_descriptor_ = file->message_type(27);
  static const int ReplyCityReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityReward, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityReward, equd_),
  };
  ReplyCityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyCityReward_descriptor_,
      ReplyCityReward::default_instance_,
      ReplyCityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyCityReward));
  RequestCity_descriptor_ = file->message_type(28);
  static const int RequestCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCity, cid_),
  };
  RequestCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCity_descriptor_,
      RequestCity::default_instance_,
      RequestCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCity));
  RequestGate_descriptor_ = file->message_type(29);
  static const int RequestGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGate, uid_),
  };
  RequestGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGate_descriptor_,
      RequestGate::default_instance_,
      RequestGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGate));
  RequestRush_descriptor_ = file->message_type(30);
  static const int RequestRush_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRush, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRush, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRush, eid_),
  };
  RequestRush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRush_descriptor_,
      RequestRush::default_instance_,
      RequestRush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRush));
  RequestLadder_descriptor_ = file->message_type(31);
  static const int RequestLadder_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLadder, uid_),
  };
  RequestLadder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLadder_descriptor_,
      RequestLadder::default_instance_,
      RequestLadder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLadder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLadder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLadder));
  HeroUid_descriptor_ = file->message_type(32);
  static const int HeroUid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUid, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUid, hero_),
  };
  HeroUid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroUid_descriptor_,
      HeroUid::default_instance_,
      HeroUid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroUid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroUid));
  HidUid_descriptor_ = file->message_type(33);
  static const int HidUid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidUid, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidUid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidUid, ouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidUid, oid_),
  };
  HidUid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HidUid_descriptor_,
      HidUid::default_instance_,
      HidUid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidUid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidUid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HidUid));
  UserInfo_descriptor_ = file->message_type(34);
  static const int UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, fig_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  Turn_descriptor_ = file->message_type(35);
  static const int Turn_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, a_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, d_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, att_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, def_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, a_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, d_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, a_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, d_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, nextts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, a_explode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, d_explode_),
  };
  Turn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Turn_descriptor_,
      Turn::default_instance_,
      Turn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Turn));
  ReplyCity_descriptor_ = file->message_type(36);
  static const int ReplyCity_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, nextts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, gate_),
  };
  ReplyCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyCity_descriptor_,
      ReplyCity::default_instance_,
      ReplyCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyCity));
  QuitCity_descriptor_ = file->message_type(37);
  static const int QuitCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitCity, cid_),
  };
  QuitCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitCity_descriptor_,
      QuitCity::default_instance_,
      QuitCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitCity));
  QuitGate_descriptor_ = file->message_type(38);
  static const int QuitGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGate, uid_),
  };
  QuitGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitGate_descriptor_,
      QuitGate::default_instance_,
      QuitGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitGate));
  QuitRush_descriptor_ = file->message_type(39);
  static const int QuitRush_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRush, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRush, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRush, eid_),
  };
  QuitRush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitRush_descriptor_,
      QuitRush::default_instance_,
      QuitRush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitRush));
  QuitLadder_descriptor_ = file->message_type(40);
  static const int QuitLadder_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitLadder, uid_),
  };
  QuitLadder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitLadder_descriptor_,
      QuitLadder::default_instance_,
      QuitLadder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitLadder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitLadder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitLadder));
  RequestList_descriptor_ = file->message_type(41);
  static const int RequestList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestList, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestList, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestList, page_),
  };
  RequestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestList_descriptor_,
      RequestList::default_instance_,
      RequestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestList));
  ReplyList_descriptor_ = file->message_type(42);
  static const int ReplyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyList, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyList, info_),
  };
  ReplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyList_descriptor_,
      ReplyList::default_instance_,
      ReplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyList));
  SkillOrShapeCity_descriptor_ = file->message_type(43);
  static const int SkillOrShapeCity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeCity, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeCity, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeCity, cid_),
  };
  SkillOrShapeCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillOrShapeCity_descriptor_,
      SkillOrShapeCity::default_instance_,
      SkillOrShapeCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillOrShapeCity));
  SkillOrShapeGate_descriptor_ = file->message_type(44);
  static const int SkillOrShapeGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeGate, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeGate, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeGate, uid_),
  };
  SkillOrShapeGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillOrShapeGate_descriptor_,
      SkillOrShapeGate::default_instance_,
      SkillOrShapeGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillOrShapeGate));
  SkillOrShapeRush_descriptor_ = file->message_type(45);
  static const int SkillOrShapeRush_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, eid_),
  };
  SkillOrShapeRush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillOrShapeRush_descriptor_,
      SkillOrShapeRush::default_instance_,
      SkillOrShapeRush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeRush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillOrShapeRush));
  SkillOrShapeLadder_descriptor_ = file->message_type(46);
  static const int SkillOrShapeLadder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeLadder, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeLadder, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeLadder, uid_),
  };
  SkillOrShapeLadder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillOrShapeLadder_descriptor_,
      SkillOrShapeLadder::default_instance_,
      SkillOrShapeLadder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeLadder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOrShapeLadder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillOrShapeLadder));
  BattleOver_descriptor_ = file->message_type(47);
  static const int BattleOver_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleOver, attackerwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleOver, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleOver, gate_),
  };
  BattleOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleOver_descriptor_,
      BattleOver::default_instance_,
      BattleOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleOver));
  StartRush_descriptor_ = file->message_type(48);
  static const int StartRush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRush, cid_),
  };
  StartRush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartRush_descriptor_,
      StartRush::default_instance_,
      StartRush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartRush));
  SendRush_descriptor_ = file->message_type(49);
  static const int SendRush_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRush, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRush, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRush, eid_),
  };
  SendRush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRush_descriptor_,
      SendRush::default_instance_,
      SendRush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRush));
  RequestVision_descriptor_ = file->message_type(50);
  static const int RequestVision_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVision, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVision, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVision, equd_),
  };
  RequestVision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVision_descriptor_,
      RequestVision::default_instance_,
      RequestVision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVision));
  ReplyVision_descriptor_ = file->message_type(51);
  static const int ReplyVision_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyVision, id_),
  };
  ReplyVision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyVision_descriptor_,
      ReplyVision::default_instance_,
      ReplyVision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyVision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyVision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyVision));
  ImmediatelyCity_descriptor_ = file->message_type(52);
  static const int ImmediatelyCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyCity, cid_),
  };
  ImmediatelyCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImmediatelyCity_descriptor_,
      ImmediatelyCity::default_instance_,
      ImmediatelyCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImmediatelyCity));
  ImmediatelyGate_descriptor_ = file->message_type(53);
  static const int ImmediatelyGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyGate, uid_),
  };
  ImmediatelyGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImmediatelyGate_descriptor_,
      ImmediatelyGate::default_instance_,
      ImmediatelyGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImmediatelyGate));
  ImmediatelyRush_descriptor_ = file->message_type(54);
  static const int ImmediatelyRush_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyRush, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyRush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyRush, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyRush, eid_),
  };
  ImmediatelyRush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImmediatelyRush_descriptor_,
      ImmediatelyRush::default_instance_,
      ImmediatelyRush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyRush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyRush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImmediatelyRush));
  ImmediatelyLadder_descriptor_ = file->message_type(55);
  static const int ImmediatelyLadder_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyLadder, uid_),
  };
  ImmediatelyLadder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImmediatelyLadder_descriptor_,
      ImmediatelyLadder::default_instance_,
      ImmediatelyLadder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyLadder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImmediatelyLadder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImmediatelyLadder));
  NPCMove_descriptor_ = file->message_type(56);
  static const int NPCMove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCMove, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCMove, cids_),
  };
  NPCMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCMove_descriptor_,
      NPCMove::default_instance_,
      NPCMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCMove));
  SendNPCMove_descriptor_ = file->message_type(57);
  static const int SendNPCMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNPCMove, move_),
  };
  SendNPCMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendNPCMove_descriptor_,
      SendNPCMove::default_instance_,
      SendNPCMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNPCMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNPCMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendNPCMove));
  RequestRewardInfo_descriptor_ = file->message_type(58);
  static const int RequestRewardInfo_offsets_[1] = {
  };
  RequestRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRewardInfo_descriptor_,
      RequestRewardInfo::default_instance_,
      RequestRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRewardInfo));
  ReplyRewardInfo_descriptor_ = file->message_type(59);
  static const int ReplyRewardInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, occupy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, foccupy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, rush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, rewardb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, mp3_),
  };
  ReplyRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyRewardInfo_descriptor_,
      ReplyRewardInfo::default_instance_,
      ReplyRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyRewardInfo));
  RequestHistoryReward_descriptor_ = file->message_type(60);
  static const int RequestHistoryReward_offsets_[1] = {
  };
  RequestHistoryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHistoryReward_descriptor_,
      RequestHistoryReward::default_instance_,
      RequestHistoryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHistoryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHistoryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHistoryReward));
  ReplyHistoryReward_descriptor_ = file->message_type(61);
  static const int ReplyHistoryReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHistoryReward, rests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHistoryReward, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHistoryReward, iron_),
  };
  ReplyHistoryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHistoryReward_descriptor_,
      ReplyHistoryReward::default_instance_,
      ReplyHistoryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHistoryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHistoryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHistoryReward));
  RequestKillReward_descriptor_ = file->message_type(62);
  static const int RequestKillReward_offsets_[1] = {
  };
  RequestKillReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestKillReward_descriptor_,
      RequestKillReward::default_instance_,
      RequestKillReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKillReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKillReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestKillReward));
  ReplyKillReward_descriptor_ = file->message_type(63);
  static const int ReplyKillReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, exploit_box_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, equips_cnt_),
  };
  ReplyKillReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyKillReward_descriptor_,
      ReplyKillReward::default_instance_,
      ReplyKillReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKillReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyKillReward));
  RequestMissionPersonalReward_descriptor_ = file->message_type(64);
  static const int RequestMissionPersonalReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionPersonalReward, task_no_),
  };
  RequestMissionPersonalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMissionPersonalReward_descriptor_,
      RequestMissionPersonalReward::default_instance_,
      RequestMissionPersonalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionPersonalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionPersonalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMissionPersonalReward));
  ReplyMissionPersonalReward_descriptor_ = file->message_type(65);
  static const int ReplyMissionPersonalReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionPersonalReward, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionPersonalReward, equips_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionPersonalReward, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionPersonalReward, mp_),
  };
  ReplyMissionPersonalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyMissionPersonalReward_descriptor_,
      ReplyMissionPersonalReward::default_instance_,
      ReplyMissionPersonalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionPersonalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionPersonalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyMissionPersonalReward));
  RequestMissionCountryReward_descriptor_ = file->message_type(66);
  static const int RequestMissionCountryReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionCountryReward, task_no_),
  };
  RequestMissionCountryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMissionCountryReward_descriptor_,
      RequestMissionCountryReward::default_instance_,
      RequestMissionCountryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionCountryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionCountryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMissionCountryReward));
  ReplyMissionCountryReward_descriptor_ = file->message_type(67);
  static const int ReplyMissionCountryReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionCountryReward, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionCountryReward, mk_),
  };
  ReplyMissionCountryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyMissionCountryReward_descriptor_,
      ReplyMissionCountryReward::default_instance_,
      ReplyMissionCountryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionCountryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyMissionCountryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyMissionCountryReward));
  RequestAuto_descriptor_ = file->message_type(68);
  static const int RequestAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuto, b_atuo_),
  };
  RequestAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAuto_descriptor_,
      RequestAuto::default_instance_,
      RequestAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAuto));
  RequestFight_descriptor_ = file->message_type(69);
  static const int RequestFight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFight, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFight, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFight, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFight, id_),
  };
  RequestFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFight_descriptor_,
      RequestFight::default_instance_,
      RequestFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFight));
  ReplyFight_descriptor_ = file->message_type(70);
  static const int ReplyFight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFight, turn_),
  };
  ReplyFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyFight_descriptor_,
      ReplyFight::default_instance_,
      ReplyFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyFight));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBattleField_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hero_descriptor_, &Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    City_descriptor_, &City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RMIField_descriptor_, &RMIField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleReward_descriptor_, &BattleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetBattleReward_descriptor_, &ResetBattleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBattleReward_descriptor_, &RequestBattleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyBattleReward_descriptor_, &ReplyBattleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroReward_descriptor_, &HeroReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemReward_descriptor_, &ItemReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserReward_descriptor_, &UserReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionState_descriptor_, &MissionState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHero_descriptor_, &RequestHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroState_descriptor_, &HeroState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityState_descriptor_, &CityState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMove_descriptor_, &RequestMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyMove_descriptor_, &ReplyMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStop_descriptor_, &RequestStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCityKingdom_descriptor_, &RequestCityKingdom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyCityKingdom_descriptor_, &ReplyCityKingdom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCityCount_descriptor_, &RequestCityCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyCityCount_descriptor_, &ReplyCityCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCityMaster_descriptor_, &RequestCityMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyCityMaster_descriptor_, &ReplyCityMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartCityBattle_descriptor_, &StartCityBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCityReward_descriptor_, &RequestCityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyCityReward_descriptor_, &ReplyCityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCity_descriptor_, &RequestCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGate_descriptor_, &RequestGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRush_descriptor_, &RequestRush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLadder_descriptor_, &RequestLadder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroUid_descriptor_, &HeroUid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HidUid_descriptor_, &HidUid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Turn_descriptor_, &Turn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyCity_descriptor_, &ReplyCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitCity_descriptor_, &QuitCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitGate_descriptor_, &QuitGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitRush_descriptor_, &QuitRush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitLadder_descriptor_, &QuitLadder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestList_descriptor_, &RequestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyList_descriptor_, &ReplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillOrShapeCity_descriptor_, &SkillOrShapeCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillOrShapeGate_descriptor_, &SkillOrShapeGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillOrShapeRush_descriptor_, &SkillOrShapeRush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillOrShapeLadder_descriptor_, &SkillOrShapeLadder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleOver_descriptor_, &BattleOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartRush_descriptor_, &StartRush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRush_descriptor_, &SendRush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVision_descriptor_, &RequestVision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyVision_descriptor_, &ReplyVision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImmediatelyCity_descriptor_, &ImmediatelyCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImmediatelyGate_descriptor_, &ImmediatelyGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImmediatelyRush_descriptor_, &ImmediatelyRush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImmediatelyLadder_descriptor_, &ImmediatelyLadder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCMove_descriptor_, &NPCMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendNPCMove_descriptor_, &SendNPCMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRewardInfo_descriptor_, &RequestRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyRewardInfo_descriptor_, &ReplyRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHistoryReward_descriptor_, &RequestHistoryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHistoryReward_descriptor_, &ReplyHistoryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestKillReward_descriptor_, &RequestKillReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyKillReward_descriptor_, &ReplyKillReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMissionPersonalReward_descriptor_, &RequestMissionPersonalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyMissionPersonalReward_descriptor_, &ReplyMissionPersonalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMissionCountryReward_descriptor_, &RequestMissionCountryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyMissionCountryReward_descriptor_, &ReplyMissionCountryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAuto_descriptor_, &RequestAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFight_descriptor_, &RequestFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyFight_descriptor_, &ReplyFight::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBattleField_2eproto() {
  delete Hero::default_instance_;
  delete Hero_reflection_;
  delete City::default_instance_;
  delete City_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete RMIField::default_instance_;
  delete RMIField_reflection_;
  delete BattleReward::default_instance_;
  delete BattleReward_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete ResetBattleReward::default_instance_;
  delete ResetBattleReward_reflection_;
  delete RequestBattleReward::default_instance_;
  delete RequestBattleReward_reflection_;
  delete ReplyBattleReward::default_instance_;
  delete ReplyBattleReward_reflection_;
  delete HeroReward::default_instance_;
  delete HeroReward_reflection_;
  delete ItemReward::default_instance_;
  delete ItemReward_reflection_;
  delete UserReward::default_instance_;
  delete UserReward_reflection_;
  delete MissionState::default_instance_;
  delete MissionState_reflection_;
  delete RequestHero::default_instance_;
  delete RequestHero_reflection_;
  delete HeroState::default_instance_;
  delete HeroState_reflection_;
  delete CityState::default_instance_;
  delete CityState_reflection_;
  delete RequestMove::default_instance_;
  delete RequestMove_reflection_;
  delete ReplyMove::default_instance_;
  delete ReplyMove_reflection_;
  delete RequestStop::default_instance_;
  delete RequestStop_reflection_;
  delete RequestCityKingdom::default_instance_;
  delete RequestCityKingdom_reflection_;
  delete ReplyCityKingdom::default_instance_;
  delete ReplyCityKingdom_reflection_;
  delete RequestCityCount::default_instance_;
  delete RequestCityCount_reflection_;
  delete ReplyCityCount::default_instance_;
  delete ReplyCityCount_reflection_;
  delete RequestCityMaster::default_instance_;
  delete RequestCityMaster_reflection_;
  delete ReplyCityMaster::default_instance_;
  delete ReplyCityMaster_reflection_;
  delete StartCityBattle::default_instance_;
  delete StartCityBattle_reflection_;
  delete RequestCityReward::default_instance_;
  delete RequestCityReward_reflection_;
  delete ReplyCityReward::default_instance_;
  delete ReplyCityReward_reflection_;
  delete RequestCity::default_instance_;
  delete RequestCity_reflection_;
  delete RequestGate::default_instance_;
  delete RequestGate_reflection_;
  delete RequestRush::default_instance_;
  delete RequestRush_reflection_;
  delete RequestLadder::default_instance_;
  delete RequestLadder_reflection_;
  delete HeroUid::default_instance_;
  delete HeroUid_reflection_;
  delete HidUid::default_instance_;
  delete HidUid_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete Turn::default_instance_;
  delete Turn_reflection_;
  delete ReplyCity::default_instance_;
  delete ReplyCity_reflection_;
  delete QuitCity::default_instance_;
  delete QuitCity_reflection_;
  delete QuitGate::default_instance_;
  delete QuitGate_reflection_;
  delete QuitRush::default_instance_;
  delete QuitRush_reflection_;
  delete QuitLadder::default_instance_;
  delete QuitLadder_reflection_;
  delete RequestList::default_instance_;
  delete RequestList_reflection_;
  delete ReplyList::default_instance_;
  delete ReplyList_reflection_;
  delete SkillOrShapeCity::default_instance_;
  delete SkillOrShapeCity_reflection_;
  delete SkillOrShapeGate::default_instance_;
  delete SkillOrShapeGate_reflection_;
  delete SkillOrShapeRush::default_instance_;
  delete SkillOrShapeRush_reflection_;
  delete SkillOrShapeLadder::default_instance_;
  delete SkillOrShapeLadder_reflection_;
  delete BattleOver::default_instance_;
  delete BattleOver_reflection_;
  delete StartRush::default_instance_;
  delete StartRush_reflection_;
  delete SendRush::default_instance_;
  delete SendRush_reflection_;
  delete RequestVision::default_instance_;
  delete RequestVision_reflection_;
  delete ReplyVision::default_instance_;
  delete ReplyVision_reflection_;
  delete ImmediatelyCity::default_instance_;
  delete ImmediatelyCity_reflection_;
  delete ImmediatelyGate::default_instance_;
  delete ImmediatelyGate_reflection_;
  delete ImmediatelyRush::default_instance_;
  delete ImmediatelyRush_reflection_;
  delete ImmediatelyLadder::default_instance_;
  delete ImmediatelyLadder_reflection_;
  delete NPCMove::default_instance_;
  delete NPCMove_reflection_;
  delete SendNPCMove::default_instance_;
  delete SendNPCMove_reflection_;
  delete RequestRewardInfo::default_instance_;
  delete RequestRewardInfo_reflection_;
  delete ReplyRewardInfo::default_instance_;
  delete ReplyRewardInfo_reflection_;
  delete RequestHistoryReward::default_instance_;
  delete RequestHistoryReward_reflection_;
  delete ReplyHistoryReward::default_instance_;
  delete ReplyHistoryReward_reflection_;
  delete RequestKillReward::default_instance_;
  delete RequestKillReward_reflection_;
  delete ReplyKillReward::default_instance_;
  delete ReplyKillReward_reflection_;
  delete RequestMissionPersonalReward::default_instance_;
  delete RequestMissionPersonalReward_reflection_;
  delete ReplyMissionPersonalReward::default_instance_;
  delete ReplyMissionPersonalReward_reflection_;
  delete RequestMissionCountryReward::default_instance_;
  delete RequestMissionCountryReward_reflection_;
  delete ReplyMissionCountryReward::default_instance_;
  delete ReplyMissionCountryReward_reflection_;
  delete RequestAuto::default_instance_;
  delete RequestAuto_reflection_;
  delete RequestFight::default_instance_;
  delete RequestFight_reflection_;
  delete ReplyFight::default_instance_;
  delete ReplyFight_reflection_;
}

void protobuf_AddDesc_ProtoBattleField_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoBattleField.proto\022\020ProtoBattleFie"
    "ld\032\020DataCommon.proto\"\226\001\n\004Hero\022\n\n\002id\030\001 \002("
    "\r\022\020\n\010property\030\002 \003(\005\022\n\n\002hp\030\003 \003(\005\022\r\n\005shape"
    "\030\004 \003(\r\022\r\n\005skill\030\005 \001(\r\022\017\n\007extraid\030\006 \002(\r\022\014"
    "\n\004city\030\007 \002(\r\022\014\n\004gate\030\010 \002(\r\022\014\n\004ouid\030\t \001(\r"
    "\022\013\n\003oid\030\n \001(\r\"N\n\004City\022\013\n\003cid\030\001 \002(\r\022\017\n\007ki"
    "ngdom\030\002 \002(\r\022\r\n\005fight\030\003 \002(\010\022\013\n\003uid\030\004 \002(\r\022"
    "\014\n\004name\030\005 \001(\014\"E\n\007Mission\022\n\n\002m1\030\001 \002(\r\022\n\n\002"
    "m2\030\002 \002(\r\022\020\n\010m1status\030\003 \002(\r\022\020\n\010m2status\030\004"
    " \002(\r\"s\n\010RMIField\022\013\n\003aid\030\001 \002(\r\022\013\n\003job\030\002 \002"
    "(\r\022\017\n\007is_atuo\030\003 \002(\010\022\026\n\016forbid_talk_ts\030\004 "
    "\002(\r\022\026\n\016forbid_move_ts\030\005 \002(\r\022\014\n\004silk\030\006 \002("
    "\r\"M\n\014BattleReward\022\t\n\001c\030\001 \003(\r\022\t\n\001r\030\002 \003(\r\022"
    "\n\n\002rp\030\004 \002(\r\022\013\n\003ccd\030\005 \002(\r\022\016\n\006ctimes\030\006 \002(\r"
    "\"\330\001\n\005Field\022$\n\004hero\030\001 \003(\0132\026.ProtoBattleFi"
    "eld.Hero\022$\n\004city\030\002 \003(\0132\026.ProtoBattleFiel"
    "d.City\022*\n\007mission\030\003 \003(\0132\031.ProtoBattleFie"
    "ld.Mission\022\'\n\003rmi\030\004 \002(\0132\032.ProtoBattleFie"
    "ld.RMIField\022.\n\006reward\030\005 \002(\0132\036.ProtoBattl"
    "eField.BattleReward\")\n\021ResetBattleReward"
    "\022\t\n\001c\030\001 \003(\r\022\t\n\001r\030\002 \003(\r\"2\n\023RequestBattleR"
    "eward\022\r\n\005index\030\001 \002(\r\022\014\n\004cash\030\002 \002(\010\">\n\021Re"
    "plyBattleReward\022\014\n\004type\030\001 \002(\r\022\r\n\005count\030\002"
    " \002(\r\022\014\n\004equd\030\003 \001(\r\"Q\n\nHeroReward\022\n\n\002id\030\001"
    " \002(\r\022\014\n\004hexp\030\002 \002(\r\022\016\n\006occupy\030\003 \002(\r\022\013\n\003wi"
    "n\030\004 \002(\r\022\014\n\004kill\030\005 \002(\r\"\'\n\nItemReward\022\n\n\002i"
    "d\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"\377\001\n\nUserReward\022\013\n"
    "\003exp\030\001 \002(\r\022\014\n\004coin\030\002 \002(\r\022\014\n\004wood\030\003 \002(\r\022\014"
    "\n\004food\030\004 \002(\r\022\014\n\004iron\030\005 \002(\r\022\013\n\003gem\030\006 \002(\r\022"
    "*\n\004hexp\030\007 \003(\0132\034.ProtoBattleField.HeroRew"
    "ard\022\014\n\004kill\030\010 \001(\r\022\014\n\004hurt\030\t \001(\r\022\014\n\004head\030"
    "\n \001(\r\022\016\n\006reward\030\013 \001(\r\022\r\n\005bkill\030\014 \001(\r\022*\n\004"
    "item\030\r \003(\0132\034.ProtoBattleField.ItemReward"
    "\":\n\014MissionState\022*\n\007mission\030\001 \003(\0132\031.Prot"
    "oBattleField.Mission\"\r\n\013RequestHero\"_\n\tH"
    "eroState\022$\n\004hero\030\001 \003(\0132\026.ProtoBattleFiel"
    "d.Hero\022,\n\006reward\030\002 \001(\0132\034.ProtoBattleFiel"
    "d.UserReward\"1\n\tCityState\022$\n\004city\030\001 \003(\0132"
    "\026.ProtoBattleField.City\"\'\n\013RequestMove\022\n"
    "\n\002id\030\001 \002(\r\022\014\n\004cids\030\002 \003(\r\"0\n\tReplyMove\022\n\n"
    "\002id\030\001 \002(\r\022\n\n\002ts\030\002 \002(\r\022\013\n\003mts\030\003 \002(\r\"\031\n\013Re"
    "questStop\022\n\n\002id\030\001 \002(\r\"!\n\022RequestCityKing"
    "dom\022\013\n\003cid\030\001 \003(\r\"\?\n\020ReplyCityKingdom\022\013\n\003"
    "cid\030\001 \003(\r\022\017\n\007kingdom\030\002 \003(\r\022\r\n\005fight\030\003 \003("
    "\010\"\037\n\020RequestCityCount\022\013\n\003cid\030\001 \002(\r\"\037\n\016Re"
    "plyCityCount\022\r\n\005count\030\001 \003(\r\" \n\021RequestCi"
    "tyMaster\022\013\n\003cid\030\001 \002(\r\"\320\001\n\017ReplyCityMaste"
    "r\022\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003aid\030\003 \001("
    "\r\022\013\n\003job\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\020\n\010hero_id"
    "s\030\006 \003(\r\022\020\n\010hero_lvl\030\007 \003(\r\022\023\n\013hero_troops"
    "\030\010 \003(\r\022\016\n\006reward\030\t \002(\r\022\023\n\013next_reward\030\n "
    "\002(\r\022\013\n\003ccd\030\013 \002(\r\022\016\n\006ctimes\030\014 \002(\r\",\n\017Star"
    "tCityBattle\022\013\n\003cid\030\001 \002(\r\022\014\n\004hero\030\002 \003(\r\" "
    "\n\021RequestCityReward\022\013\n\003cid\030\001 \002(\r\"<\n\017Repl"
    "yCityReward\022\014\n\004type\030\001 \002(\r\022\r\n\005count\030\002 \002(\r"
    "\022\014\n\004equd\030\003 \001(\r\"\032\n\013RequestCity\022\013\n\003cid\030\001 \002"
    "(\r\"\032\n\013RequestGate\022\013\n\003uid\030\001 \002(\r\"A\n\013Reques"
    "tRush\022\013\n\003uid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004euid\030\003"
    " \002(\r\022\013\n\003eid\030\004 \002(\r\"\034\n\rRequestLadder\022\013\n\003ui"
    "d\030\001 \002(\r\"<\n\007HeroUid\022\013\n\003uid\030\001 \002(\r\022$\n\004hero\030"
    "\002 \002(\0132\026.ProtoBattleField.Hero\"<\n\006HidUid\022"
    "\013\n\003uid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004ouid\030\003 \001(\r\022\013"
    "\n\003oid\030\004 \001(\r\"C\n\010UserInfo\022\013\n\003uid\030\001 \002(\r\022\014\n\004"
    "name\030\002 \002(\014\022\017\n\007kingdom\030\003 \002(\r\022\013\n\003fig\030\004 \001(\014"
    "\"\326\001\n\004Turn\022\017\n\007a_shape\030\001 \002(\r\022\017\n\007d_shape\030\002 "
    "\002(\r\022\021\n\tatt_shape\030\003 \002(\r\022\021\n\tdef_shape\030\004 \002("
    "\r\022\017\n\007a_skill\030\005 \003(\r\022\017\n\007d_skill\030\006 \003(\r\022\020\n\010a"
    "_attack\030\007 \003(\r\022\020\n\010d_attack\030\010 \003(\r\022\n\n\002ts\030\t "
    "\002(\r\022\016\n\006nextts\030\n \002(\r\022\021\n\ta_explode\030\013 \001(\r\022\021"
    "\n\td_explode\030\014 \001(\r\"\224\002\n\tReplyCity\022+\n\010attac"
    "ker\030\001 \003(\0132\031.ProtoBattleField.HeroUid\022+\n\010"
    "defender\030\002 \003(\0132\031.ProtoBattleField.HeroUi"
    "d\022(\n\004info\030\003 \003(\0132\032.ProtoBattleField.UserI"
    "nfo\022\n\n\002ts\030\004 \001(\r\022\016\n\006nextts\030\005 \001(\r\022$\n\004turn\030"
    "\006 \001(\0132\026.ProtoBattleField.Turn\022\013\n\003gid\030\007 \002"
    "(\r\022\014\n\004type\030\010 \002(\r\022\013\n\003cid\030\t \002(\r\022\013\n\003uid\030\n \002"
    "(\r\022\014\n\004gate\030\013 \002(\r\"\027\n\010QuitCity\022\013\n\003cid\030\001 \002("
    "\r\"\027\n\010QuitGate\022\013\n\003uid\030\001 \002(\r\">\n\010QuitRush\022\013"
    "\n\003uid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004euid\030\003 \002(\r\022\013\n"
    "\003eid\030\004 \002(\r\"\031\n\nQuitLadder\022\013\n\003uid\030\001 \002(\r\"8\n"
    "\013RequestList\022\013\n\003cid\030\001 \002(\r\022\016\n\006attack\030\002 \002("
    "\010\022\014\n\004page\030\003 \002(\r\"^\n\tReplyList\022\'\n\005queue\030\001 "
    "\003(\0132\030.ProtoBattleField.HidUid\022(\n\004info\030\002 "
    "\003(\0132\032.ProtoBattleField.UserInfo\";\n\020Skill"
    "OrShapeCity\022\013\n\003hid\030\001 \002(\r\022\r\n\005shape\030\002 \002(\r\022"
    "\013\n\003cid\030\003 \002(\r\";\n\020SkillOrShapeGate\022\013\n\003hid\030"
    "\001 \002(\r\022\r\n\005shape\030\002 \002(\r\022\013\n\003uid\030\003 \002(\r\"b\n\020Ski"
    "llOrShapeRush\022\013\n\003hid\030\001 \002(\r\022\r\n\005shape\030\002 \002("
    "\r\022\013\n\003uid\030\003 \002(\r\022\n\n\002id\030\004 \002(\r\022\014\n\004euid\030\005 \002(\r"
    "\022\013\n\003eid\030\006 \002(\r\"=\n\022SkillOrShapeLadder\022\013\n\003h"
    "id\030\001 \002(\r\022\r\n\005shape\030\002 \002(\r\022\013\n\003uid\030\003 \002(\r\"]\n\n"
    "BattleOver\022\023\n\013attackerwin\030\001 \002(\010\022,\n\006rewar"
    "d\030\002 \001(\0132\034.ProtoBattleField.UserReward\022\014\n"
    "\004gate\030\003 \001(\r\"$\n\tStartRush\022\n\n\002id\030\001 \002(\r\022\013\n\003"
    "cid\030\002 \002(\r\">\n\010SendRush\022\013\n\003uid\030\001 \002(\r\022\n\n\002id"
    "\030\002 \002(\r\022\014\n\004euid\030\003 \002(\r\022\013\n\003eid\030\004 \002(\r\"6\n\rReq"
    "uestVision\022\n\n\002id\030\001 \002(\r\022\013\n\003cid\030\002 \002(\r\022\014\n\004e"
    "qud\030\003 \001(\r\"\031\n\013ReplyVision\022\n\n\002id\030\001 \002(\r\"\036\n\017"
    "ImmediatelyCity\022\013\n\003cid\030\001 \002(\r\"\036\n\017Immediat"
    "elyGate\022\013\n\003uid\030\001 \002(\r\"E\n\017ImmediatelyRush\022"
    "\013\n\003uid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004euid\030\003 \002(\r\022\013"
    "\n\003eid\030\004 \002(\r\" \n\021ImmediatelyLadder\022\013\n\003uid\030"
    "\001 \002(\r\"#\n\007NPCMove\022\n\n\002id\030\001 \002(\r\022\014\n\004cids\030\002 \003"
    "(\r\"6\n\013SendNPCMove\022\'\n\004move\030\001 \003(\0132\031.ProtoB"
    "attleField.NPCMove\"\023\n\021RequestRewardInfo\""
    "\374\001\n\017ReplyRewardInfo\022\017\n\007history\030\001 \003(\r\022\r\n\005"
    "mkill\030\002 \002(\r\022\014\n\004kill\030\003 \002(\r\022\016\n\006occupy\030\004 \002("
    "\r\022\017\n\007foccupy\030\005 \002(\r\022\014\n\004rush\030\006 \002(\r\022\016\n\006rewa"
    "rd\030\007 \002(\r\022\017\n\007rewardb\030\010 \002(\r\022*\n\007mission\030\t \003"
    "(\0132\031.ProtoBattleField.Mission\022\013\n\003mp1\030\n \002"
    "(\r\022\013\n\003mp2\030\013 \002(\r\022\013\n\003mk1\030\014 \002(\r\022\013\n\003mk2\030\r \002("
    "\r\022\013\n\003mp3\030\016 \002(\r\"\026\n\024RequestHistoryReward\"\?"
    "\n\022ReplyHistoryReward\022\r\n\005rests\030\001 \002(\r\022\014\n\004c"
    "oin\030\002 \002(\r\022\014\n\004iron\030\003 \001(\r\"\023\n\021RequestKillRe"
    "ward\"\254\001\n\017ReplyKillReward\022+\n\006equips\030\001 \001(\013"
    "2\033.DataCommon.EquipmentAllCPP\022-\n\004base\030\002 "
    "\001(\0132\037.DataCommon.CommonBaseRewardCPP\022\027\n\017"
    "exploit_box_cnt\030\003 \002(\r\022\020\n\010multiple\030\004 \002(\r\022"
    "\022\n\nequips_cnt\030\005 \001(\r\"/\n\034RequestMissionPer"
    "sonalReward\022\017\n\007task_no\030\001 \002(\r\"\230\001\n\032ReplyMi"
    "ssionPersonalReward\022+\n\006equips\030\001 \001(\0132\033.Da"
    "taCommon.EquipmentAllCPP\022\022\n\nequips_cnt\030\002"
    " \003(\r\022-\n\004base\030\003 \001(\0132\037.DataCommon.CommonBa"
    "seRewardCPP\022\n\n\002mp\030\004 \003(\r\".\n\033RequestMissio"
    "nCountryReward\022\017\n\007task_no\030\001 \002(\r\"V\n\031Reply"
    "MissionCountryReward\022-\n\004base\030\001 \002(\0132\037.Dat"
    "aCommon.CommonBaseRewardCPP\022\n\n\002mk\030\002 \003(\r\""
    "\035\n\013RequestAuto\022\016\n\006b_atuo\030\001 \002(\010\"\201\001\n\014Reque"
    "stFight\022+\n\010attacker\030\001 \003(\0132\031.ProtoBattleF"
    "ield.HeroUid\022+\n\010defender\030\002 \003(\0132\031.ProtoBa"
    "ttleField.HeroUid\022\013\n\003gid\030\003 \002(\r\022\n\n\002id\030\004 \002"
    "(\r\">\n\nReplyFight\022\n\n\002id\030\001 \002(\r\022$\n\004turn\030\002 \002"
    "(\0132\026.ProtoBattleField.Turn", 5306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBattleField.proto", &protobuf_RegisterTypes);
  Hero::default_instance_ = new Hero();
  City::default_instance_ = new City();
  Mission::default_instance_ = new Mission();
  RMIField::default_instance_ = new RMIField();
  BattleReward::default_instance_ = new BattleReward();
  Field::default_instance_ = new Field();
  ResetBattleReward::default_instance_ = new ResetBattleReward();
  RequestBattleReward::default_instance_ = new RequestBattleReward();
  ReplyBattleReward::default_instance_ = new ReplyBattleReward();
  HeroReward::default_instance_ = new HeroReward();
  ItemReward::default_instance_ = new ItemReward();
  UserReward::default_instance_ = new UserReward();
  MissionState::default_instance_ = new MissionState();
  RequestHero::default_instance_ = new RequestHero();
  HeroState::default_instance_ = new HeroState();
  CityState::default_instance_ = new CityState();
  RequestMove::default_instance_ = new RequestMove();
  ReplyMove::default_instance_ = new ReplyMove();
  RequestStop::default_instance_ = new RequestStop();
  RequestCityKingdom::default_instance_ = new RequestCityKingdom();
  ReplyCityKingdom::default_instance_ = new ReplyCityKingdom();
  RequestCityCount::default_instance_ = new RequestCityCount();
  ReplyCityCount::default_instance_ = new ReplyCityCount();
  RequestCityMaster::default_instance_ = new RequestCityMaster();
  ReplyCityMaster::default_instance_ = new ReplyCityMaster();
  StartCityBattle::default_instance_ = new StartCityBattle();
  RequestCityReward::default_instance_ = new RequestCityReward();
  ReplyCityReward::default_instance_ = new ReplyCityReward();
  RequestCity::default_instance_ = new RequestCity();
  RequestGate::default_instance_ = new RequestGate();
  RequestRush::default_instance_ = new RequestRush();
  RequestLadder::default_instance_ = new RequestLadder();
  HeroUid::default_instance_ = new HeroUid();
  HidUid::default_instance_ = new HidUid();
  UserInfo::default_instance_ = new UserInfo();
  Turn::default_instance_ = new Turn();
  ReplyCity::default_instance_ = new ReplyCity();
  QuitCity::default_instance_ = new QuitCity();
  QuitGate::default_instance_ = new QuitGate();
  QuitRush::default_instance_ = new QuitRush();
  QuitLadder::default_instance_ = new QuitLadder();
  RequestList::default_instance_ = new RequestList();
  ReplyList::default_instance_ = new ReplyList();
  SkillOrShapeCity::default_instance_ = new SkillOrShapeCity();
  SkillOrShapeGate::default_instance_ = new SkillOrShapeGate();
  SkillOrShapeRush::default_instance_ = new SkillOrShapeRush();
  SkillOrShapeLadder::default_instance_ = new SkillOrShapeLadder();
  BattleOver::default_instance_ = new BattleOver();
  StartRush::default_instance_ = new StartRush();
  SendRush::default_instance_ = new SendRush();
  RequestVision::default_instance_ = new RequestVision();
  ReplyVision::default_instance_ = new ReplyVision();
  ImmediatelyCity::default_instance_ = new ImmediatelyCity();
  ImmediatelyGate::default_instance_ = new ImmediatelyGate();
  ImmediatelyRush::default_instance_ = new ImmediatelyRush();
  ImmediatelyLadder::default_instance_ = new ImmediatelyLadder();
  NPCMove::default_instance_ = new NPCMove();
  SendNPCMove::default_instance_ = new SendNPCMove();
  RequestRewardInfo::default_instance_ = new RequestRewardInfo();
  ReplyRewardInfo::default_instance_ = new ReplyRewardInfo();
  RequestHistoryReward::default_instance_ = new RequestHistoryReward();
  ReplyHistoryReward::default_instance_ = new ReplyHistoryReward();
  RequestKillReward::default_instance_ = new RequestKillReward();
  ReplyKillReward::default_instance_ = new ReplyKillReward();
  RequestMissionPersonalReward::default_instance_ = new RequestMissionPersonalReward();
  ReplyMissionPersonalReward::default_instance_ = new ReplyMissionPersonalReward();
  RequestMissionCountryReward::default_instance_ = new RequestMissionCountryReward();
  ReplyMissionCountryReward::default_instance_ = new ReplyMissionCountryReward();
  RequestAuto::default_instance_ = new RequestAuto();
  RequestFight::default_instance_ = new RequestFight();
  ReplyFight::default_instance_ = new ReplyFight();
  Hero::default_instance_->InitAsDefaultInstance();
  City::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  RMIField::default_instance_->InitAsDefaultInstance();
  BattleReward::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  ResetBattleReward::default_instance_->InitAsDefaultInstance();
  RequestBattleReward::default_instance_->InitAsDefaultInstance();
  ReplyBattleReward::default_instance_->InitAsDefaultInstance();
  HeroReward::default_instance_->InitAsDefaultInstance();
  ItemReward::default_instance_->InitAsDefaultInstance();
  UserReward::default_instance_->InitAsDefaultInstance();
  MissionState::default_instance_->InitAsDefaultInstance();
  RequestHero::default_instance_->InitAsDefaultInstance();
  HeroState::default_instance_->InitAsDefaultInstance();
  CityState::default_instance_->InitAsDefaultInstance();
  RequestMove::default_instance_->InitAsDefaultInstance();
  ReplyMove::default_instance_->InitAsDefaultInstance();
  RequestStop::default_instance_->InitAsDefaultInstance();
  RequestCityKingdom::default_instance_->InitAsDefaultInstance();
  ReplyCityKingdom::default_instance_->InitAsDefaultInstance();
  RequestCityCount::default_instance_->InitAsDefaultInstance();
  ReplyCityCount::default_instance_->InitAsDefaultInstance();
  RequestCityMaster::default_instance_->InitAsDefaultInstance();
  ReplyCityMaster::default_instance_->InitAsDefaultInstance();
  StartCityBattle::default_instance_->InitAsDefaultInstance();
  RequestCityReward::default_instance_->InitAsDefaultInstance();
  ReplyCityReward::default_instance_->InitAsDefaultInstance();
  RequestCity::default_instance_->InitAsDefaultInstance();
  RequestGate::default_instance_->InitAsDefaultInstance();
  RequestRush::default_instance_->InitAsDefaultInstance();
  RequestLadder::default_instance_->InitAsDefaultInstance();
  HeroUid::default_instance_->InitAsDefaultInstance();
  HidUid::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  Turn::default_instance_->InitAsDefaultInstance();
  ReplyCity::default_instance_->InitAsDefaultInstance();
  QuitCity::default_instance_->InitAsDefaultInstance();
  QuitGate::default_instance_->InitAsDefaultInstance();
  QuitRush::default_instance_->InitAsDefaultInstance();
  QuitLadder::default_instance_->InitAsDefaultInstance();
  RequestList::default_instance_->InitAsDefaultInstance();
  ReplyList::default_instance_->InitAsDefaultInstance();
  SkillOrShapeCity::default_instance_->InitAsDefaultInstance();
  SkillOrShapeGate::default_instance_->InitAsDefaultInstance();
  SkillOrShapeRush::default_instance_->InitAsDefaultInstance();
  SkillOrShapeLadder::default_instance_->InitAsDefaultInstance();
  BattleOver::default_instance_->InitAsDefaultInstance();
  StartRush::default_instance_->InitAsDefaultInstance();
  SendRush::default_instance_->InitAsDefaultInstance();
  RequestVision::default_instance_->InitAsDefaultInstance();
  ReplyVision::default_instance_->InitAsDefaultInstance();
  ImmediatelyCity::default_instance_->InitAsDefaultInstance();
  ImmediatelyGate::default_instance_->InitAsDefaultInstance();
  ImmediatelyRush::default_instance_->InitAsDefaultInstance();
  ImmediatelyLadder::default_instance_->InitAsDefaultInstance();
  NPCMove::default_instance_->InitAsDefaultInstance();
  SendNPCMove::default_instance_->InitAsDefaultInstance();
  RequestRewardInfo::default_instance_->InitAsDefaultInstance();
  ReplyRewardInfo::default_instance_->InitAsDefaultInstance();
  RequestHistoryReward::default_instance_->InitAsDefaultInstance();
  ReplyHistoryReward::default_instance_->InitAsDefaultInstance();
  RequestKillReward::default_instance_->InitAsDefaultInstance();
  ReplyKillReward::default_instance_->InitAsDefaultInstance();
  RequestMissionPersonalReward::default_instance_->InitAsDefaultInstance();
  ReplyMissionPersonalReward::default_instance_->InitAsDefaultInstance();
  RequestMissionCountryReward::default_instance_->InitAsDefaultInstance();
  ReplyMissionCountryReward::default_instance_->InitAsDefaultInstance();
  RequestAuto::default_instance_->InitAsDefaultInstance();
  RequestFight::default_instance_->InitAsDefaultInstance();
  ReplyFight::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBattleField_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBattleField_2eproto {
  StaticDescriptorInitializer_ProtoBattleField_2eproto() {
    protobuf_AddDesc_ProtoBattleField_2eproto();
  }
} static_descriptor_initializer_ProtoBattleField_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Hero::kIdFieldNumber;
const int Hero::kPropertyFieldNumber;
const int Hero::kHpFieldNumber;
const int Hero::kShapeFieldNumber;
const int Hero::kSkillFieldNumber;
const int Hero::kExtraidFieldNumber;
const int Hero::kCityFieldNumber;
const int Hero::kGateFieldNumber;
const int Hero::kOuidFieldNumber;
const int Hero::kOidFieldNumber;
#endif  // !_MSC_VER

Hero::Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.Hero)
}

void Hero::InitAsDefaultInstance() {
}

Hero::Hero(const Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.Hero)
}

void Hero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  skill_ = 0u;
  extraid_ = 0u;
  city_ = 0u;
  gate_ = 0u;
  ouid_ = 0u;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hero::~Hero() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.Hero)
  SharedDtor();
}

void Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hero_descriptor_;
}

const Hero& Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

Hero* Hero::default_instance_ = NULL;

Hero* Hero::New() const {
  return new Hero;
}

void Hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 241) {
    ZR_(id_, skill_);
    ZR_(extraid_, gate_);
  }
  ZR_(ouid_, oid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  property_.Clear();
  hp_.Clear();
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_property;
        break;
      }

      // repeated int32 property = 2;
      case 2: {
        if (tag == 16) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_property())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_property())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_property;
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // repeated int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_hp())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        if (input->ExpectTag(32)) goto parse_shape;
        break;
      }

      // repeated uint32 shape = 4;
      case 4: {
        if (tag == 32) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_shape())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shape;
        if (input->ExpectTag(40)) goto parse_skill;
        break;
      }

      // optional uint32 skill = 5;
      case 5: {
        if (tag == 40) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_extraid;
        break;
      }

      // required uint32 extraid = 6;
      case 6: {
        if (tag == 48) {
         parse_extraid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraid_)));
          set_has_extraid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_city;
        break;
      }

      // required uint32 city = 7;
      case 7: {
        if (tag == 56) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gate;
        break;
      }

      // required uint32 gate = 8;
      case 8: {
        if (tag == 64) {
         parse_gate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_)));
          set_has_gate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ouid;
        break;
      }

      // optional uint32 ouid = 9;
      case 9: {
        if (tag == 72) {
         parse_ouid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ouid_)));
          set_has_ouid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_oid;
        break;
      }

      // optional uint32 oid = 10;
      case 10: {
        if (tag == 80) {
         parse_oid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oid_)));
          set_has_oid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.Hero)
  return false;
#undef DO_
}

void Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.Hero)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated int32 property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->property(i), output);
  }

  // repeated int32 hp = 3;
  for (int i = 0; i < this->hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->hp(i), output);
  }

  // repeated uint32 shape = 4;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->shape(i), output);
  }

  // optional uint32 skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill(), output);
  }

  // required uint32 extraid = 6;
  if (has_extraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->extraid(), output);
  }

  // required uint32 city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->city(), output);
  }

  // required uint32 gate = 8;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gate(), output);
  }

  // optional uint32 ouid = 9;
  if (has_ouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ouid(), output);
  }

  // optional uint32 oid = 10;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->oid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.Hero)
}

::google::protobuf::uint8* Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.Hero)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated int32 property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->property(i), target);
  }

  // repeated int32 hp = 3;
  for (int i = 0; i < this->hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->hp(i), target);
  }

  // repeated uint32 shape = 4;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->shape(i), target);
  }

  // optional uint32 skill = 5;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill(), target);
  }

  // required uint32 extraid = 6;
  if (has_extraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->extraid(), target);
  }

  // required uint32 city = 7;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->city(), target);
  }

  // required uint32 gate = 8;
  if (has_gate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gate(), target);
  }

  // optional uint32 ouid = 9;
  if (has_ouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ouid(), target);
  }

  // optional uint32 oid = 10;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->oid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.Hero)
  return target;
}

int Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 skill = 5;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

    // required uint32 extraid = 6;
    if (has_extraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraid());
    }

    // required uint32 city = 7;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }

    // required uint32 gate = 8;
    if (has_gate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ouid = 9;
    if (has_ouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ouid());
    }

    // optional uint32 oid = 10;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }

  }
  // repeated int32 property = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->property_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->property(i));
    }
    total_size += 1 * this->property_size() + data_size;
  }

  // repeated int32 hp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hp(i));
    }
    total_size += 1 * this->hp_size() + data_size;
  }

  // repeated uint32 shape = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  hp_.MergeFrom(from.hp_);
  shape_.MergeFrom(from.shape_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_extraid()) {
      set_extraid(from.extraid());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_gate()) {
      set_gate(from.gate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ouid()) {
      set_ouid(from.ouid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e1) != 0x000000e1) return false;

  return true;
}

void Hero::Swap(Hero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    property_.Swap(&other->property_);
    hp_.Swap(&other->hp_);
    shape_.Swap(&other->shape_);
    std::swap(skill_, other->skill_);
    std::swap(extraid_, other->extraid_);
    std::swap(city_, other->city_);
    std::swap(gate_, other->gate_);
    std::swap(ouid_, other->ouid_);
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hero_descriptor_;
  metadata.reflection = Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int City::kCidFieldNumber;
const int City::kKingdomFieldNumber;
const int City::kFightFieldNumber;
const int City::kUidFieldNumber;
const int City::kNameFieldNumber;
#endif  // !_MSC_VER

City::City()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.City)
}

void City::InitAsDefaultInstance() {
}

City::City(const City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.City)
}

void City::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cid_ = 0u;
  kingdom_ = 0u;
  fight_ = false;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

City::~City() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.City)
  SharedDtor();
}

void City::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return City_descriptor_;
}

const City& City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

City* City::default_instance_ = NULL;

City* City::New() const {
  return new City;
}

void City::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<City*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cid_, uid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.City)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kingdom;
        break;
      }

      // required uint32 kingdom = 2;
      case 2: {
        if (tag == 16) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // required bool fight = 3;
      case 3: {
        if (tag == 24) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // required uint32 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.City)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.City)
  return false;
#undef DO_
}

void City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.City)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required uint32 kingdom = 2;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kingdom(), output);
  }

  // required bool fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fight(), output);
  }

  // required uint32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.City)
}

::google::protobuf::uint8* City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.City)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required uint32 kingdom = 2;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kingdom(), target);
  }

  // required bool fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fight(), target);
  }

  // required uint32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.City)
  return target;
}

int City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint32 kingdom = 2;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

    // required bool fight = 3;
    if (has_fight()) {
      total_size += 1 + 1;
    }

    // required uint32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void City::MergeFrom(const City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void City::CopyFrom(const City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void City::Swap(City* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(kingdom_, other->kingdom_);
    std::swap(fight_, other->fight_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = City_descriptor_;
  metadata.reflection = City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mission::kM1FieldNumber;
const int Mission::kM2FieldNumber;
const int Mission::kM1StatusFieldNumber;
const int Mission::kM2StatusFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.Mission)
}

void Mission::InitAsDefaultInstance() {
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.Mission)
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0u;
  m2_ = 0u;
  m1status_ = 0u;
  m2status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m1_, m2status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m2;
        break;
      }

      // required uint32 m2 = 2;
      case 2: {
        if (tag == 16) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m1status;
        break;
      }

      // required uint32 m1status = 3;
      case 3: {
        if (tag == 24) {
         parse_m1status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m1status_)));
          set_has_m1status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m2status;
        break;
      }

      // required uint32 m2status = 4;
      case 4: {
        if (tag == 32) {
         parse_m2status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m2status_)));
          set_has_m2status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.Mission)
  // required uint32 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m1(), output);
  }

  // required uint32 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m2(), output);
  }

  // required uint32 m1status = 3;
  if (has_m1status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m1status(), output);
  }

  // required uint32 m2status = 4;
  if (has_m2status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m2status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.Mission)
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.Mission)
  // required uint32 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m1(), target);
  }

  // required uint32 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m2(), target);
  }

  // required uint32 m1status = 3;
  if (has_m1status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m1status(), target);
  }

  // required uint32 m2status = 4;
  if (has_m2status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m2status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.Mission)
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m1 = 1;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m1());
    }

    // required uint32 m2 = 2;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m2());
    }

    // required uint32 m1status = 3;
    if (has_m1status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m1status());
    }

    // required uint32 m2status = 4;
    if (has_m2status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m2status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m1status()) {
      set_m1status(from.m1status());
    }
    if (from.has_m2status()) {
      set_m2status(from.m2status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m1status_, other->m1status_);
    std::swap(m2status_, other->m2status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RMIField::kAidFieldNumber;
const int RMIField::kJobFieldNumber;
const int RMIField::kIsAtuoFieldNumber;
const int RMIField::kForbidTalkTsFieldNumber;
const int RMIField::kForbidMoveTsFieldNumber;
const int RMIField::kSilkFieldNumber;
#endif  // !_MSC_VER

RMIField::RMIField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RMIField)
}

void RMIField::InitAsDefaultInstance() {
}

RMIField::RMIField(const RMIField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RMIField)
}

void RMIField::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  job_ = 0u;
  is_atuo_ = false;
  forbid_talk_ts_ = 0u;
  forbid_move_ts_ = 0u;
  silk_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RMIField::~RMIField() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RMIField)
  SharedDtor();
}

void RMIField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RMIField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RMIField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RMIField_descriptor_;
}

const RMIField& RMIField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RMIField* RMIField::default_instance_ = NULL;

RMIField* RMIField::New() const {
  return new RMIField;
}

void RMIField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RMIField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(aid_, silk_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RMIField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RMIField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // required uint32 job = 2;
      case 2: {
        if (tag == 16) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_atuo;
        break;
      }

      // required bool is_atuo = 3;
      case 3: {
        if (tag == 24) {
         parse_is_atuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_atuo_)));
          set_has_is_atuo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forbid_talk_ts;
        break;
      }

      // required uint32 forbid_talk_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_forbid_talk_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbid_talk_ts_)));
          set_has_forbid_talk_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forbid_move_ts;
        break;
      }

      // required uint32 forbid_move_ts = 5;
      case 5: {
        if (tag == 40) {
         parse_forbid_move_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbid_move_ts_)));
          set_has_forbid_move_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_silk;
        break;
      }

      // required uint32 silk = 6;
      case 6: {
        if (tag == 48) {
         parse_silk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silk_)));
          set_has_silk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RMIField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RMIField)
  return false;
#undef DO_
}

void RMIField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RMIField)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->job(), output);
  }

  // required bool is_atuo = 3;
  if (has_is_atuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_atuo(), output);
  }

  // required uint32 forbid_talk_ts = 4;
  if (has_forbid_talk_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->forbid_talk_ts(), output);
  }

  // required uint32 forbid_move_ts = 5;
  if (has_forbid_move_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->forbid_move_ts(), output);
  }

  // required uint32 silk = 6;
  if (has_silk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->silk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RMIField)
}

::google::protobuf::uint8* RMIField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RMIField)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->job(), target);
  }

  // required bool is_atuo = 3;
  if (has_is_atuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_atuo(), target);
  }

  // required uint32 forbid_talk_ts = 4;
  if (has_forbid_talk_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->forbid_talk_ts(), target);
  }

  // required uint32 forbid_move_ts = 5;
  if (has_forbid_move_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->forbid_move_ts(), target);
  }

  // required uint32 silk = 6;
  if (has_silk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->silk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RMIField)
  return target;
}

int RMIField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // required bool is_atuo = 3;
    if (has_is_atuo()) {
      total_size += 1 + 1;
    }

    // required uint32 forbid_talk_ts = 4;
    if (has_forbid_talk_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbid_talk_ts());
    }

    // required uint32 forbid_move_ts = 5;
    if (has_forbid_move_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbid_move_ts());
    }

    // required uint32 silk = 6;
    if (has_silk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RMIField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RMIField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RMIField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RMIField::MergeFrom(const RMIField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_is_atuo()) {
      set_is_atuo(from.is_atuo());
    }
    if (from.has_forbid_talk_ts()) {
      set_forbid_talk_ts(from.forbid_talk_ts());
    }
    if (from.has_forbid_move_ts()) {
      set_forbid_move_ts(from.forbid_move_ts());
    }
    if (from.has_silk()) {
      set_silk(from.silk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RMIField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMIField::CopyFrom(const RMIField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMIField::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RMIField::Swap(RMIField* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(job_, other->job_);
    std::swap(is_atuo_, other->is_atuo_);
    std::swap(forbid_talk_ts_, other->forbid_talk_ts_);
    std::swap(forbid_move_ts_, other->forbid_move_ts_);
    std::swap(silk_, other->silk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RMIField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RMIField_descriptor_;
  metadata.reflection = RMIField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleReward::kCFieldNumber;
const int BattleReward::kRFieldNumber;
const int BattleReward::kRpFieldNumber;
const int BattleReward::kCcdFieldNumber;
const int BattleReward::kCtimesFieldNumber;
#endif  // !_MSC_VER

BattleReward::BattleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.BattleReward)
}

void BattleReward::InitAsDefaultInstance() {
}

BattleReward::BattleReward(const BattleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.BattleReward)
}

void BattleReward::SharedCtor() {
  _cached_size_ = 0;
  rp_ = 0u;
  ccd_ = 0u;
  ctimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleReward::~BattleReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.BattleReward)
  SharedDtor();
}

void BattleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleReward_descriptor_;
}

const BattleReward& BattleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

BattleReward* BattleReward::default_instance_ = NULL;

BattleReward* BattleReward::New() const {
  return new BattleReward;
}

void BattleReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rp_, ctimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  c_.Clear();
  r_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.BattleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 c = 1;
      case 1: {
        if (tag == 8) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_c())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_c())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_c;
        if (input->ExpectTag(16)) goto parse_r;
        break;
      }

      // repeated uint32 r = 2;
      case 2: {
        if (tag == 16) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_r())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_r())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r;
        if (input->ExpectTag(32)) goto parse_rp;
        break;
      }

      // required uint32 rp = 4;
      case 4: {
        if (tag == 32) {
         parse_rp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rp_)));
          set_has_rp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ccd;
        break;
      }

      // required uint32 ccd = 5;
      case 5: {
        if (tag == 40) {
         parse_ccd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccd_)));
          set_has_ccd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ctimes;
        break;
      }

      // required uint32 ctimes = 6;
      case 6: {
        if (tag == 48) {
         parse_ctimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctimes_)));
          set_has_ctimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.BattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.BattleReward)
  return false;
#undef DO_
}

void BattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.BattleReward)
  // repeated uint32 c = 1;
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->c(i), output);
  }

  // repeated uint32 r = 2;
  for (int i = 0; i < this->r_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->r(i), output);
  }

  // required uint32 rp = 4;
  if (has_rp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rp(), output);
  }

  // required uint32 ccd = 5;
  if (has_ccd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ccd(), output);
  }

  // required uint32 ctimes = 6;
  if (has_ctimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ctimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.BattleReward)
}

::google::protobuf::uint8* BattleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.BattleReward)
  // repeated uint32 c = 1;
  for (int i = 0; i < this->c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->c(i), target);
  }

  // repeated uint32 r = 2;
  for (int i = 0; i < this->r_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->r(i), target);
  }

  // required uint32 rp = 4;
  if (has_rp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rp(), target);
  }

  // required uint32 ccd = 5;
  if (has_ccd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ccd(), target);
  }

  // required uint32 ctimes = 6;
  if (has_ctimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ctimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.BattleReward)
  return target;
}

int BattleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 rp = 4;
    if (has_rp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rp());
    }

    // required uint32 ccd = 5;
    if (has_ccd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccd());
    }

    // required uint32 ctimes = 6;
    if (has_ctimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctimes());
    }

  }
  // repeated uint32 c = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->c_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->c(i));
    }
    total_size += 1 * this->c_size() + data_size;
  }

  // repeated uint32 r = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->r_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->r(i));
    }
    total_size += 1 * this->r_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleReward::MergeFrom(const BattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  c_.MergeFrom(from.c_);
  r_.MergeFrom(from.r_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_rp()) {
      set_rp(from.rp());
    }
    if (from.has_ccd()) {
      set_ccd(from.ccd());
    }
    if (from.has_ctimes()) {
      set_ctimes(from.ctimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleReward::CopyFrom(const BattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void BattleReward::Swap(BattleReward* other) {
  if (other != this) {
    c_.Swap(&other->c_);
    r_.Swap(&other->r_);
    std::swap(rp_, other->rp_);
    std::swap(ccd_, other->ccd_);
    std::swap(ctimes_, other->ctimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleReward_descriptor_;
  metadata.reflection = BattleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Field::kHeroFieldNumber;
const int Field::kCityFieldNumber;
const int Field::kMissionFieldNumber;
const int Field::kRmiFieldNumber;
const int Field::kRewardFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.Field)
}

void Field::InitAsDefaultInstance() {
  rmi_ = const_cast< ::ProtoBattleField::RMIField*>(&::ProtoBattleField::RMIField::default_instance());
  reward_ = const_cast< ::ProtoBattleField::BattleReward*>(&::ProtoBattleField::BattleReward::default_instance());
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.Field)
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  rmi_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (this != default_instance_) {
    delete rmi_;
    delete reward_;
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & 24) {
    if (has_rmi()) {
      if (rmi_ != NULL) rmi_->::ProtoBattleField::RMIField::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoBattleField::BattleReward::Clear();
    }
  }
  hero_.Clear();
  city_.Clear();
  mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.Hero hero = 1;
      case 1: {
        if (tag == 10) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // repeated .ProtoBattleField.City city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        if (input->ExpectTag(26)) goto parse_mission;
        break;
      }

      // repeated .ProtoBattleField.Mission mission = 3;
      case 3: {
        if (tag == 26) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mission;
        if (input->ExpectTag(34)) goto parse_rmi;
        break;
      }

      // required .ProtoBattleField.RMIField rmi = 4;
      case 4: {
        if (tag == 34) {
         parse_rmi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rmi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // required .ProtoBattleField.BattleReward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.Field)
  // repeated .ProtoBattleField.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }

  // repeated .ProtoBattleField.City city = 2;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city(i), output);
  }

  // repeated .ProtoBattleField.Mission mission = 3;
  for (int i = 0; i < this->mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission(i), output);
  }

  // required .ProtoBattleField.RMIField rmi = 4;
  if (has_rmi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rmi(), output);
  }

  // required .ProtoBattleField.BattleReward reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.Field)
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.Field)
  // repeated .ProtoBattleField.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }

  // repeated .ProtoBattleField.City city = 2;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city(i), target);
  }

  // repeated .ProtoBattleField.Mission mission = 3;
  for (int i = 0; i < this->mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission(i), target);
  }

  // required .ProtoBattleField.RMIField rmi = 4;
  if (has_rmi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rmi(), target);
  }

  // required .ProtoBattleField.BattleReward reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.Field)
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required .ProtoBattleField.RMIField rmi = 4;
    if (has_rmi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rmi());
    }

    // required .ProtoBattleField.BattleReward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated .ProtoBattleField.Hero hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  // repeated .ProtoBattleField.City city = 2;
  total_size += 1 * this->city_size();
  for (int i = 0; i < this->city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city(i));
  }

  // repeated .ProtoBattleField.Mission mission = 3;
  total_size += 1 * this->mission_size();
  for (int i = 0; i < this->mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  city_.MergeFrom(from.city_);
  mission_.MergeFrom(from.mission_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_rmi()) {
      mutable_rmi()->::ProtoBattleField::RMIField::MergeFrom(from.rmi());
    }
    if (from.has_reward()) {
      mutable_reward()->::ProtoBattleField::BattleReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->city())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mission())) return false;
  if (has_rmi()) {
    if (!this->rmi().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    city_.Swap(&other->city_);
    mission_.Swap(&other->mission_);
    std::swap(rmi_, other->rmi_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetBattleReward::kCFieldNumber;
const int ResetBattleReward::kRFieldNumber;
#endif  // !_MSC_VER

ResetBattleReward::ResetBattleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ResetBattleReward)
}

void ResetBattleReward::InitAsDefaultInstance() {
}

ResetBattleReward::ResetBattleReward(const ResetBattleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ResetBattleReward)
}

void ResetBattleReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetBattleReward::~ResetBattleReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ResetBattleReward)
  SharedDtor();
}

void ResetBattleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetBattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetBattleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetBattleReward_descriptor_;
}

const ResetBattleReward& ResetBattleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ResetBattleReward* ResetBattleReward::default_instance_ = NULL;

ResetBattleReward* ResetBattleReward::New() const {
  return new ResetBattleReward;
}

void ResetBattleReward::Clear() {
  c_.Clear();
  r_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetBattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ResetBattleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 c = 1;
      case 1: {
        if (tag == 8) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_c())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_c())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_c;
        if (input->ExpectTag(16)) goto parse_r;
        break;
      }

      // repeated uint32 r = 2;
      case 2: {
        if (tag == 16) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_r())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_r())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ResetBattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ResetBattleReward)
  return false;
#undef DO_
}

void ResetBattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ResetBattleReward)
  // repeated uint32 c = 1;
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->c(i), output);
  }

  // repeated uint32 r = 2;
  for (int i = 0; i < this->r_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->r(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ResetBattleReward)
}

::google::protobuf::uint8* ResetBattleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ResetBattleReward)
  // repeated uint32 c = 1;
  for (int i = 0; i < this->c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->c(i), target);
  }

  // repeated uint32 r = 2;
  for (int i = 0; i < this->r_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->r(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ResetBattleReward)
  return target;
}

int ResetBattleReward::ByteSize() const {
  int total_size = 0;

  // repeated uint32 c = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->c_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->c(i));
    }
    total_size += 1 * this->c_size() + data_size;
  }

  // repeated uint32 r = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->r_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->r(i));
    }
    total_size += 1 * this->r_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetBattleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetBattleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetBattleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetBattleReward::MergeFrom(const ResetBattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  c_.MergeFrom(from.c_);
  r_.MergeFrom(from.r_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetBattleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetBattleReward::CopyFrom(const ResetBattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetBattleReward::IsInitialized() const {

  return true;
}

void ResetBattleReward::Swap(ResetBattleReward* other) {
  if (other != this) {
    c_.Swap(&other->c_);
    r_.Swap(&other->r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetBattleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetBattleReward_descriptor_;
  metadata.reflection = ResetBattleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBattleReward::kIndexFieldNumber;
const int RequestBattleReward::kCashFieldNumber;
#endif  // !_MSC_VER

RequestBattleReward::RequestBattleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestBattleReward)
}

void RequestBattleReward::InitAsDefaultInstance() {
}

RequestBattleReward::RequestBattleReward(const RequestBattleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestBattleReward)
}

void RequestBattleReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  cash_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBattleReward::~RequestBattleReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestBattleReward)
  SharedDtor();
}

void RequestBattleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBattleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBattleReward_descriptor_;
}

const RequestBattleReward& RequestBattleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestBattleReward* RequestBattleReward::default_instance_ = NULL;

RequestBattleReward* RequestBattleReward::New() const {
  return new RequestBattleReward;
}

void RequestBattleReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBattleReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestBattleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required bool cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestBattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestBattleReward)
  return false;
#undef DO_
}

void RequestBattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestBattleReward)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required bool cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestBattleReward)
}

::google::protobuf::uint8* RequestBattleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestBattleReward)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required bool cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestBattleReward)
  return target;
}

int RequestBattleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required bool cash = 2;
    if (has_cash()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBattleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBattleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBattleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBattleReward::MergeFrom(const RequestBattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBattleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBattleReward::CopyFrom(const RequestBattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBattleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestBattleReward::Swap(RequestBattleReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBattleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBattleReward_descriptor_;
  metadata.reflection = RequestBattleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyBattleReward::kTypeFieldNumber;
const int ReplyBattleReward::kCountFieldNumber;
const int ReplyBattleReward::kEqudFieldNumber;
#endif  // !_MSC_VER

ReplyBattleReward::ReplyBattleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyBattleReward)
}

void ReplyBattleReward::InitAsDefaultInstance() {
}

ReplyBattleReward::ReplyBattleReward(const ReplyBattleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyBattleReward)
}

void ReplyBattleReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyBattleReward::~ReplyBattleReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyBattleReward)
  SharedDtor();
}

void ReplyBattleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyBattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyBattleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyBattleReward_descriptor_;
}

const ReplyBattleReward& ReplyBattleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyBattleReward* ReplyBattleReward::default_instance_ = NULL;

ReplyBattleReward* ReplyBattleReward::New() const {
  return new ReplyBattleReward;
}

void ReplyBattleReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyBattleReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, equd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyBattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyBattleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equd;
        break;
      }

      // optional uint32 equd = 3;
      case 3: {
        if (tag == 24) {
         parse_equd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyBattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyBattleReward)
  return false;
#undef DO_
}

void ReplyBattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyBattleReward)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 equd = 3;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyBattleReward)
}

::google::protobuf::uint8* ReplyBattleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyBattleReward)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 equd = 3;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyBattleReward)
  return target;
}

int ReplyBattleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 equd = 3;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyBattleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyBattleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyBattleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyBattleReward::MergeFrom(const ReplyBattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyBattleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyBattleReward::CopyFrom(const ReplyBattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyBattleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplyBattleReward::Swap(ReplyBattleReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyBattleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyBattleReward_descriptor_;
  metadata.reflection = ReplyBattleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroReward::kIdFieldNumber;
const int HeroReward::kHexpFieldNumber;
const int HeroReward::kOccupyFieldNumber;
const int HeroReward::kWinFieldNumber;
const int HeroReward::kKillFieldNumber;
#endif  // !_MSC_VER

HeroReward::HeroReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.HeroReward)
}

void HeroReward::InitAsDefaultInstance() {
}

HeroReward::HeroReward(const HeroReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.HeroReward)
}

void HeroReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hexp_ = 0u;
  occupy_ = 0u;
  win_ = 0u;
  kill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroReward::~HeroReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.HeroReward)
  SharedDtor();
}

void HeroReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroReward_descriptor_;
}

const HeroReward& HeroReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

HeroReward* HeroReward::default_instance_ = NULL;

HeroReward* HeroReward::New() const {
  return new HeroReward;
}

void HeroReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, kill_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.HeroReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hexp;
        break;
      }

      // required uint32 hexp = 2;
      case 2: {
        if (tag == 16) {
         parse_hexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hexp_)));
          set_has_hexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_occupy;
        break;
      }

      // required uint32 occupy = 3;
      case 3: {
        if (tag == 24) {
         parse_occupy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_)));
          set_has_occupy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_win;
        break;
      }

      // required uint32 win = 4;
      case 4: {
        if (tag == 32) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kill;
        break;
      }

      // required uint32 kill = 5;
      case 5: {
        if (tag == 40) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.HeroReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.HeroReward)
  return false;
#undef DO_
}

void HeroReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.HeroReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 hexp = 2;
  if (has_hexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hexp(), output);
  }

  // required uint32 occupy = 3;
  if (has_occupy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->occupy(), output);
  }

  // required uint32 win = 4;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win(), output);
  }

  // required uint32 kill = 5;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.HeroReward)
}

::google::protobuf::uint8* HeroReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.HeroReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 hexp = 2;
  if (has_hexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hexp(), target);
  }

  // required uint32 occupy = 3;
  if (has_occupy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->occupy(), target);
  }

  // required uint32 win = 4;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win(), target);
  }

  // required uint32 kill = 5;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.HeroReward)
  return target;
}

int HeroReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 hexp = 2;
    if (has_hexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hexp());
    }

    // required uint32 occupy = 3;
    if (has_occupy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy());
    }

    // required uint32 win = 4;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win());
    }

    // required uint32 kill = 5;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroReward::MergeFrom(const HeroReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hexp()) {
      set_hexp(from.hexp());
    }
    if (from.has_occupy()) {
      set_occupy(from.occupy());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroReward::CopyFrom(const HeroReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HeroReward::Swap(HeroReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hexp_, other->hexp_);
    std::swap(occupy_, other->occupy_);
    std::swap(win_, other->win_);
    std::swap(kill_, other->kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroReward_descriptor_;
  metadata.reflection = HeroReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemReward::kIdFieldNumber;
const int ItemReward::kCountFieldNumber;
#endif  // !_MSC_VER

ItemReward::ItemReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ItemReward)
}

void ItemReward::InitAsDefaultInstance() {
}

ItemReward::ItemReward(const ItemReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ItemReward)
}

void ItemReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemReward::~ItemReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ItemReward)
  SharedDtor();
}

void ItemReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemReward_descriptor_;
}

const ItemReward& ItemReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ItemReward* ItemReward::default_instance_ = NULL;

ItemReward* ItemReward::New() const {
  return new ItemReward;
}

void ItemReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ItemReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ItemReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ItemReward)
  return false;
#undef DO_
}

void ItemReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ItemReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ItemReward)
}

::google::protobuf::uint8* ItemReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ItemReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ItemReward)
  return target;
}

int ItemReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemReward::MergeFrom(const ItemReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemReward::CopyFrom(const ItemReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemReward::Swap(ItemReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemReward_descriptor_;
  metadata.reflection = ItemReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserReward::kExpFieldNumber;
const int UserReward::kCoinFieldNumber;
const int UserReward::kWoodFieldNumber;
const int UserReward::kFoodFieldNumber;
const int UserReward::kIronFieldNumber;
const int UserReward::kGemFieldNumber;
const int UserReward::kHexpFieldNumber;
const int UserReward::kKillFieldNumber;
const int UserReward::kHurtFieldNumber;
const int UserReward::kHeadFieldNumber;
const int UserReward::kRewardFieldNumber;
const int UserReward::kBkillFieldNumber;
const int UserReward::kItemFieldNumber;
#endif  // !_MSC_VER

UserReward::UserReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.UserReward)
}

void UserReward::InitAsDefaultInstance() {
}

UserReward::UserReward(const UserReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.UserReward)
}

void UserReward::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  gem_ = 0u;
  kill_ = 0u;
  hurt_ = 0u;
  head_ = 0u;
  reward_ = 0u;
  bkill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserReward::~UserReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.UserReward)
  SharedDtor();
}

void UserReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserReward_descriptor_;
}

const UserReward& UserReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

UserReward* UserReward::default_instance_ = NULL;

UserReward* UserReward::New() const {
  return new UserReward;
}

void UserReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(exp_, gem_);
    kill_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(hurt_, reward_);
    bkill_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hexp_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.UserReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wood;
        break;
      }

      // required uint32 wood = 3;
      case 3: {
        if (tag == 24) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_food;
        break;
      }

      // required uint32 food = 4;
      case 4: {
        if (tag == 32) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iron;
        break;
      }

      // required uint32 iron = 5;
      case 5: {
        if (tag == 40) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gem;
        break;
      }

      // required uint32 gem = 6;
      case 6: {
        if (tag == 48) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hexp;
        break;
      }

      // repeated .ProtoBattleField.HeroReward hexp = 7;
      case 7: {
        if (tag == 58) {
         parse_hexp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hexp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hexp;
        if (input->ExpectTag(64)) goto parse_kill;
        break;
      }

      // optional uint32 kill = 8;
      case 8: {
        if (tag == 64) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hurt;
        break;
      }

      // optional uint32 hurt = 9;
      case 9: {
        if (tag == 72) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_head;
        break;
      }

      // optional uint32 head = 10;
      case 10: {
        if (tag == 80) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward;
        break;
      }

      // optional uint32 reward = 11;
      case 11: {
        if (tag == 88) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bkill;
        break;
      }

      // optional uint32 bkill = 12;
      case 12: {
        if (tag == 96) {
         parse_bkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bkill_)));
          set_has_bkill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_item;
        break;
      }

      // repeated .ProtoBattleField.ItemReward item = 13;
      case 13: {
        if (tag == 106) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.UserReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.UserReward)
  return false;
#undef DO_
}

void UserReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.UserReward)
  // required uint32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wood(), output);
  }

  // required uint32 food = 4;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->food(), output);
  }

  // required uint32 iron = 5;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->iron(), output);
  }

  // required uint32 gem = 6;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gem(), output);
  }

  // repeated .ProtoBattleField.HeroReward hexp = 7;
  for (int i = 0; i < this->hexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hexp(i), output);
  }

  // optional uint32 kill = 8;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kill(), output);
  }

  // optional uint32 hurt = 9;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hurt(), output);
  }

  // optional uint32 head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->head(), output);
  }

  // optional uint32 reward = 11;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reward(), output);
  }

  // optional uint32 bkill = 12;
  if (has_bkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->bkill(), output);
  }

  // repeated .ProtoBattleField.ItemReward item = 13;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.UserReward)
}

::google::protobuf::uint8* UserReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.UserReward)
  // required uint32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wood(), target);
  }

  // required uint32 food = 4;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->food(), target);
  }

  // required uint32 iron = 5;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->iron(), target);
  }

  // required uint32 gem = 6;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gem(), target);
  }

  // repeated .ProtoBattleField.HeroReward hexp = 7;
  for (int i = 0; i < this->hexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hexp(i), target);
  }

  // optional uint32 kill = 8;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kill(), target);
  }

  // optional uint32 hurt = 9;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hurt(), target);
  }

  // optional uint32 head = 10;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->head(), target);
  }

  // optional uint32 reward = 11;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reward(), target);
  }

  // optional uint32 bkill = 12;
  if (has_bkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->bkill(), target);
  }

  // repeated .ProtoBattleField.ItemReward item = 13;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.UserReward)
  return target;
}

int UserReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 3;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint32 food = 4;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 iron = 5;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

    // required uint32 gem = 6;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem());
    }

    // optional uint32 kill = 8;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hurt = 9;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

    // optional uint32 head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 reward = 11;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional uint32 bkill = 12;
    if (has_bkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bkill());
    }

  }
  // repeated .ProtoBattleField.HeroReward hexp = 7;
  total_size += 1 * this->hexp_size();
  for (int i = 0; i < this->hexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hexp(i));
  }

  // repeated .ProtoBattleField.ItemReward item = 13;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserReward::MergeFrom(const UserReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  hexp_.MergeFrom(from.hexp_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_bkill()) {
      set_bkill(from.bkill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserReward::CopyFrom(const UserReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hexp())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void UserReward::Swap(UserReward* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(gem_, other->gem_);
    hexp_.Swap(&other->hexp_);
    std::swap(kill_, other->kill_);
    std::swap(hurt_, other->hurt_);
    std::swap(head_, other->head_);
    std::swap(reward_, other->reward_);
    std::swap(bkill_, other->bkill_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserReward_descriptor_;
  metadata.reflection = UserReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionState::kMissionFieldNumber;
#endif  // !_MSC_VER

MissionState::MissionState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.MissionState)
}

void MissionState::InitAsDefaultInstance() {
}

MissionState::MissionState(const MissionState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.MissionState)
}

void MissionState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionState::~MissionState() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.MissionState)
  SharedDtor();
}

void MissionState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionState_descriptor_;
}

const MissionState& MissionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

MissionState* MissionState::default_instance_ = NULL;

MissionState* MissionState::New() const {
  return new MissionState;
}

void MissionState::Clear() {
  mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.MissionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.Mission mission = 1;
      case 1: {
        if (tag == 10) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mission;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.MissionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.MissionState)
  return false;
#undef DO_
}

void MissionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.MissionState)
  // repeated .ProtoBattleField.Mission mission = 1;
  for (int i = 0; i < this->mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.MissionState)
}

::google::protobuf::uint8* MissionState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.MissionState)
  // repeated .ProtoBattleField.Mission mission = 1;
  for (int i = 0; i < this->mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.MissionState)
  return target;
}

int MissionState::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBattleField.Mission mission = 1;
  total_size += 1 * this->mission_size();
  for (int i = 0; i < this->mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionState::MergeFrom(const MissionState& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_.MergeFrom(from.mission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionState::CopyFrom(const MissionState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mission())) return false;
  return true;
}

void MissionState::Swap(MissionState* other) {
  if (other != this) {
    mission_.Swap(&other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionState_descriptor_;
  metadata.reflection = MissionState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestHero::RequestHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestHero)
}

void RequestHero::InitAsDefaultInstance() {
}

RequestHero::RequestHero(const RequestHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestHero)
}

void RequestHero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHero::~RequestHero() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestHero)
  SharedDtor();
}

void RequestHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHero_descriptor_;
}

const RequestHero& RequestHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestHero* RequestHero::default_instance_ = NULL;

RequestHero* RequestHero::New() const {
  return new RequestHero;
}

void RequestHero::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestHero)
  return false;
#undef DO_
}

void RequestHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestHero)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestHero)
}

::google::protobuf::uint8* RequestHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestHero)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestHero)
  return target;
}

int RequestHero::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHero::MergeFrom(const RequestHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHero::CopyFrom(const RequestHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHero::IsInitialized() const {

  return true;
}

void RequestHero::Swap(RequestHero* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHero_descriptor_;
  metadata.reflection = RequestHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroState::kHeroFieldNumber;
const int HeroState::kRewardFieldNumber;
#endif  // !_MSC_VER

HeroState::HeroState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.HeroState)
}

void HeroState::InitAsDefaultInstance() {
  reward_ = const_cast< ::ProtoBattleField::UserReward*>(&::ProtoBattleField::UserReward::default_instance());
}

HeroState::HeroState(const HeroState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.HeroState)
}

void HeroState::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroState::~HeroState() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.HeroState)
  SharedDtor();
}

void HeroState::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void HeroState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroState_descriptor_;
}

const HeroState& HeroState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

HeroState* HeroState::default_instance_ = NULL;

HeroState* HeroState::New() const {
  return new HeroState;
}

void HeroState::Clear() {
  if (has_reward()) {
    if (reward_ != NULL) reward_->::ProtoBattleField::UserReward::Clear();
  }
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.HeroState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.Hero hero = 1;
      case 1: {
        if (tag == 10) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional .ProtoBattleField.UserReward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.HeroState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.HeroState)
  return false;
#undef DO_
}

void HeroState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.HeroState)
  // repeated .ProtoBattleField.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }

  // optional .ProtoBattleField.UserReward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.HeroState)
}

::google::protobuf::uint8* HeroState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.HeroState)
  // repeated .ProtoBattleField.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }

  // optional .ProtoBattleField.UserReward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.HeroState)
  return target;
}

int HeroState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ProtoBattleField.UserReward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated .ProtoBattleField.Hero hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroState::MergeFrom(const HeroState& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::ProtoBattleField::UserReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroState::CopyFrom(const HeroState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void HeroState::Swap(HeroState* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroState_descriptor_;
  metadata.reflection = HeroState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityState::kCityFieldNumber;
#endif  // !_MSC_VER

CityState::CityState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.CityState)
}

void CityState::InitAsDefaultInstance() {
}

CityState::CityState(const CityState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.CityState)
}

void CityState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityState::~CityState() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.CityState)
  SharedDtor();
}

void CityState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityState_descriptor_;
}

const CityState& CityState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

CityState* CityState::default_instance_ = NULL;

CityState* CityState::New() const {
  return new CityState;
}

void CityState::Clear() {
  city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.CityState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.City city = 1;
      case 1: {
        if (tag == 10) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_city;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.CityState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.CityState)
  return false;
#undef DO_
}

void CityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.CityState)
  // repeated .ProtoBattleField.City city = 1;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->city(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.CityState)
}

::google::protobuf::uint8* CityState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.CityState)
  // repeated .ProtoBattleField.City city = 1;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.CityState)
  return target;
}

int CityState::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBattleField.City city = 1;
  total_size += 1 * this->city_size();
  for (int i = 0; i < this->city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityState::MergeFrom(const CityState& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_.MergeFrom(from.city_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityState::CopyFrom(const CityState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->city())) return false;
  return true;
}

void CityState::Swap(CityState* other) {
  if (other != this) {
    city_.Swap(&other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityState_descriptor_;
  metadata.reflection = CityState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMove::kIdFieldNumber;
const int RequestMove::kCidsFieldNumber;
#endif  // !_MSC_VER

RequestMove::RequestMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestMove)
}

void RequestMove::InitAsDefaultInstance() {
}

RequestMove::RequestMove(const RequestMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestMove)
}

void RequestMove::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMove::~RequestMove() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestMove)
  SharedDtor();
}

void RequestMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMove_descriptor_;
}

const RequestMove& RequestMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestMove* RequestMove::default_instance_ = NULL;

RequestMove* RequestMove::New() const {
  return new RequestMove;
}

void RequestMove::Clear() {
  id_ = 0u;
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        break;
      }

      // repeated uint32 cids = 2;
      case 2: {
        if (tag == 16) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestMove)
  return false;
#undef DO_
}

void RequestMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestMove)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestMove)
}

::google::protobuf::uint8* RequestMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestMove)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestMove)
  return target;
}

int RequestMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 cids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMove::MergeFrom(const RequestMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMove::CopyFrom(const RequestMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestMove::Swap(RequestMove* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMove_descriptor_;
  metadata.reflection = RequestMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyMove::kIdFieldNumber;
const int ReplyMove::kTsFieldNumber;
const int ReplyMove::kMtsFieldNumber;
#endif  // !_MSC_VER

ReplyMove::ReplyMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyMove)
}

void ReplyMove::InitAsDefaultInstance() {
}

ReplyMove::ReplyMove(const ReplyMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyMove)
}

void ReplyMove::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ts_ = 0u;
  mts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyMove::~ReplyMove() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyMove)
  SharedDtor();
}

void ReplyMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyMove_descriptor_;
}

const ReplyMove& ReplyMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyMove* ReplyMove::default_instance_ = NULL;

ReplyMove* ReplyMove::New() const {
  return new ReplyMove;
}

void ReplyMove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyMove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, mts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mts;
        break;
      }

      // required uint32 mts = 3;
      case 3: {
        if (tag == 24) {
         parse_mts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mts_)));
          set_has_mts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyMove)
  return false;
#undef DO_
}

void ReplyMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyMove)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // required uint32 mts = 3;
  if (has_mts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyMove)
}

::google::protobuf::uint8* ReplyMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyMove)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // required uint32 mts = 3;
  if (has_mts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyMove)
  return target;
}

int ReplyMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 mts = 3;
    if (has_mts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyMove::MergeFrom(const ReplyMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_mts()) {
      set_mts(from.mts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyMove::CopyFrom(const ReplyMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReplyMove::Swap(ReplyMove* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ts_, other->ts_);
    std::swap(mts_, other->mts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyMove_descriptor_;
  metadata.reflection = ReplyMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStop::kIdFieldNumber;
#endif  // !_MSC_VER

RequestStop::RequestStop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestStop)
}

void RequestStop::InitAsDefaultInstance() {
}

RequestStop::RequestStop(const RequestStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestStop)
}

void RequestStop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStop::~RequestStop() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestStop)
  SharedDtor();
}

void RequestStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStop_descriptor_;
}

const RequestStop& RequestStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestStop* RequestStop::default_instance_ = NULL;

RequestStop* RequestStop::New() const {
  return new RequestStop;
}

void RequestStop::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestStop)
  return false;
#undef DO_
}

void RequestStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestStop)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestStop)
}

::google::protobuf::uint8* RequestStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestStop)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestStop)
  return target;
}

int RequestStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStop::MergeFrom(const RequestStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStop::CopyFrom(const RequestStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestStop::Swap(RequestStop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStop_descriptor_;
  metadata.reflection = RequestStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCityKingdom::kCidFieldNumber;
#endif  // !_MSC_VER

RequestCityKingdom::RequestCityKingdom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestCityKingdom)
}

void RequestCityKingdom::InitAsDefaultInstance() {
}

RequestCityKingdom::RequestCityKingdom(const RequestCityKingdom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestCityKingdom)
}

void RequestCityKingdom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCityKingdom::~RequestCityKingdom() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestCityKingdom)
  SharedDtor();
}

void RequestCityKingdom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCityKingdom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCityKingdom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCityKingdom_descriptor_;
}

const RequestCityKingdom& RequestCityKingdom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestCityKingdom* RequestCityKingdom::default_instance_ = NULL;

RequestCityKingdom* RequestCityKingdom::New() const {
  return new RequestCityKingdom;
}

void RequestCityKingdom::Clear() {
  cid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCityKingdom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestCityKingdom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cid = 1;
      case 1: {
        if (tag == 8) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestCityKingdom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestCityKingdom)
  return false;
#undef DO_
}

void RequestCityKingdom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestCityKingdom)
  // repeated uint32 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestCityKingdom)
}

::google::protobuf::uint8* RequestCityKingdom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestCityKingdom)
  // repeated uint32 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestCityKingdom)
  return target;
}

int RequestCityKingdom::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cid(i));
    }
    total_size += 1 * this->cid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCityKingdom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCityKingdom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCityKingdom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCityKingdom::MergeFrom(const RequestCityKingdom& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_.MergeFrom(from.cid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCityKingdom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCityKingdom::CopyFrom(const RequestCityKingdom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCityKingdom::IsInitialized() const {

  return true;
}

void RequestCityKingdom::Swap(RequestCityKingdom* other) {
  if (other != this) {
    cid_.Swap(&other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCityKingdom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCityKingdom_descriptor_;
  metadata.reflection = RequestCityKingdom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyCityKingdom::kCidFieldNumber;
const int ReplyCityKingdom::kKingdomFieldNumber;
const int ReplyCityKingdom::kFightFieldNumber;
#endif  // !_MSC_VER

ReplyCityKingdom::ReplyCityKingdom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyCityKingdom)
}

void ReplyCityKingdom::InitAsDefaultInstance() {
}

ReplyCityKingdom::ReplyCityKingdom(const ReplyCityKingdom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyCityKingdom)
}

void ReplyCityKingdom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyCityKingdom::~ReplyCityKingdom() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyCityKingdom)
  SharedDtor();
}

void ReplyCityKingdom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyCityKingdom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyCityKingdom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyCityKingdom_descriptor_;
}

const ReplyCityKingdom& ReplyCityKingdom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyCityKingdom* ReplyCityKingdom::default_instance_ = NULL;

ReplyCityKingdom* ReplyCityKingdom::New() const {
  return new ReplyCityKingdom;
}

void ReplyCityKingdom::Clear() {
  cid_.Clear();
  kingdom_.Clear();
  fight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyCityKingdom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyCityKingdom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cid = 1;
      case 1: {
        if (tag == 8) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cid;
        if (input->ExpectTag(16)) goto parse_kingdom;
        break;
      }

      // repeated uint32 kingdom = 2;
      case 2: {
        if (tag == 16) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_kingdom())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kingdom())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kingdom;
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // repeated bool fight = 3;
      case 3: {
        if (tag == 24) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_fight())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_fight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyCityKingdom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyCityKingdom)
  return false;
#undef DO_
}

void ReplyCityKingdom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyCityKingdom)
  // repeated uint32 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cid(i), output);
  }

  // repeated uint32 kingdom = 2;
  for (int i = 0; i < this->kingdom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->kingdom(i), output);
  }

  // repeated bool fight = 3;
  for (int i = 0; i < this->fight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->fight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyCityKingdom)
}

::google::protobuf::uint8* ReplyCityKingdom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyCityKingdom)
  // repeated uint32 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cid(i), target);
  }

  // repeated uint32 kingdom = 2;
  for (int i = 0; i < this->kingdom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->kingdom(i), target);
  }

  // repeated bool fight = 3;
  for (int i = 0; i < this->fight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->fight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyCityKingdom)
  return target;
}

int ReplyCityKingdom::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cid(i));
    }
    total_size += 1 * this->cid_size() + data_size;
  }

  // repeated uint32 kingdom = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingdom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kingdom(i));
    }
    total_size += 1 * this->kingdom_size() + data_size;
  }

  // repeated bool fight = 3;
  {
    int data_size = 0;
    data_size = 1 * this->fight_size();
    total_size += 1 * this->fight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyCityKingdom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyCityKingdom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyCityKingdom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyCityKingdom::MergeFrom(const ReplyCityKingdom& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_.MergeFrom(from.cid_);
  kingdom_.MergeFrom(from.kingdom_);
  fight_.MergeFrom(from.fight_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyCityKingdom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCityKingdom::CopyFrom(const ReplyCityKingdom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCityKingdom::IsInitialized() const {

  return true;
}

void ReplyCityKingdom::Swap(ReplyCityKingdom* other) {
  if (other != this) {
    cid_.Swap(&other->cid_);
    kingdom_.Swap(&other->kingdom_);
    fight_.Swap(&other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyCityKingdom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyCityKingdom_descriptor_;
  metadata.reflection = ReplyCityKingdom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCityCount::kCidFieldNumber;
#endif  // !_MSC_VER

RequestCityCount::RequestCityCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestCityCount)
}

void RequestCityCount::InitAsDefaultInstance() {
}

RequestCityCount::RequestCityCount(const RequestCityCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestCityCount)
}

void RequestCityCount::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCityCount::~RequestCityCount() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestCityCount)
  SharedDtor();
}

void RequestCityCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCityCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCityCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCityCount_descriptor_;
}

const RequestCityCount& RequestCityCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestCityCount* RequestCityCount::default_instance_ = NULL;

RequestCityCount* RequestCityCount::New() const {
  return new RequestCityCount;
}

void RequestCityCount::Clear() {
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCityCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestCityCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestCityCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestCityCount)
  return false;
#undef DO_
}

void RequestCityCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestCityCount)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestCityCount)
}

::google::protobuf::uint8* RequestCityCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestCityCount)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestCityCount)
  return target;
}

int RequestCityCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCityCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCityCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCityCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCityCount::MergeFrom(const RequestCityCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCityCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCityCount::CopyFrom(const RequestCityCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCityCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCityCount::Swap(RequestCityCount* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCityCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCityCount_descriptor_;
  metadata.reflection = RequestCityCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyCityCount::kCountFieldNumber;
#endif  // !_MSC_VER

ReplyCityCount::ReplyCityCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyCityCount)
}

void ReplyCityCount::InitAsDefaultInstance() {
}

ReplyCityCount::ReplyCityCount(const ReplyCityCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyCityCount)
}

void ReplyCityCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyCityCount::~ReplyCityCount() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyCityCount)
  SharedDtor();
}

void ReplyCityCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyCityCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyCityCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyCityCount_descriptor_;
}

const ReplyCityCount& ReplyCityCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyCityCount* ReplyCityCount::default_instance_ = NULL;

ReplyCityCount* ReplyCityCount::New() const {
  return new ReplyCityCount;
}

void ReplyCityCount::Clear() {
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyCityCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyCityCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 count = 1;
      case 1: {
        if (tag == 8) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_count())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyCityCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyCityCount)
  return false;
#undef DO_
}

void ReplyCityCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyCityCount)
  // repeated uint32 count = 1;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyCityCount)
}

::google::protobuf::uint8* ReplyCityCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyCityCount)
  // repeated uint32 count = 1;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyCityCount)
  return target;
}

int ReplyCityCount::ByteSize() const {
  int total_size = 0;

  // repeated uint32 count = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyCityCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyCityCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyCityCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyCityCount::MergeFrom(const ReplyCityCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_.MergeFrom(from.count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyCityCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCityCount::CopyFrom(const ReplyCityCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCityCount::IsInitialized() const {

  return true;
}

void ReplyCityCount::Swap(ReplyCityCount* other) {
  if (other != this) {
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyCityCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyCityCount_descriptor_;
  metadata.reflection = ReplyCityCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCityMaster::kCidFieldNumber;
#endif  // !_MSC_VER

RequestCityMaster::RequestCityMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestCityMaster)
}

void RequestCityMaster::InitAsDefaultInstance() {
}

RequestCityMaster::RequestCityMaster(const RequestCityMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestCityMaster)
}

void RequestCityMaster::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCityMaster::~RequestCityMaster() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestCityMaster)
  SharedDtor();
}

void RequestCityMaster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCityMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCityMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCityMaster_descriptor_;
}

const RequestCityMaster& RequestCityMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestCityMaster* RequestCityMaster::default_instance_ = NULL;

RequestCityMaster* RequestCityMaster::New() const {
  return new RequestCityMaster;
}

void RequestCityMaster::Clear() {
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCityMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestCityMaster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestCityMaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestCityMaster)
  return false;
#undef DO_
}

void RequestCityMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestCityMaster)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestCityMaster)
}

::google::protobuf::uint8* RequestCityMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestCityMaster)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestCityMaster)
  return target;
}

int RequestCityMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCityMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCityMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCityMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCityMaster::MergeFrom(const RequestCityMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCityMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCityMaster::CopyFrom(const RequestCityMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCityMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCityMaster::Swap(RequestCityMaster* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCityMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCityMaster_descriptor_;
  metadata.reflection = RequestCityMaster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyCityMaster::kUidFieldNumber;
const int ReplyCityMaster::kNameFieldNumber;
const int ReplyCityMaster::kAidFieldNumber;
const int ReplyCityMaster::kJobFieldNumber;
const int ReplyCityMaster::kLevelFieldNumber;
const int ReplyCityMaster::kHeroIdsFieldNumber;
const int ReplyCityMaster::kHeroLvlFieldNumber;
const int ReplyCityMaster::kHeroTroopsFieldNumber;
const int ReplyCityMaster::kRewardFieldNumber;
const int ReplyCityMaster::kNextRewardFieldNumber;
const int ReplyCityMaster::kCcdFieldNumber;
const int ReplyCityMaster::kCtimesFieldNumber;
#endif  // !_MSC_VER

ReplyCityMaster::ReplyCityMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyCityMaster)
}

void ReplyCityMaster::InitAsDefaultInstance() {
}

ReplyCityMaster::ReplyCityMaster(const ReplyCityMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyCityMaster)
}

void ReplyCityMaster::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aid_ = 0u;
  job_ = 0u;
  level_ = 0u;
  reward_ = 0u;
  next_reward_ = 0u;
  ccd_ = 0u;
  ctimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyCityMaster::~ReplyCityMaster() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyCityMaster)
  SharedDtor();
}

void ReplyCityMaster::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReplyCityMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyCityMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyCityMaster_descriptor_;
}

const ReplyCityMaster& ReplyCityMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyCityMaster* ReplyCityMaster::default_instance_ = NULL;

ReplyCityMaster* ReplyCityMaster::New() const {
  return new ReplyCityMaster;
}

void ReplyCityMaster::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyCityMaster*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(reward_, ctimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_ids_.Clear();
  hero_lvl_.Clear();
  hero_troops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyCityMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyCityMaster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aid;
        break;
      }

      // optional uint32 aid = 3;
      case 3: {
        if (tag == 24) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (tag == 32) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hero_ids;
        break;
      }

      // repeated uint32 hero_ids = 6;
      case 6: {
        if (tag == 48) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_hero_ids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hero_ids;
        if (input->ExpectTag(56)) goto parse_hero_lvl;
        break;
      }

      // repeated uint32 hero_lvl = 7;
      case 7: {
        if (tag == 56) {
         parse_hero_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_hero_lvl())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_lvl())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hero_lvl;
        if (input->ExpectTag(64)) goto parse_hero_troops;
        break;
      }

      // repeated uint32 hero_troops = 8;
      case 8: {
        if (tag == 64) {
         parse_hero_troops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_hero_troops())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_troops())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hero_troops;
        if (input->ExpectTag(72)) goto parse_reward;
        break;
      }

      // required uint32 reward = 9;
      case 9: {
        if (tag == 72) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_next_reward;
        break;
      }

      // required uint32 next_reward = 10;
      case 10: {
        if (tag == 80) {
         parse_next_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_reward_)));
          set_has_next_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ccd;
        break;
      }

      // required uint32 ccd = 11;
      case 11: {
        if (tag == 88) {
         parse_ccd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccd_)));
          set_has_ccd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ctimes;
        break;
      }

      // required uint32 ctimes = 12;
      case 12: {
        if (tag == 96) {
         parse_ctimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctimes_)));
          set_has_ctimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyCityMaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyCityMaster)
  return false;
#undef DO_
}

void ReplyCityMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyCityMaster)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 aid = 3;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->aid(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // repeated uint32 hero_ids = 6;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->hero_ids(i), output);
  }

  // repeated uint32 hero_lvl = 7;
  for (int i = 0; i < this->hero_lvl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->hero_lvl(i), output);
  }

  // repeated uint32 hero_troops = 8;
  for (int i = 0; i < this->hero_troops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->hero_troops(i), output);
  }

  // required uint32 reward = 9;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reward(), output);
  }

  // required uint32 next_reward = 10;
  if (has_next_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->next_reward(), output);
  }

  // required uint32 ccd = 11;
  if (has_ccd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ccd(), output);
  }

  // required uint32 ctimes = 12;
  if (has_ctimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ctimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyCityMaster)
}

::google::protobuf::uint8* ReplyCityMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyCityMaster)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 aid = 3;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->aid(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // repeated uint32 hero_ids = 6;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->hero_ids(i), target);
  }

  // repeated uint32 hero_lvl = 7;
  for (int i = 0; i < this->hero_lvl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->hero_lvl(i), target);
  }

  // repeated uint32 hero_troops = 8;
  for (int i = 0; i < this->hero_troops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->hero_troops(i), target);
  }

  // required uint32 reward = 9;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reward(), target);
  }

  // required uint32 next_reward = 10;
  if (has_next_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->next_reward(), target);
  }

  // required uint32 ccd = 11;
  if (has_ccd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ccd(), target);
  }

  // required uint32 ctimes = 12;
  if (has_ctimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ctimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyCityMaster)
  return target;
}

int ReplyCityMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 aid = 3;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 reward = 9;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // required uint32 next_reward = 10;
    if (has_next_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_reward());
    }

    // required uint32 ccd = 11;
    if (has_ccd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccd());
    }

    // required uint32 ctimes = 12;
    if (has_ctimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctimes());
    }

  }
  // repeated uint32 hero_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  // repeated uint32 hero_lvl = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_lvl_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_lvl(i));
    }
    total_size += 1 * this->hero_lvl_size() + data_size;
  }

  // repeated uint32 hero_troops = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_troops_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_troops(i));
    }
    total_size += 1 * this->hero_troops_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyCityMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyCityMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyCityMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyCityMaster::MergeFrom(const ReplyCityMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  hero_lvl_.MergeFrom(from.hero_lvl_);
  hero_troops_.MergeFrom(from.hero_troops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_next_reward()) {
      set_next_reward(from.next_reward());
    }
    if (from.has_ccd()) {
      set_ccd(from.ccd());
    }
    if (from.has_ctimes()) {
      set_ctimes(from.ctimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyCityMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCityMaster::CopyFrom(const ReplyCityMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCityMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000f01) != 0x00000f01) return false;

  return true;
}

void ReplyCityMaster::Swap(ReplyCityMaster* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(aid_, other->aid_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    hero_ids_.Swap(&other->hero_ids_);
    hero_lvl_.Swap(&other->hero_lvl_);
    hero_troops_.Swap(&other->hero_troops_);
    std::swap(reward_, other->reward_);
    std::swap(next_reward_, other->next_reward_);
    std::swap(ccd_, other->ccd_);
    std::swap(ctimes_, other->ctimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyCityMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyCityMaster_descriptor_;
  metadata.reflection = ReplyCityMaster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartCityBattle::kCidFieldNumber;
const int StartCityBattle::kHeroFieldNumber;
#endif  // !_MSC_VER

StartCityBattle::StartCityBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.StartCityBattle)
}

void StartCityBattle::InitAsDefaultInstance() {
}

StartCityBattle::StartCityBattle(const StartCityBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.StartCityBattle)
}

void StartCityBattle::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartCityBattle::~StartCityBattle() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.StartCityBattle)
  SharedDtor();
}

void StartCityBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartCityBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartCityBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartCityBattle_descriptor_;
}

const StartCityBattle& StartCityBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

StartCityBattle* StartCityBattle::default_instance_ = NULL;

StartCityBattle* StartCityBattle::New() const {
  return new StartCityBattle;
}

void StartCityBattle::Clear() {
  cid_ = 0u;
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartCityBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.StartCityBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero;
        break;
      }

      // repeated uint32 hero = 2;
      case 2: {
        if (tag == 16) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hero())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.StartCityBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.StartCityBattle)
  return false;
#undef DO_
}

void StartCityBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.StartCityBattle)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // repeated uint32 hero = 2;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.StartCityBattle)
}

::google::protobuf::uint8* StartCityBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.StartCityBattle)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // repeated uint32 hero = 2;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.StartCityBattle)
  return target;
}

int StartCityBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  // repeated uint32 hero = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero(i));
    }
    total_size += 1 * this->hero_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCityBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartCityBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartCityBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartCityBattle::MergeFrom(const StartCityBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartCityBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartCityBattle::CopyFrom(const StartCityBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCityBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartCityBattle::Swap(StartCityBattle* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartCityBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartCityBattle_descriptor_;
  metadata.reflection = StartCityBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCityReward::kCidFieldNumber;
#endif  // !_MSC_VER

RequestCityReward::RequestCityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestCityReward)
}

void RequestCityReward::InitAsDefaultInstance() {
}

RequestCityReward::RequestCityReward(const RequestCityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestCityReward)
}

void RequestCityReward::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCityReward::~RequestCityReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestCityReward)
  SharedDtor();
}

void RequestCityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCityReward_descriptor_;
}

const RequestCityReward& RequestCityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestCityReward* RequestCityReward::default_instance_ = NULL;

RequestCityReward* RequestCityReward::New() const {
  return new RequestCityReward;
}

void RequestCityReward::Clear() {
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestCityReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestCityReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestCityReward)
  return false;
#undef DO_
}

void RequestCityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestCityReward)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestCityReward)
}

::google::protobuf::uint8* RequestCityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestCityReward)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestCityReward)
  return target;
}

int RequestCityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCityReward::MergeFrom(const RequestCityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCityReward::CopyFrom(const RequestCityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCityReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCityReward::Swap(RequestCityReward* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCityReward_descriptor_;
  metadata.reflection = RequestCityReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyCityReward::kTypeFieldNumber;
const int ReplyCityReward::kCountFieldNumber;
const int ReplyCityReward::kEqudFieldNumber;
#endif  // !_MSC_VER

ReplyCityReward::ReplyCityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyCityReward)
}

void ReplyCityReward::InitAsDefaultInstance() {
}

ReplyCityReward::ReplyCityReward(const ReplyCityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyCityReward)
}

void ReplyCityReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyCityReward::~ReplyCityReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyCityReward)
  SharedDtor();
}

void ReplyCityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyCityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyCityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyCityReward_descriptor_;
}

const ReplyCityReward& ReplyCityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyCityReward* ReplyCityReward::default_instance_ = NULL;

ReplyCityReward* ReplyCityReward::New() const {
  return new ReplyCityReward;
}

void ReplyCityReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyCityReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, equd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyCityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyCityReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equd;
        break;
      }

      // optional uint32 equd = 3;
      case 3: {
        if (tag == 24) {
         parse_equd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyCityReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyCityReward)
  return false;
#undef DO_
}

void ReplyCityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyCityReward)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 equd = 3;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyCityReward)
}

::google::protobuf::uint8* ReplyCityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyCityReward)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 equd = 3;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyCityReward)
  return target;
}

int ReplyCityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 equd = 3;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyCityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyCityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyCityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyCityReward::MergeFrom(const ReplyCityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyCityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCityReward::CopyFrom(const ReplyCityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCityReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplyCityReward::Swap(ReplyCityReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyCityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyCityReward_descriptor_;
  metadata.reflection = ReplyCityReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCity::kCidFieldNumber;
#endif  // !_MSC_VER

RequestCity::RequestCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestCity)
}

void RequestCity::InitAsDefaultInstance() {
}

RequestCity::RequestCity(const RequestCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestCity)
}

void RequestCity::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCity::~RequestCity() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestCity)
  SharedDtor();
}

void RequestCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCity_descriptor_;
}

const RequestCity& RequestCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestCity* RequestCity::default_instance_ = NULL;

RequestCity* RequestCity::New() const {
  return new RequestCity;
}

void RequestCity::Clear() {
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestCity)
  return false;
#undef DO_
}

void RequestCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestCity)
}

::google::protobuf::uint8* RequestCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestCity)
  return target;
}

int RequestCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCity::MergeFrom(const RequestCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCity::CopyFrom(const RequestCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCity::Swap(RequestCity* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCity_descriptor_;
  metadata.reflection = RequestCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGate::kUidFieldNumber;
#endif  // !_MSC_VER

RequestGate::RequestGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestGate)
}

void RequestGate::InitAsDefaultInstance() {
}

RequestGate::RequestGate(const RequestGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestGate)
}

void RequestGate::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGate::~RequestGate() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestGate)
  SharedDtor();
}

void RequestGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGate_descriptor_;
}

const RequestGate& RequestGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestGate* RequestGate::default_instance_ = NULL;

RequestGate* RequestGate::New() const {
  return new RequestGate;
}

void RequestGate::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestGate)
  return false;
#undef DO_
}

void RequestGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestGate)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestGate)
}

::google::protobuf::uint8* RequestGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestGate)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestGate)
  return target;
}

int RequestGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGate::MergeFrom(const RequestGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGate::CopyFrom(const RequestGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestGate::Swap(RequestGate* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGate_descriptor_;
  metadata.reflection = RequestGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRush::kUidFieldNumber;
const int RequestRush::kIdFieldNumber;
const int RequestRush::kEuidFieldNumber;
const int RequestRush::kEidFieldNumber;
#endif  // !_MSC_VER

RequestRush::RequestRush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestRush)
}

void RequestRush::InitAsDefaultInstance() {
}

RequestRush::RequestRush(const RequestRush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestRush)
}

void RequestRush::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  euid_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRush::~RequestRush() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestRush)
  SharedDtor();
}

void RequestRush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRush_descriptor_;
}

const RequestRush& RequestRush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestRush* RequestRush::default_instance_ = NULL;

RequestRush* RequestRush::New() const {
  return new RequestRush;
}

void RequestRush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestRush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_euid;
        break;
      }

      // required uint32 euid = 3;
      case 3: {
        if (tag == 24) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eid;
        break;
      }

      // required uint32 eid = 4;
      case 4: {
        if (tag == 32) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestRush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestRush)
  return false;
#undef DO_
}

void RequestRush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->euid(), output);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestRush)
}

::google::protobuf::uint8* RequestRush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->euid(), target);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestRush)
  return target;
}

int RequestRush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 euid = 3;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 eid = 4;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRush::MergeFrom(const RequestRush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRush::CopyFrom(const RequestRush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestRush::Swap(RequestRush* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(euid_, other->euid_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRush_descriptor_;
  metadata.reflection = RequestRush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLadder::kUidFieldNumber;
#endif  // !_MSC_VER

RequestLadder::RequestLadder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestLadder)
}

void RequestLadder::InitAsDefaultInstance() {
}

RequestLadder::RequestLadder(const RequestLadder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestLadder)
}

void RequestLadder::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLadder::~RequestLadder() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestLadder)
  SharedDtor();
}

void RequestLadder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestLadder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLadder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLadder_descriptor_;
}

const RequestLadder& RequestLadder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestLadder* RequestLadder::default_instance_ = NULL;

RequestLadder* RequestLadder::New() const {
  return new RequestLadder;
}

void RequestLadder::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLadder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestLadder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestLadder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestLadder)
  return false;
#undef DO_
}

void RequestLadder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestLadder)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestLadder)
}

::google::protobuf::uint8* RequestLadder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestLadder)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestLadder)
  return target;
}

int RequestLadder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLadder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLadder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLadder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLadder::MergeFrom(const RequestLadder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLadder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLadder::CopyFrom(const RequestLadder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLadder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestLadder::Swap(RequestLadder* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLadder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLadder_descriptor_;
  metadata.reflection = RequestLadder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroUid::kUidFieldNumber;
const int HeroUid::kHeroFieldNumber;
#endif  // !_MSC_VER

HeroUid::HeroUid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.HeroUid)
}

void HeroUid::InitAsDefaultInstance() {
  hero_ = const_cast< ::ProtoBattleField::Hero*>(&::ProtoBattleField::Hero::default_instance());
}

HeroUid::HeroUid(const HeroUid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.HeroUid)
}

void HeroUid::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroUid::~HeroUid() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.HeroUid)
  SharedDtor();
}

void HeroUid::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void HeroUid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroUid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroUid_descriptor_;
}

const HeroUid& HeroUid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

HeroUid* HeroUid::default_instance_ = NULL;

HeroUid* HeroUid::New() const {
  return new HeroUid;
}

void HeroUid::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoBattleField::Hero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroUid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.HeroUid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }

      // required .ProtoBattleField.Hero hero = 2;
      case 2: {
        if (tag == 18) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.HeroUid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.HeroUid)
  return false;
#undef DO_
}

void HeroUid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.HeroUid)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required .ProtoBattleField.Hero hero = 2;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.HeroUid)
}

::google::protobuf::uint8* HeroUid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.HeroUid)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required .ProtoBattleField.Hero hero = 2;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.HeroUid)
  return target;
}

int HeroUid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required .ProtoBattleField.Hero hero = 2;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroUid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroUid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroUid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroUid::MergeFrom(const HeroUid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoBattleField::Hero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroUid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroUid::CopyFrom(const HeroUid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroUid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void HeroUid::Swap(HeroUid* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroUid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroUid_descriptor_;
  metadata.reflection = HeroUid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HidUid::kUidFieldNumber;
const int HidUid::kIdFieldNumber;
const int HidUid::kOuidFieldNumber;
const int HidUid::kOidFieldNumber;
#endif  // !_MSC_VER

HidUid::HidUid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.HidUid)
}

void HidUid::InitAsDefaultInstance() {
}

HidUid::HidUid(const HidUid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.HidUid)
}

void HidUid::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  ouid_ = 0u;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HidUid::~HidUid() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.HidUid)
  SharedDtor();
}

void HidUid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HidUid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HidUid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HidUid_descriptor_;
}

const HidUid& HidUid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

HidUid* HidUid::default_instance_ = NULL;

HidUid* HidUid::New() const {
  return new HidUid;
}

void HidUid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HidUid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, oid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HidUid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.HidUid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ouid;
        break;
      }

      // optional uint32 ouid = 3;
      case 3: {
        if (tag == 24) {
         parse_ouid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ouid_)));
          set_has_ouid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_oid;
        break;
      }

      // optional uint32 oid = 4;
      case 4: {
        if (tag == 32) {
         parse_oid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oid_)));
          set_has_oid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.HidUid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.HidUid)
  return false;
#undef DO_
}

void HidUid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.HidUid)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 ouid = 3;
  if (has_ouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ouid(), output);
  }

  // optional uint32 oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.HidUid)
}

::google::protobuf::uint8* HidUid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.HidUid)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 ouid = 3;
  if (has_ouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ouid(), target);
  }

  // optional uint32 oid = 4;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.HidUid)
  return target;
}

int HidUid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ouid = 3;
    if (has_ouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ouid());
    }

    // optional uint32 oid = 4;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HidUid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HidUid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HidUid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HidUid::MergeFrom(const HidUid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ouid()) {
      set_ouid(from.ouid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HidUid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HidUid::CopyFrom(const HidUid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HidUid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HidUid::Swap(HidUid* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(ouid_, other->ouid_);
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HidUid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HidUid_descriptor_;
  metadata.reflection = HidUid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUidFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kKingdomFieldNumber;
const int UserInfo::kFigFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kingdom_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, kingdom_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kingdom;
        break;
      }

      // required uint32 kingdom = 3;
      case 3: {
        if (tag == 24) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fig;
        break;
      }

      // optional bytes fig = 4;
      case 4: {
        if (tag == 34) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.UserInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 kingdom = 3;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kingdom(), output);
  }

  // optional bytes fig = 4;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.UserInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 kingdom = 3;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kingdom(), target);
  }

  // optional bytes fig = 4;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 kingdom = 3;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

    // optional bytes fig = 4;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(kingdom_, other->kingdom_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Turn::kAShapeFieldNumber;
const int Turn::kDShapeFieldNumber;
const int Turn::kAttShapeFieldNumber;
const int Turn::kDefShapeFieldNumber;
const int Turn::kASkillFieldNumber;
const int Turn::kDSkillFieldNumber;
const int Turn::kAAttackFieldNumber;
const int Turn::kDAttackFieldNumber;
const int Turn::kTsFieldNumber;
const int Turn::kNexttsFieldNumber;
const int Turn::kAExplodeFieldNumber;
const int Turn::kDExplodeFieldNumber;
#endif  // !_MSC_VER

Turn::Turn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.Turn)
}

void Turn::InitAsDefaultInstance() {
}

Turn::Turn(const Turn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.Turn)
}

void Turn::SharedCtor() {
  _cached_size_ = 0;
  a_shape_ = 0u;
  d_shape_ = 0u;
  att_shape_ = 0u;
  def_shape_ = 0u;
  ts_ = 0u;
  nextts_ = 0u;
  a_explode_ = 0u;
  d_explode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Turn::~Turn() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.Turn)
  SharedDtor();
}

void Turn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Turn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Turn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Turn_descriptor_;
}

const Turn& Turn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

Turn* Turn::default_instance_ = NULL;

Turn* Turn::New() const {
  return new Turn;
}

void Turn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Turn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(a_shape_, def_shape_);
  ZR_(ts_, d_explode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  a_skill_.Clear();
  d_skill_.Clear();
  a_attack_.Clear();
  d_attack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Turn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.Turn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 a_shape = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_shape_)));
          set_has_a_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_d_shape;
        break;
      }

      // required uint32 d_shape = 2;
      case 2: {
        if (tag == 16) {
         parse_d_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_shape_)));
          set_has_d_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_att_shape;
        break;
      }

      // required uint32 att_shape = 3;
      case 3: {
        if (tag == 24) {
         parse_att_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_shape_)));
          set_has_att_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_def_shape;
        break;
      }

      // required uint32 def_shape = 4;
      case 4: {
        if (tag == 32) {
         parse_def_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_shape_)));
          set_has_def_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_a_skill;
        break;
      }

      // repeated uint32 a_skill = 5;
      case 5: {
        if (tag == 40) {
         parse_a_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_a_skill())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_a_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_a_skill;
        if (input->ExpectTag(48)) goto parse_d_skill;
        break;
      }

      // repeated uint32 d_skill = 6;
      case 6: {
        if (tag == 48) {
         parse_d_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_d_skill())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_d_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_d_skill;
        if (input->ExpectTag(56)) goto parse_a_attack;
        break;
      }

      // repeated uint32 a_attack = 7;
      case 7: {
        if (tag == 56) {
         parse_a_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_a_attack())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_a_attack())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_a_attack;
        if (input->ExpectTag(64)) goto parse_d_attack;
        break;
      }

      // repeated uint32 d_attack = 8;
      case 8: {
        if (tag == 64) {
         parse_d_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_d_attack())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_d_attack())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_d_attack;
        if (input->ExpectTag(72)) goto parse_ts;
        break;
      }

      // required uint32 ts = 9;
      case 9: {
        if (tag == 72) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nextts;
        break;
      }

      // required uint32 nextts = 10;
      case 10: {
        if (tag == 80) {
         parse_nextts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextts_)));
          set_has_nextts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_a_explode;
        break;
      }

      // optional uint32 a_explode = 11;
      case 11: {
        if (tag == 88) {
         parse_a_explode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_explode_)));
          set_has_a_explode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_d_explode;
        break;
      }

      // optional uint32 d_explode = 12;
      case 12: {
        if (tag == 96) {
         parse_d_explode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_explode_)));
          set_has_d_explode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.Turn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.Turn)
  return false;
#undef DO_
}

void Turn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.Turn)
  // required uint32 a_shape = 1;
  if (has_a_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a_shape(), output);
  }

  // required uint32 d_shape = 2;
  if (has_d_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->d_shape(), output);
  }

  // required uint32 att_shape = 3;
  if (has_att_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->att_shape(), output);
  }

  // required uint32 def_shape = 4;
  if (has_def_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_shape(), output);
  }

  // repeated uint32 a_skill = 5;
  for (int i = 0; i < this->a_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->a_skill(i), output);
  }

  // repeated uint32 d_skill = 6;
  for (int i = 0; i < this->d_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->d_skill(i), output);
  }

  // repeated uint32 a_attack = 7;
  for (int i = 0; i < this->a_attack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->a_attack(i), output);
  }

  // repeated uint32 d_attack = 8;
  for (int i = 0; i < this->d_attack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->d_attack(i), output);
  }

  // required uint32 ts = 9;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ts(), output);
  }

  // required uint32 nextts = 10;
  if (has_nextts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nextts(), output);
  }

  // optional uint32 a_explode = 11;
  if (has_a_explode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->a_explode(), output);
  }

  // optional uint32 d_explode = 12;
  if (has_d_explode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->d_explode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.Turn)
}

::google::protobuf::uint8* Turn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.Turn)
  // required uint32 a_shape = 1;
  if (has_a_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a_shape(), target);
  }

  // required uint32 d_shape = 2;
  if (has_d_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->d_shape(), target);
  }

  // required uint32 att_shape = 3;
  if (has_att_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->att_shape(), target);
  }

  // required uint32 def_shape = 4;
  if (has_def_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_shape(), target);
  }

  // repeated uint32 a_skill = 5;
  for (int i = 0; i < this->a_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->a_skill(i), target);
  }

  // repeated uint32 d_skill = 6;
  for (int i = 0; i < this->d_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->d_skill(i), target);
  }

  // repeated uint32 a_attack = 7;
  for (int i = 0; i < this->a_attack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->a_attack(i), target);
  }

  // repeated uint32 d_attack = 8;
  for (int i = 0; i < this->d_attack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->d_attack(i), target);
  }

  // required uint32 ts = 9;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ts(), target);
  }

  // required uint32 nextts = 10;
  if (has_nextts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nextts(), target);
  }

  // optional uint32 a_explode = 11;
  if (has_a_explode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->a_explode(), target);
  }

  // optional uint32 d_explode = 12;
  if (has_d_explode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->d_explode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.Turn)
  return target;
}

int Turn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 a_shape = 1;
    if (has_a_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a_shape());
    }

    // required uint32 d_shape = 2;
    if (has_d_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d_shape());
    }

    // required uint32 att_shape = 3;
    if (has_att_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att_shape());
    }

    // required uint32 def_shape = 4;
    if (has_def_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_shape());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ts = 9;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 nextts = 10;
    if (has_nextts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextts());
    }

    // optional uint32 a_explode = 11;
    if (has_a_explode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a_explode());
    }

    // optional uint32 d_explode = 12;
    if (has_d_explode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d_explode());
    }

  }
  // repeated uint32 a_skill = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->a_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->a_skill(i));
    }
    total_size += 1 * this->a_skill_size() + data_size;
  }

  // repeated uint32 d_skill = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->d_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->d_skill(i));
    }
    total_size += 1 * this->d_skill_size() + data_size;
  }

  // repeated uint32 a_attack = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->a_attack_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->a_attack(i));
    }
    total_size += 1 * this->a_attack_size() + data_size;
  }

  // repeated uint32 d_attack = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->d_attack_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->d_attack(i));
    }
    total_size += 1 * this->d_attack_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Turn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Turn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Turn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Turn::MergeFrom(const Turn& from) {
  GOOGLE_CHECK_NE(&from, this);
  a_skill_.MergeFrom(from.a_skill_);
  d_skill_.MergeFrom(from.d_skill_);
  a_attack_.MergeFrom(from.a_attack_);
  d_attack_.MergeFrom(from.d_attack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a_shape()) {
      set_a_shape(from.a_shape());
    }
    if (from.has_d_shape()) {
      set_d_shape(from.d_shape());
    }
    if (from.has_att_shape()) {
      set_att_shape(from.att_shape());
    }
    if (from.has_def_shape()) {
      set_def_shape(from.def_shape());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_nextts()) {
      set_nextts(from.nextts());
    }
    if (from.has_a_explode()) {
      set_a_explode(from.a_explode());
    }
    if (from.has_d_explode()) {
      set_d_explode(from.d_explode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Turn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn::CopyFrom(const Turn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000030f) != 0x0000030f) return false;

  return true;
}

void Turn::Swap(Turn* other) {
  if (other != this) {
    std::swap(a_shape_, other->a_shape_);
    std::swap(d_shape_, other->d_shape_);
    std::swap(att_shape_, other->att_shape_);
    std::swap(def_shape_, other->def_shape_);
    a_skill_.Swap(&other->a_skill_);
    d_skill_.Swap(&other->d_skill_);
    a_attack_.Swap(&other->a_attack_);
    d_attack_.Swap(&other->d_attack_);
    std::swap(ts_, other->ts_);
    std::swap(nextts_, other->nextts_);
    std::swap(a_explode_, other->a_explode_);
    std::swap(d_explode_, other->d_explode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Turn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Turn_descriptor_;
  metadata.reflection = Turn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyCity::kAttackerFieldNumber;
const int ReplyCity::kDefenderFieldNumber;
const int ReplyCity::kInfoFieldNumber;
const int ReplyCity::kTsFieldNumber;
const int ReplyCity::kNexttsFieldNumber;
const int ReplyCity::kTurnFieldNumber;
const int ReplyCity::kGidFieldNumber;
const int ReplyCity::kTypeFieldNumber;
const int ReplyCity::kCidFieldNumber;
const int ReplyCity::kUidFieldNumber;
const int ReplyCity::kGateFieldNumber;
#endif  // !_MSC_VER

ReplyCity::ReplyCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyCity)
}

void ReplyCity::InitAsDefaultInstance() {
  turn_ = const_cast< ::ProtoBattleField::Turn*>(&::ProtoBattleField::Turn::default_instance());
}

ReplyCity::ReplyCity(const ReplyCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyCity)
}

void ReplyCity::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  nextts_ = 0u;
  turn_ = NULL;
  gid_ = 0u;
  type_ = 0u;
  cid_ = 0u;
  uid_ = 0u;
  gate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyCity::~ReplyCity() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyCity)
  SharedDtor();
}

void ReplyCity::SharedDtor() {
  if (this != default_instance_) {
    delete turn_;
  }
}

void ReplyCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyCity_descriptor_;
}

const ReplyCity& ReplyCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyCity* ReplyCity::default_instance_ = NULL;

ReplyCity* ReplyCity::New() const {
  return new ReplyCity;
}

void ReplyCity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyCity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 248) {
    ZR_(ts_, nextts_);
    ZR_(gid_, type_);
    if (has_turn()) {
      if (turn_ != NULL) turn_->::ProtoBattleField::Turn::Clear();
    }
  }
  ZR_(cid_, gate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attacker_.Clear();
  defender_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.HeroUid attacker = 1;
      case 1: {
        if (tag == 10) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attacker;
        if (input->ExpectTag(18)) goto parse_defender;
        break;
      }

      // repeated .ProtoBattleField.HeroUid defender = 2;
      case 2: {
        if (tag == 18) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_defender;
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBattleField.UserInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }

      // optional uint32 ts = 4;
      case 4: {
        if (tag == 32) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nextts;
        break;
      }

      // optional uint32 nextts = 5;
      case 5: {
        if (tag == 40) {
         parse_nextts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextts_)));
          set_has_nextts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_turn;
        break;
      }

      // optional .ProtoBattleField.Turn turn = 6;
      case 6: {
        if (tag == 50) {
         parse_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gid;
        break;
      }

      // required uint32 gid = 7;
      case 7: {
        if (tag == 56) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // required uint32 type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cid;
        break;
      }

      // required uint32 cid = 9;
      case 9: {
        if (tag == 72) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_uid;
        break;
      }

      // required uint32 uid = 10;
      case 10: {
        if (tag == 80) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gate;
        break;
      }

      // required uint32 gate = 11;
      case 11: {
        if (tag == 88) {
         parse_gate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_)));
          set_has_gate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyCity)
  return false;
#undef DO_
}

void ReplyCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyCity)
  // repeated .ProtoBattleField.HeroUid attacker = 1;
  for (int i = 0; i < this->attacker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker(i), output);
  }

  // repeated .ProtoBattleField.HeroUid defender = 2;
  for (int i = 0; i < this->defender_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender(i), output);
  }

  // repeated .ProtoBattleField.UserInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  // optional uint32 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ts(), output);
  }

  // optional uint32 nextts = 5;
  if (has_nextts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nextts(), output);
  }

  // optional .ProtoBattleField.Turn turn = 6;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->turn(), output);
  }

  // required uint32 gid = 7;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gid(), output);
  }

  // required uint32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }

  // required uint32 cid = 9;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cid(), output);
  }

  // required uint32 uid = 10;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uid(), output);
  }

  // required uint32 gate = 11;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyCity)
}

::google::protobuf::uint8* ReplyCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyCity)
  // repeated .ProtoBattleField.HeroUid attacker = 1;
  for (int i = 0; i < this->attacker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker(i), target);
  }

  // repeated .ProtoBattleField.HeroUid defender = 2;
  for (int i = 0; i < this->defender_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender(i), target);
  }

  // repeated .ProtoBattleField.UserInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  // optional uint32 ts = 4;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ts(), target);
  }

  // optional uint32 nextts = 5;
  if (has_nextts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nextts(), target);
  }

  // optional .ProtoBattleField.Turn turn = 6;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->turn(), target);
  }

  // required uint32 gid = 7;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gid(), target);
  }

  // required uint32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }

  // required uint32 cid = 9;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cid(), target);
  }

  // required uint32 uid = 10;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uid(), target);
  }

  // required uint32 gate = 11;
  if (has_gate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyCity)
  return target;
}

int ReplyCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // optional uint32 nextts = 5;
    if (has_nextts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextts());
    }

    // optional .ProtoBattleField.Turn turn = 6;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turn());
    }

    // required uint32 gid = 7;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // required uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 cid = 9;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint32 uid = 10;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gate = 11;
    if (has_gate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate());
    }

  }
  // repeated .ProtoBattleField.HeroUid attacker = 1;
  total_size += 1 * this->attacker_size();
  for (int i = 0; i < this->attacker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacker(i));
  }

  // repeated .ProtoBattleField.HeroUid defender = 2;
  total_size += 1 * this->defender_size();
  for (int i = 0; i < this->defender_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defender(i));
  }

  // repeated .ProtoBattleField.UserInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyCity::MergeFrom(const ReplyCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacker_.MergeFrom(from.attacker_);
  defender_.MergeFrom(from.defender_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_nextts()) {
      set_nextts(from.nextts());
    }
    if (from.has_turn()) {
      mutable_turn()->::ProtoBattleField::Turn::MergeFrom(from.turn());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gate()) {
      set_gate(from.gate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyCity::CopyFrom(const ReplyCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007c0) != 0x000007c0) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attacker())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defender())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  if (has_turn()) {
    if (!this->turn().IsInitialized()) return false;
  }
  return true;
}

void ReplyCity::Swap(ReplyCity* other) {
  if (other != this) {
    attacker_.Swap(&other->attacker_);
    defender_.Swap(&other->defender_);
    info_.Swap(&other->info_);
    std::swap(ts_, other->ts_);
    std::swap(nextts_, other->nextts_);
    std::swap(turn_, other->turn_);
    std::swap(gid_, other->gid_);
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(gate_, other->gate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyCity_descriptor_;
  metadata.reflection = ReplyCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitCity::kCidFieldNumber;
#endif  // !_MSC_VER

QuitCity::QuitCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.QuitCity)
}

void QuitCity::InitAsDefaultInstance() {
}

QuitCity::QuitCity(const QuitCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.QuitCity)
}

void QuitCity::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitCity::~QuitCity() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.QuitCity)
  SharedDtor();
}

void QuitCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuitCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitCity_descriptor_;
}

const QuitCity& QuitCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

QuitCity* QuitCity::default_instance_ = NULL;

QuitCity* QuitCity::New() const {
  return new QuitCity;
}

void QuitCity::Clear() {
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.QuitCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.QuitCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.QuitCity)
  return false;
#undef DO_
}

void QuitCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.QuitCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.QuitCity)
}

::google::protobuf::uint8* QuitCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.QuitCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.QuitCity)
  return target;
}

int QuitCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitCity::MergeFrom(const QuitCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitCity::CopyFrom(const QuitCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuitCity::Swap(QuitCity* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitCity_descriptor_;
  metadata.reflection = QuitCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitGate::kUidFieldNumber;
#endif  // !_MSC_VER

QuitGate::QuitGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.QuitGate)
}

void QuitGate::InitAsDefaultInstance() {
}

QuitGate::QuitGate(const QuitGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.QuitGate)
}

void QuitGate::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitGate::~QuitGate() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.QuitGate)
  SharedDtor();
}

void QuitGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuitGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitGate_descriptor_;
}

const QuitGate& QuitGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

QuitGate* QuitGate::default_instance_ = NULL;

QuitGate* QuitGate::New() const {
  return new QuitGate;
}

void QuitGate::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.QuitGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.QuitGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.QuitGate)
  return false;
#undef DO_
}

void QuitGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.QuitGate)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.QuitGate)
}

::google::protobuf::uint8* QuitGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.QuitGate)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.QuitGate)
  return target;
}

int QuitGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitGate::MergeFrom(const QuitGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGate::CopyFrom(const QuitGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuitGate::Swap(QuitGate* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitGate_descriptor_;
  metadata.reflection = QuitGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitRush::kUidFieldNumber;
const int QuitRush::kIdFieldNumber;
const int QuitRush::kEuidFieldNumber;
const int QuitRush::kEidFieldNumber;
#endif  // !_MSC_VER

QuitRush::QuitRush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.QuitRush)
}

void QuitRush::InitAsDefaultInstance() {
}

QuitRush::QuitRush(const QuitRush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.QuitRush)
}

void QuitRush::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  euid_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitRush::~QuitRush() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.QuitRush)
  SharedDtor();
}

void QuitRush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuitRush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitRush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitRush_descriptor_;
}

const QuitRush& QuitRush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

QuitRush* QuitRush::default_instance_ = NULL;

QuitRush* QuitRush::New() const {
  return new QuitRush;
}

void QuitRush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuitRush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitRush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.QuitRush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_euid;
        break;
      }

      // required uint32 euid = 3;
      case 3: {
        if (tag == 24) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eid;
        break;
      }

      // required uint32 eid = 4;
      case 4: {
        if (tag == 32) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.QuitRush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.QuitRush)
  return false;
#undef DO_
}

void QuitRush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.QuitRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->euid(), output);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.QuitRush)
}

::google::protobuf::uint8* QuitRush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.QuitRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->euid(), target);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.QuitRush)
  return target;
}

int QuitRush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 euid = 3;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 eid = 4;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitRush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitRush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitRush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitRush::MergeFrom(const QuitRush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitRush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitRush::CopyFrom(const QuitRush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QuitRush::Swap(QuitRush* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(euid_, other->euid_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitRush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitRush_descriptor_;
  metadata.reflection = QuitRush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitLadder::kUidFieldNumber;
#endif  // !_MSC_VER

QuitLadder::QuitLadder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.QuitLadder)
}

void QuitLadder::InitAsDefaultInstance() {
}

QuitLadder::QuitLadder(const QuitLadder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.QuitLadder)
}

void QuitLadder::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitLadder::~QuitLadder() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.QuitLadder)
  SharedDtor();
}

void QuitLadder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuitLadder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitLadder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitLadder_descriptor_;
}

const QuitLadder& QuitLadder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

QuitLadder* QuitLadder::default_instance_ = NULL;

QuitLadder* QuitLadder::New() const {
  return new QuitLadder;
}

void QuitLadder::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitLadder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.QuitLadder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.QuitLadder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.QuitLadder)
  return false;
#undef DO_
}

void QuitLadder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.QuitLadder)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.QuitLadder)
}

::google::protobuf::uint8* QuitLadder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.QuitLadder)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.QuitLadder)
  return target;
}

int QuitLadder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitLadder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitLadder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitLadder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitLadder::MergeFrom(const QuitLadder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitLadder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitLadder::CopyFrom(const QuitLadder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitLadder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuitLadder::Swap(QuitLadder* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitLadder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitLadder_descriptor_;
  metadata.reflection = QuitLadder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestList::kCidFieldNumber;
const int RequestList::kAttackFieldNumber;
const int RequestList::kPageFieldNumber;
#endif  // !_MSC_VER

RequestList::RequestList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestList)
}

void RequestList::InitAsDefaultInstance() {
}

RequestList::RequestList(const RequestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestList)
}

void RequestList::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  attack_ = false;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestList::~RequestList() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestList)
  SharedDtor();
}

void RequestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestList_descriptor_;
}

const RequestList& RequestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestList* RequestList::default_instance_ = NULL;

RequestList* RequestList::New() const {
  return new RequestList;
}

void RequestList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cid_, page_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attack;
        break;
      }

      // required bool attack = 2;
      case 2: {
        if (tag == 16) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // required uint32 page = 3;
      case 3: {
        if (tag == 24) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestList)
  return false;
#undef DO_
}

void RequestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestList)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required bool attack = 2;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->attack(), output);
  }

  // required uint32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestList)
}

::google::protobuf::uint8* RequestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestList)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required bool attack = 2;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->attack(), target);
  }

  // required uint32 page = 3;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestList)
  return target;
}

int RequestList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required bool attack = 2;
    if (has_attack()) {
      total_size += 1 + 1;
    }

    // required uint32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestList::MergeFrom(const RequestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestList::CopyFrom(const RequestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestList::Swap(RequestList* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(attack_, other->attack_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestList_descriptor_;
  metadata.reflection = RequestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyList::kQueueFieldNumber;
const int ReplyList::kInfoFieldNumber;
#endif  // !_MSC_VER

ReplyList::ReplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyList)
}

void ReplyList::InitAsDefaultInstance() {
}

ReplyList::ReplyList(const ReplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyList)
}

void ReplyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyList::~ReplyList() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyList)
  SharedDtor();
}

void ReplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyList_descriptor_;
}

const ReplyList& ReplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyList* ReplyList::default_instance_ = NULL;

ReplyList* ReplyList::New() const {
  return new ReplyList;
}

void ReplyList::Clear() {
  queue_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.HidUid queue = 1;
      case 1: {
        if (tag == 10) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_queue;
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ProtoBattleField.UserInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyList)
  return false;
#undef DO_
}

void ReplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyList)
  // repeated .ProtoBattleField.HidUid queue = 1;
  for (int i = 0; i < this->queue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queue(i), output);
  }

  // repeated .ProtoBattleField.UserInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyList)
}

::google::protobuf::uint8* ReplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyList)
  // repeated .ProtoBattleField.HidUid queue = 1;
  for (int i = 0; i < this->queue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queue(i), target);
  }

  // repeated .ProtoBattleField.UserInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyList)
  return target;
}

int ReplyList::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBattleField.HidUid queue = 1;
  total_size += 1 * this->queue_size();
  for (int i = 0; i < this->queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queue(i));
  }

  // repeated .ProtoBattleField.UserInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyList::MergeFrom(const ReplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  queue_.MergeFrom(from.queue_);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyList::CopyFrom(const ReplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->queue())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void ReplyList::Swap(ReplyList* other) {
  if (other != this) {
    queue_.Swap(&other->queue_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyList_descriptor_;
  metadata.reflection = ReplyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillOrShapeCity::kHidFieldNumber;
const int SkillOrShapeCity::kShapeFieldNumber;
const int SkillOrShapeCity::kCidFieldNumber;
#endif  // !_MSC_VER

SkillOrShapeCity::SkillOrShapeCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.SkillOrShapeCity)
}

void SkillOrShapeCity::InitAsDefaultInstance() {
}

SkillOrShapeCity::SkillOrShapeCity(const SkillOrShapeCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.SkillOrShapeCity)
}

void SkillOrShapeCity::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  shape_ = 0u;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillOrShapeCity::~SkillOrShapeCity() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.SkillOrShapeCity)
  SharedDtor();
}

void SkillOrShapeCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillOrShapeCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillOrShapeCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillOrShapeCity_descriptor_;
}

const SkillOrShapeCity& SkillOrShapeCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

SkillOrShapeCity* SkillOrShapeCity::default_instance_ = NULL;

SkillOrShapeCity* SkillOrShapeCity::New() const {
  return new SkillOrShapeCity;
}

void SkillOrShapeCity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillOrShapeCity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, cid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillOrShapeCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.SkillOrShapeCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // required uint32 shape = 2;
      case 2: {
        if (tag == 16) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_)));
          set_has_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.SkillOrShapeCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.SkillOrShapeCity)
  return false;
#undef DO_
}

void SkillOrShapeCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.SkillOrShapeCity)
  // required uint32 hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shape(), output);
  }

  // required uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.SkillOrShapeCity)
}

::google::protobuf::uint8* SkillOrShapeCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.SkillOrShapeCity)
  // required uint32 hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shape(), target);
  }

  // required uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.SkillOrShapeCity)
  return target;
}

int SkillOrShapeCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 shape = 2;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape());
    }

    // required uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillOrShapeCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillOrShapeCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillOrShapeCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillOrShapeCity::MergeFrom(const SkillOrShapeCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillOrShapeCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillOrShapeCity::CopyFrom(const SkillOrShapeCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillOrShapeCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SkillOrShapeCity::Swap(SkillOrShapeCity* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(shape_, other->shape_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillOrShapeCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillOrShapeCity_descriptor_;
  metadata.reflection = SkillOrShapeCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillOrShapeGate::kHidFieldNumber;
const int SkillOrShapeGate::kShapeFieldNumber;
const int SkillOrShapeGate::kUidFieldNumber;
#endif  // !_MSC_VER

SkillOrShapeGate::SkillOrShapeGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.SkillOrShapeGate)
}

void SkillOrShapeGate::InitAsDefaultInstance() {
}

SkillOrShapeGate::SkillOrShapeGate(const SkillOrShapeGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.SkillOrShapeGate)
}

void SkillOrShapeGate::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  shape_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillOrShapeGate::~SkillOrShapeGate() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.SkillOrShapeGate)
  SharedDtor();
}

void SkillOrShapeGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillOrShapeGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillOrShapeGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillOrShapeGate_descriptor_;
}

const SkillOrShapeGate& SkillOrShapeGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

SkillOrShapeGate* SkillOrShapeGate::default_instance_ = NULL;

SkillOrShapeGate* SkillOrShapeGate::New() const {
  return new SkillOrShapeGate;
}

void SkillOrShapeGate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillOrShapeGate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillOrShapeGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.SkillOrShapeGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // required uint32 shape = 2;
      case 2: {
        if (tag == 16) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_)));
          set_has_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.SkillOrShapeGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.SkillOrShapeGate)
  return false;
#undef DO_
}

void SkillOrShapeGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.SkillOrShapeGate)
  // required uint32 hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shape(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.SkillOrShapeGate)
}

::google::protobuf::uint8* SkillOrShapeGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.SkillOrShapeGate)
  // required uint32 hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shape(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.SkillOrShapeGate)
  return target;
}

int SkillOrShapeGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 shape = 2;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillOrShapeGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillOrShapeGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillOrShapeGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillOrShapeGate::MergeFrom(const SkillOrShapeGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillOrShapeGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillOrShapeGate::CopyFrom(const SkillOrShapeGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillOrShapeGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SkillOrShapeGate::Swap(SkillOrShapeGate* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(shape_, other->shape_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillOrShapeGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillOrShapeGate_descriptor_;
  metadata.reflection = SkillOrShapeGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillOrShapeRush::kHidFieldNumber;
const int SkillOrShapeRush::kShapeFieldNumber;
const int SkillOrShapeRush::kUidFieldNumber;
const int SkillOrShapeRush::kIdFieldNumber;
const int SkillOrShapeRush::kEuidFieldNumber;
const int SkillOrShapeRush::kEidFieldNumber;
#endif  // !_MSC_VER

SkillOrShapeRush::SkillOrShapeRush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.SkillOrShapeRush)
}

void SkillOrShapeRush::InitAsDefaultInstance() {
}

SkillOrShapeRush::SkillOrShapeRush(const SkillOrShapeRush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.SkillOrShapeRush)
}

void SkillOrShapeRush::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  shape_ = 0u;
  uid_ = 0u;
  id_ = 0u;
  euid_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillOrShapeRush::~SkillOrShapeRush() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.SkillOrShapeRush)
  SharedDtor();
}

void SkillOrShapeRush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillOrShapeRush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillOrShapeRush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillOrShapeRush_descriptor_;
}

const SkillOrShapeRush& SkillOrShapeRush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

SkillOrShapeRush* SkillOrShapeRush::default_instance_ = NULL;

SkillOrShapeRush* SkillOrShapeRush::New() const {
  return new SkillOrShapeRush;
}

void SkillOrShapeRush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillOrShapeRush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hid_, eid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillOrShapeRush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.SkillOrShapeRush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // required uint32 shape = 2;
      case 2: {
        if (tag == 16) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_)));
          set_has_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_euid;
        break;
      }

      // required uint32 euid = 5;
      case 5: {
        if (tag == 40) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_eid;
        break;
      }

      // required uint32 eid = 6;
      case 6: {
        if (tag == 48) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.SkillOrShapeRush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.SkillOrShapeRush)
  return false;
#undef DO_
}

void SkillOrShapeRush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.SkillOrShapeRush)
  // required uint32 hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shape(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // required uint32 euid = 5;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->euid(), output);
  }

  // required uint32 eid = 6;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.SkillOrShapeRush)
}

::google::protobuf::uint8* SkillOrShapeRush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.SkillOrShapeRush)
  // required uint32 hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shape(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // required uint32 euid = 5;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->euid(), target);
  }

  // required uint32 eid = 6;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.SkillOrShapeRush)
  return target;
}

int SkillOrShapeRush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 shape = 2;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 euid = 5;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 eid = 6;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillOrShapeRush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillOrShapeRush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillOrShapeRush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillOrShapeRush::MergeFrom(const SkillOrShapeRush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillOrShapeRush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillOrShapeRush::CopyFrom(const SkillOrShapeRush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillOrShapeRush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SkillOrShapeRush::Swap(SkillOrShapeRush* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(shape_, other->shape_);
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(euid_, other->euid_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillOrShapeRush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillOrShapeRush_descriptor_;
  metadata.reflection = SkillOrShapeRush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillOrShapeLadder::kHidFieldNumber;
const int SkillOrShapeLadder::kShapeFieldNumber;
const int SkillOrShapeLadder::kUidFieldNumber;
#endif  // !_MSC_VER

SkillOrShapeLadder::SkillOrShapeLadder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.SkillOrShapeLadder)
}

void SkillOrShapeLadder::InitAsDefaultInstance() {
}

SkillOrShapeLadder::SkillOrShapeLadder(const SkillOrShapeLadder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.SkillOrShapeLadder)
}

void SkillOrShapeLadder::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  shape_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillOrShapeLadder::~SkillOrShapeLadder() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.SkillOrShapeLadder)
  SharedDtor();
}

void SkillOrShapeLadder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillOrShapeLadder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillOrShapeLadder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillOrShapeLadder_descriptor_;
}

const SkillOrShapeLadder& SkillOrShapeLadder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

SkillOrShapeLadder* SkillOrShapeLadder::default_instance_ = NULL;

SkillOrShapeLadder* SkillOrShapeLadder::New() const {
  return new SkillOrShapeLadder;
}

void SkillOrShapeLadder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillOrShapeLadder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillOrShapeLadder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.SkillOrShapeLadder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // required uint32 shape = 2;
      case 2: {
        if (tag == 16) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_)));
          set_has_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.SkillOrShapeLadder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.SkillOrShapeLadder)
  return false;
#undef DO_
}

void SkillOrShapeLadder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.SkillOrShapeLadder)
  // required uint32 hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shape(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.SkillOrShapeLadder)
}

::google::protobuf::uint8* SkillOrShapeLadder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.SkillOrShapeLadder)
  // required uint32 hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 shape = 2;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shape(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.SkillOrShapeLadder)
  return target;
}

int SkillOrShapeLadder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 shape = 2;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillOrShapeLadder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillOrShapeLadder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillOrShapeLadder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillOrShapeLadder::MergeFrom(const SkillOrShapeLadder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillOrShapeLadder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillOrShapeLadder::CopyFrom(const SkillOrShapeLadder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillOrShapeLadder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SkillOrShapeLadder::Swap(SkillOrShapeLadder* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(shape_, other->shape_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillOrShapeLadder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillOrShapeLadder_descriptor_;
  metadata.reflection = SkillOrShapeLadder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleOver::kAttackerwinFieldNumber;
const int BattleOver::kRewardFieldNumber;
const int BattleOver::kGateFieldNumber;
#endif  // !_MSC_VER

BattleOver::BattleOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.BattleOver)
}

void BattleOver::InitAsDefaultInstance() {
  reward_ = const_cast< ::ProtoBattleField::UserReward*>(&::ProtoBattleField::UserReward::default_instance());
}

BattleOver::BattleOver(const BattleOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.BattleOver)
}

void BattleOver::SharedCtor() {
  _cached_size_ = 0;
  attackerwin_ = false;
  reward_ = NULL;
  gate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleOver::~BattleOver() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.BattleOver)
  SharedDtor();
}

void BattleOver::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void BattleOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleOver_descriptor_;
}

const BattleOver& BattleOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

BattleOver* BattleOver::default_instance_ = NULL;

BattleOver* BattleOver::New() const {
  return new BattleOver;
}

void BattleOver::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleOver*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(attackerwin_, gate_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoBattleField::UserReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.BattleOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool attackerwin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackerwin_)));
          set_has_attackerwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional .ProtoBattleField.UserReward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gate;
        break;
      }

      // optional uint32 gate = 3;
      case 3: {
        if (tag == 24) {
         parse_gate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_)));
          set_has_gate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.BattleOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.BattleOver)
  return false;
#undef DO_
}

void BattleOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.BattleOver)
  // required bool attackerwin = 1;
  if (has_attackerwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->attackerwin(), output);
  }

  // optional .ProtoBattleField.UserReward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  // optional uint32 gate = 3;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.BattleOver)
}

::google::protobuf::uint8* BattleOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.BattleOver)
  // required bool attackerwin = 1;
  if (has_attackerwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->attackerwin(), target);
  }

  // optional .ProtoBattleField.UserReward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  // optional uint32 gate = 3;
  if (has_gate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.BattleOver)
  return target;
}

int BattleOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool attackerwin = 1;
    if (has_attackerwin()) {
      total_size += 1 + 1;
    }

    // optional .ProtoBattleField.UserReward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional uint32 gate = 3;
    if (has_gate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleOver::MergeFrom(const BattleOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackerwin()) {
      set_attackerwin(from.attackerwin());
    }
    if (from.has_reward()) {
      mutable_reward()->::ProtoBattleField::UserReward::MergeFrom(from.reward());
    }
    if (from.has_gate()) {
      set_gate(from.gate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleOver::CopyFrom(const BattleOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void BattleOver::Swap(BattleOver* other) {
  if (other != this) {
    std::swap(attackerwin_, other->attackerwin_);
    std::swap(reward_, other->reward_);
    std::swap(gate_, other->gate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleOver_descriptor_;
  metadata.reflection = BattleOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartRush::kIdFieldNumber;
const int StartRush::kCidFieldNumber;
#endif  // !_MSC_VER

StartRush::StartRush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.StartRush)
}

void StartRush::InitAsDefaultInstance() {
}

StartRush::StartRush(const StartRush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.StartRush)
}

void StartRush::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRush::~StartRush() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.StartRush)
  SharedDtor();
}

void StartRush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartRush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRush_descriptor_;
}

const StartRush& StartRush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

StartRush* StartRush::default_instance_ = NULL;

StartRush* StartRush::New() const {
  return new StartRush;
}

void StartRush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartRush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, cid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartRush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.StartRush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint32 cid = 2;
      case 2: {
        if (tag == 16) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.StartRush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.StartRush)
  return false;
#undef DO_
}

void StartRush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.StartRush)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.StartRush)
}

::google::protobuf::uint8* StartRush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.StartRush)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.StartRush)
  return target;
}

int StartRush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartRush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartRush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartRush::MergeFrom(const StartRush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartRush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRush::CopyFrom(const StartRush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartRush::Swap(StartRush* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartRush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRush_descriptor_;
  metadata.reflection = StartRush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendRush::kUidFieldNumber;
const int SendRush::kIdFieldNumber;
const int SendRush::kEuidFieldNumber;
const int SendRush::kEidFieldNumber;
#endif  // !_MSC_VER

SendRush::SendRush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.SendRush)
}

void SendRush::InitAsDefaultInstance() {
}

SendRush::SendRush(const SendRush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.SendRush)
}

void SendRush::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  euid_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRush::~SendRush() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.SendRush)
  SharedDtor();
}

void SendRush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendRush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRush_descriptor_;
}

const SendRush& SendRush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

SendRush* SendRush::default_instance_ = NULL;

SendRush* SendRush::New() const {
  return new SendRush;
}

void SendRush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendRush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.SendRush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_euid;
        break;
      }

      // required uint32 euid = 3;
      case 3: {
        if (tag == 24) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eid;
        break;
      }

      // required uint32 eid = 4;
      case 4: {
        if (tag == 32) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.SendRush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.SendRush)
  return false;
#undef DO_
}

void SendRush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.SendRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->euid(), output);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.SendRush)
}

::google::protobuf::uint8* SendRush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.SendRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->euid(), target);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.SendRush)
  return target;
}

int SendRush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 euid = 3;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 eid = 4;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRush::MergeFrom(const SendRush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRush::CopyFrom(const SendRush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SendRush::Swap(SendRush* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(euid_, other->euid_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRush_descriptor_;
  metadata.reflection = SendRush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVision::kIdFieldNumber;
const int RequestVision::kCidFieldNumber;
const int RequestVision::kEqudFieldNumber;
#endif  // !_MSC_VER

RequestVision::RequestVision()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestVision)
}

void RequestVision::InitAsDefaultInstance() {
}

RequestVision::RequestVision(const RequestVision& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestVision)
}

void RequestVision::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cid_ = 0u;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVision::~RequestVision() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestVision)
  SharedDtor();
}

void RequestVision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVision_descriptor_;
}

const RequestVision& RequestVision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestVision* RequestVision::default_instance_ = NULL;

RequestVision* RequestVision::New() const {
  return new RequestVision;
}

void RequestVision::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVision*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, equd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestVision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint32 cid = 2;
      case 2: {
        if (tag == 16) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equd;
        break;
      }

      // optional uint32 equd = 3;
      case 3: {
        if (tag == 24) {
         parse_equd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestVision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestVision)
  return false;
#undef DO_
}

void RequestVision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestVision)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cid(), output);
  }

  // optional uint32 equd = 3;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestVision)
}

::google::protobuf::uint8* RequestVision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestVision)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cid(), target);
  }

  // optional uint32 equd = 3;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestVision)
  return target;
}

int RequestVision::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 equd = 3;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVision::MergeFrom(const RequestVision& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVision::CopyFrom(const RequestVision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestVision::Swap(RequestVision* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVision_descriptor_;
  metadata.reflection = RequestVision_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyVision::kIdFieldNumber;
#endif  // !_MSC_VER

ReplyVision::ReplyVision()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyVision)
}

void ReplyVision::InitAsDefaultInstance() {
}

ReplyVision::ReplyVision(const ReplyVision& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyVision)
}

void ReplyVision::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyVision::~ReplyVision() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyVision)
  SharedDtor();
}

void ReplyVision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyVision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyVision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyVision_descriptor_;
}

const ReplyVision& ReplyVision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyVision* ReplyVision::default_instance_ = NULL;

ReplyVision* ReplyVision::New() const {
  return new ReplyVision;
}

void ReplyVision::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyVision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyVision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyVision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyVision)
  return false;
#undef DO_
}

void ReplyVision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyVision)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyVision)
}

::google::protobuf::uint8* ReplyVision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyVision)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyVision)
  return target;
}

int ReplyVision::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyVision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyVision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyVision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyVision::MergeFrom(const ReplyVision& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyVision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyVision::CopyFrom(const ReplyVision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyVision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReplyVision::Swap(ReplyVision* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyVision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyVision_descriptor_;
  metadata.reflection = ReplyVision_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImmediatelyCity::kCidFieldNumber;
#endif  // !_MSC_VER

ImmediatelyCity::ImmediatelyCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ImmediatelyCity)
}

void ImmediatelyCity::InitAsDefaultInstance() {
}

ImmediatelyCity::ImmediatelyCity(const ImmediatelyCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ImmediatelyCity)
}

void ImmediatelyCity::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImmediatelyCity::~ImmediatelyCity() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ImmediatelyCity)
  SharedDtor();
}

void ImmediatelyCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImmediatelyCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImmediatelyCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImmediatelyCity_descriptor_;
}

const ImmediatelyCity& ImmediatelyCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ImmediatelyCity* ImmediatelyCity::default_instance_ = NULL;

ImmediatelyCity* ImmediatelyCity::New() const {
  return new ImmediatelyCity;
}

void ImmediatelyCity::Clear() {
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImmediatelyCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ImmediatelyCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ImmediatelyCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ImmediatelyCity)
  return false;
#undef DO_
}

void ImmediatelyCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ImmediatelyCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ImmediatelyCity)
}

::google::protobuf::uint8* ImmediatelyCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ImmediatelyCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ImmediatelyCity)
  return target;
}

int ImmediatelyCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImmediatelyCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImmediatelyCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImmediatelyCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImmediatelyCity::MergeFrom(const ImmediatelyCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImmediatelyCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImmediatelyCity::CopyFrom(const ImmediatelyCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImmediatelyCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImmediatelyCity::Swap(ImmediatelyCity* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImmediatelyCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImmediatelyCity_descriptor_;
  metadata.reflection = ImmediatelyCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImmediatelyGate::kUidFieldNumber;
#endif  // !_MSC_VER

ImmediatelyGate::ImmediatelyGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ImmediatelyGate)
}

void ImmediatelyGate::InitAsDefaultInstance() {
}

ImmediatelyGate::ImmediatelyGate(const ImmediatelyGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ImmediatelyGate)
}

void ImmediatelyGate::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImmediatelyGate::~ImmediatelyGate() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ImmediatelyGate)
  SharedDtor();
}

void ImmediatelyGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImmediatelyGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImmediatelyGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImmediatelyGate_descriptor_;
}

const ImmediatelyGate& ImmediatelyGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ImmediatelyGate* ImmediatelyGate::default_instance_ = NULL;

ImmediatelyGate* ImmediatelyGate::New() const {
  return new ImmediatelyGate;
}

void ImmediatelyGate::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImmediatelyGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ImmediatelyGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ImmediatelyGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ImmediatelyGate)
  return false;
#undef DO_
}

void ImmediatelyGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ImmediatelyGate)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ImmediatelyGate)
}

::google::protobuf::uint8* ImmediatelyGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ImmediatelyGate)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ImmediatelyGate)
  return target;
}

int ImmediatelyGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImmediatelyGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImmediatelyGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImmediatelyGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImmediatelyGate::MergeFrom(const ImmediatelyGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImmediatelyGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImmediatelyGate::CopyFrom(const ImmediatelyGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImmediatelyGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImmediatelyGate::Swap(ImmediatelyGate* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImmediatelyGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImmediatelyGate_descriptor_;
  metadata.reflection = ImmediatelyGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImmediatelyRush::kUidFieldNumber;
const int ImmediatelyRush::kIdFieldNumber;
const int ImmediatelyRush::kEuidFieldNumber;
const int ImmediatelyRush::kEidFieldNumber;
#endif  // !_MSC_VER

ImmediatelyRush::ImmediatelyRush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ImmediatelyRush)
}

void ImmediatelyRush::InitAsDefaultInstance() {
}

ImmediatelyRush::ImmediatelyRush(const ImmediatelyRush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ImmediatelyRush)
}

void ImmediatelyRush::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  euid_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImmediatelyRush::~ImmediatelyRush() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ImmediatelyRush)
  SharedDtor();
}

void ImmediatelyRush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImmediatelyRush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImmediatelyRush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImmediatelyRush_descriptor_;
}

const ImmediatelyRush& ImmediatelyRush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ImmediatelyRush* ImmediatelyRush::default_instance_ = NULL;

ImmediatelyRush* ImmediatelyRush::New() const {
  return new ImmediatelyRush;
}

void ImmediatelyRush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ImmediatelyRush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImmediatelyRush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ImmediatelyRush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_euid;
        break;
      }

      // required uint32 euid = 3;
      case 3: {
        if (tag == 24) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eid;
        break;
      }

      // required uint32 eid = 4;
      case 4: {
        if (tag == 32) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ImmediatelyRush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ImmediatelyRush)
  return false;
#undef DO_
}

void ImmediatelyRush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ImmediatelyRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->euid(), output);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ImmediatelyRush)
}

::google::protobuf::uint8* ImmediatelyRush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ImmediatelyRush)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->euid(), target);
  }

  // required uint32 eid = 4;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ImmediatelyRush)
  return target;
}

int ImmediatelyRush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 euid = 3;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 eid = 4;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImmediatelyRush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImmediatelyRush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImmediatelyRush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImmediatelyRush::MergeFrom(const ImmediatelyRush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImmediatelyRush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImmediatelyRush::CopyFrom(const ImmediatelyRush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImmediatelyRush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ImmediatelyRush::Swap(ImmediatelyRush* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(euid_, other->euid_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImmediatelyRush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImmediatelyRush_descriptor_;
  metadata.reflection = ImmediatelyRush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImmediatelyLadder::kUidFieldNumber;
#endif  // !_MSC_VER

ImmediatelyLadder::ImmediatelyLadder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ImmediatelyLadder)
}

void ImmediatelyLadder::InitAsDefaultInstance() {
}

ImmediatelyLadder::ImmediatelyLadder(const ImmediatelyLadder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ImmediatelyLadder)
}

void ImmediatelyLadder::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImmediatelyLadder::~ImmediatelyLadder() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ImmediatelyLadder)
  SharedDtor();
}

void ImmediatelyLadder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImmediatelyLadder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImmediatelyLadder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImmediatelyLadder_descriptor_;
}

const ImmediatelyLadder& ImmediatelyLadder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ImmediatelyLadder* ImmediatelyLadder::default_instance_ = NULL;

ImmediatelyLadder* ImmediatelyLadder::New() const {
  return new ImmediatelyLadder;
}

void ImmediatelyLadder::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImmediatelyLadder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ImmediatelyLadder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ImmediatelyLadder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ImmediatelyLadder)
  return false;
#undef DO_
}

void ImmediatelyLadder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ImmediatelyLadder)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ImmediatelyLadder)
}

::google::protobuf::uint8* ImmediatelyLadder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ImmediatelyLadder)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ImmediatelyLadder)
  return target;
}

int ImmediatelyLadder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImmediatelyLadder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImmediatelyLadder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImmediatelyLadder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImmediatelyLadder::MergeFrom(const ImmediatelyLadder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImmediatelyLadder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImmediatelyLadder::CopyFrom(const ImmediatelyLadder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImmediatelyLadder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImmediatelyLadder::Swap(ImmediatelyLadder* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImmediatelyLadder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImmediatelyLadder_descriptor_;
  metadata.reflection = ImmediatelyLadder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCMove::kIdFieldNumber;
const int NPCMove::kCidsFieldNumber;
#endif  // !_MSC_VER

NPCMove::NPCMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.NPCMove)
}

void NPCMove::InitAsDefaultInstance() {
}

NPCMove::NPCMove(const NPCMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.NPCMove)
}

void NPCMove::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCMove::~NPCMove() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.NPCMove)
  SharedDtor();
}

void NPCMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCMove_descriptor_;
}

const NPCMove& NPCMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

NPCMove* NPCMove::default_instance_ = NULL;

NPCMove* NPCMove::New() const {
  return new NPCMove;
}

void NPCMove::Clear() {
  id_ = 0u;
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.NPCMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        break;
      }

      // repeated uint32 cids = 2;
      case 2: {
        if (tag == 16) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.NPCMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.NPCMove)
  return false;
#undef DO_
}

void NPCMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.NPCMove)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.NPCMove)
}

::google::protobuf::uint8* NPCMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.NPCMove)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.NPCMove)
  return target;
}

int NPCMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 cids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCMove::MergeFrom(const NPCMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCMove::CopyFrom(const NPCMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NPCMove::Swap(NPCMove* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCMove_descriptor_;
  metadata.reflection = NPCMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendNPCMove::kMoveFieldNumber;
#endif  // !_MSC_VER

SendNPCMove::SendNPCMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.SendNPCMove)
}

void SendNPCMove::InitAsDefaultInstance() {
}

SendNPCMove::SendNPCMove(const SendNPCMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.SendNPCMove)
}

void SendNPCMove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendNPCMove::~SendNPCMove() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.SendNPCMove)
  SharedDtor();
}

void SendNPCMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendNPCMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendNPCMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendNPCMove_descriptor_;
}

const SendNPCMove& SendNPCMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

SendNPCMove* SendNPCMove::default_instance_ = NULL;

SendNPCMove* SendNPCMove::New() const {
  return new SendNPCMove;
}

void SendNPCMove::Clear() {
  move_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendNPCMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.SendNPCMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.NPCMove move = 1;
      case 1: {
        if (tag == 10) {
         parse_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_move;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.SendNPCMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.SendNPCMove)
  return false;
#undef DO_
}

void SendNPCMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.SendNPCMove)
  // repeated .ProtoBattleField.NPCMove move = 1;
  for (int i = 0; i < this->move_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->move(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.SendNPCMove)
}

::google::protobuf::uint8* SendNPCMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.SendNPCMove)
  // repeated .ProtoBattleField.NPCMove move = 1;
  for (int i = 0; i < this->move_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->move(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.SendNPCMove)
  return target;
}

int SendNPCMove::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBattleField.NPCMove move = 1;
  total_size += 1 * this->move_size();
  for (int i = 0; i < this->move_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->move(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendNPCMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendNPCMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendNPCMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendNPCMove::MergeFrom(const SendNPCMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  move_.MergeFrom(from.move_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendNPCMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendNPCMove::CopyFrom(const SendNPCMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendNPCMove::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->move())) return false;
  return true;
}

void SendNPCMove::Swap(SendNPCMove* other) {
  if (other != this) {
    move_.Swap(&other->move_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendNPCMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendNPCMove_descriptor_;
  metadata.reflection = SendNPCMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestRewardInfo::RequestRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestRewardInfo)
}

void RequestRewardInfo::InitAsDefaultInstance() {
}

RequestRewardInfo::RequestRewardInfo(const RequestRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestRewardInfo)
}

void RequestRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRewardInfo::~RequestRewardInfo() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestRewardInfo)
  SharedDtor();
}

void RequestRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRewardInfo_descriptor_;
}

const RequestRewardInfo& RequestRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestRewardInfo* RequestRewardInfo::default_instance_ = NULL;

RequestRewardInfo* RequestRewardInfo::New() const {
  return new RequestRewardInfo;
}

void RequestRewardInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestRewardInfo)
  return false;
#undef DO_
}

void RequestRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestRewardInfo)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestRewardInfo)
}

::google::protobuf::uint8* RequestRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestRewardInfo)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestRewardInfo)
  return target;
}

int RequestRewardInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRewardInfo::MergeFrom(const RequestRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRewardInfo::CopyFrom(const RequestRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRewardInfo::IsInitialized() const {

  return true;
}

void RequestRewardInfo::Swap(RequestRewardInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRewardInfo_descriptor_;
  metadata.reflection = RequestRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyRewardInfo::kHistoryFieldNumber;
const int ReplyRewardInfo::kMkillFieldNumber;
const int ReplyRewardInfo::kKillFieldNumber;
const int ReplyRewardInfo::kOccupyFieldNumber;
const int ReplyRewardInfo::kFoccupyFieldNumber;
const int ReplyRewardInfo::kRushFieldNumber;
const int ReplyRewardInfo::kRewardFieldNumber;
const int ReplyRewardInfo::kRewardbFieldNumber;
const int ReplyRewardInfo::kMissionFieldNumber;
const int ReplyRewardInfo::kMp1FieldNumber;
const int ReplyRewardInfo::kMp2FieldNumber;
const int ReplyRewardInfo::kMk1FieldNumber;
const int ReplyRewardInfo::kMk2FieldNumber;
const int ReplyRewardInfo::kMp3FieldNumber;
#endif  // !_MSC_VER

ReplyRewardInfo::ReplyRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyRewardInfo)
}

void ReplyRewardInfo::InitAsDefaultInstance() {
}

ReplyRewardInfo::ReplyRewardInfo(const ReplyRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyRewardInfo)
}

void ReplyRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  mkill_ = 0u;
  kill_ = 0u;
  occupy_ = 0u;
  foccupy_ = 0u;
  rush_ = 0u;
  reward_ = 0u;
  rewardb_ = 0u;
  mp1_ = 0u;
  mp2_ = 0u;
  mk1_ = 0u;
  mk2_ = 0u;
  mp3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyRewardInfo::~ReplyRewardInfo() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyRewardInfo)
  SharedDtor();
}

void ReplyRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyRewardInfo_descriptor_;
}

const ReplyRewardInfo& ReplyRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyRewardInfo* ReplyRewardInfo::default_instance_ = NULL;

ReplyRewardInfo* ReplyRewardInfo::New() const {
  return new ReplyRewardInfo;
}

void ReplyRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(mkill_, reward_);
    rewardb_ = 0u;
  }
  if (_has_bits_[8 / 32] & 15872) {
    ZR_(mp1_, mp3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  history_.Clear();
  mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 history = 1;
      case 1: {
        if (tag == 8) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_history())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_history())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_history;
        if (input->ExpectTag(16)) goto parse_mkill;
        break;
      }

      // required uint32 mkill = 2;
      case 2: {
        if (tag == 16) {
         parse_mkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mkill_)));
          set_has_mkill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kill;
        break;
      }

      // required uint32 kill = 3;
      case 3: {
        if (tag == 24) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_occupy;
        break;
      }

      // required uint32 occupy = 4;
      case 4: {
        if (tag == 32) {
         parse_occupy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_)));
          set_has_occupy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_foccupy;
        break;
      }

      // required uint32 foccupy = 5;
      case 5: {
        if (tag == 40) {
         parse_foccupy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foccupy_)));
          set_has_foccupy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rush;
        break;
      }

      // required uint32 rush = 6;
      case 6: {
        if (tag == 48) {
         parse_rush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rush_)));
          set_has_rush();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward;
        break;
      }

      // required uint32 reward = 7;
      case 7: {
        if (tag == 56) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rewardb;
        break;
      }

      // required uint32 rewardb = 8;
      case 8: {
        if (tag == 64) {
         parse_rewardb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardb_)));
          set_has_rewardb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mission;
        break;
      }

      // repeated .ProtoBattleField.Mission mission = 9;
      case 9: {
        if (tag == 74) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mission;
        if (input->ExpectTag(80)) goto parse_mp1;
        break;
      }

      // required uint32 mp1 = 10;
      case 10: {
        if (tag == 80) {
         parse_mp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp1_)));
          set_has_mp1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mp2;
        break;
      }

      // required uint32 mp2 = 11;
      case 11: {
        if (tag == 88) {
         parse_mp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp2_)));
          set_has_mp2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mk1;
        break;
      }

      // required uint32 mk1 = 12;
      case 12: {
        if (tag == 96) {
         parse_mk1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mk1_)));
          set_has_mk1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mk2;
        break;
      }

      // required uint32 mk2 = 13;
      case 13: {
        if (tag == 104) {
         parse_mk2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mk2_)));
          set_has_mk2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mp3;
        break;
      }

      // required uint32 mp3 = 14;
      case 14: {
        if (tag == 112) {
         parse_mp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp3_)));
          set_has_mp3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyRewardInfo)
  return false;
#undef DO_
}

void ReplyRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyRewardInfo)
  // repeated uint32 history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->history(i), output);
  }

  // required uint32 mkill = 2;
  if (has_mkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mkill(), output);
  }

  // required uint32 kill = 3;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill(), output);
  }

  // required uint32 occupy = 4;
  if (has_occupy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->occupy(), output);
  }

  // required uint32 foccupy = 5;
  if (has_foccupy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->foccupy(), output);
  }

  // required uint32 rush = 6;
  if (has_rush()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rush(), output);
  }

  // required uint32 reward = 7;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward(), output);
  }

  // required uint32 rewardb = 8;
  if (has_rewardb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rewardb(), output);
  }

  // repeated .ProtoBattleField.Mission mission = 9;
  for (int i = 0; i < this->mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mission(i), output);
  }

  // required uint32 mp1 = 10;
  if (has_mp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mp1(), output);
  }

  // required uint32 mp2 = 11;
  if (has_mp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mp2(), output);
  }

  // required uint32 mk1 = 12;
  if (has_mk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mk1(), output);
  }

  // required uint32 mk2 = 13;
  if (has_mk2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mk2(), output);
  }

  // required uint32 mp3 = 14;
  if (has_mp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mp3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyRewardInfo)
}

::google::protobuf::uint8* ReplyRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyRewardInfo)
  // repeated uint32 history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->history(i), target);
  }

  // required uint32 mkill = 2;
  if (has_mkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mkill(), target);
  }

  // required uint32 kill = 3;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill(), target);
  }

  // required uint32 occupy = 4;
  if (has_occupy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->occupy(), target);
  }

  // required uint32 foccupy = 5;
  if (has_foccupy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->foccupy(), target);
  }

  // required uint32 rush = 6;
  if (has_rush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rush(), target);
  }

  // required uint32 reward = 7;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward(), target);
  }

  // required uint32 rewardb = 8;
  if (has_rewardb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rewardb(), target);
  }

  // repeated .ProtoBattleField.Mission mission = 9;
  for (int i = 0; i < this->mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mission(i), target);
  }

  // required uint32 mp1 = 10;
  if (has_mp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mp1(), target);
  }

  // required uint32 mp2 = 11;
  if (has_mp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mp2(), target);
  }

  // required uint32 mk1 = 12;
  if (has_mk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mk1(), target);
  }

  // required uint32 mk2 = 13;
  if (has_mk2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mk2(), target);
  }

  // required uint32 mp3 = 14;
  if (has_mp3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mp3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyRewardInfo)
  return target;
}

int ReplyRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 mkill = 2;
    if (has_mkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mkill());
    }

    // required uint32 kill = 3;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

    // required uint32 occupy = 4;
    if (has_occupy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy());
    }

    // required uint32 foccupy = 5;
    if (has_foccupy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foccupy());
    }

    // required uint32 rush = 6;
    if (has_rush()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rush());
    }

    // required uint32 reward = 7;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // required uint32 rewardb = 8;
    if (has_rewardb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardb());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 mp1 = 10;
    if (has_mp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp1());
    }

    // required uint32 mp2 = 11;
    if (has_mp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp2());
    }

    // required uint32 mk1 = 12;
    if (has_mk1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mk1());
    }

    // required uint32 mk2 = 13;
    if (has_mk2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mk2());
    }

    // required uint32 mp3 = 14;
    if (has_mp3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp3());
    }

  }
  // repeated uint32 history = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->history(i));
    }
    total_size += 1 * this->history_size() + data_size;
  }

  // repeated .ProtoBattleField.Mission mission = 9;
  total_size += 1 * this->mission_size();
  for (int i = 0; i < this->mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyRewardInfo::MergeFrom(const ReplyRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  mission_.MergeFrom(from.mission_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mkill()) {
      set_mkill(from.mkill());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_occupy()) {
      set_occupy(from.occupy());
    }
    if (from.has_foccupy()) {
      set_foccupy(from.foccupy());
    }
    if (from.has_rush()) {
      set_rush(from.rush());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_rewardb()) {
      set_rewardb(from.rewardb());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_mp1()) {
      set_mp1(from.mp1());
    }
    if (from.has_mp2()) {
      set_mp2(from.mp2());
    }
    if (from.has_mk1()) {
      set_mk1(from.mk1());
    }
    if (from.has_mk2()) {
      set_mk2(from.mk2());
    }
    if (from.has_mp3()) {
      set_mp3(from.mp3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyRewardInfo::CopyFrom(const ReplyRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003efe) != 0x00003efe) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mission())) return false;
  return true;
}

void ReplyRewardInfo::Swap(ReplyRewardInfo* other) {
  if (other != this) {
    history_.Swap(&other->history_);
    std::swap(mkill_, other->mkill_);
    std::swap(kill_, other->kill_);
    std::swap(occupy_, other->occupy_);
    std::swap(foccupy_, other->foccupy_);
    std::swap(rush_, other->rush_);
    std::swap(reward_, other->reward_);
    std::swap(rewardb_, other->rewardb_);
    mission_.Swap(&other->mission_);
    std::swap(mp1_, other->mp1_);
    std::swap(mp2_, other->mp2_);
    std::swap(mk1_, other->mk1_);
    std::swap(mk2_, other->mk2_);
    std::swap(mp3_, other->mp3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyRewardInfo_descriptor_;
  metadata.reflection = ReplyRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestHistoryReward::RequestHistoryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestHistoryReward)
}

void RequestHistoryReward::InitAsDefaultInstance() {
}

RequestHistoryReward::RequestHistoryReward(const RequestHistoryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestHistoryReward)
}

void RequestHistoryReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHistoryReward::~RequestHistoryReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestHistoryReward)
  SharedDtor();
}

void RequestHistoryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHistoryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHistoryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHistoryReward_descriptor_;
}

const RequestHistoryReward& RequestHistoryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestHistoryReward* RequestHistoryReward::default_instance_ = NULL;

RequestHistoryReward* RequestHistoryReward::New() const {
  return new RequestHistoryReward;
}

void RequestHistoryReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHistoryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestHistoryReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestHistoryReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestHistoryReward)
  return false;
#undef DO_
}

void RequestHistoryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestHistoryReward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestHistoryReward)
}

::google::protobuf::uint8* RequestHistoryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestHistoryReward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestHistoryReward)
  return target;
}

int RequestHistoryReward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHistoryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHistoryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHistoryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHistoryReward::MergeFrom(const RequestHistoryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHistoryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHistoryReward::CopyFrom(const RequestHistoryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHistoryReward::IsInitialized() const {

  return true;
}

void RequestHistoryReward::Swap(RequestHistoryReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHistoryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHistoryReward_descriptor_;
  metadata.reflection = RequestHistoryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHistoryReward::kRestsFieldNumber;
const int ReplyHistoryReward::kCoinFieldNumber;
const int ReplyHistoryReward::kIronFieldNumber;
#endif  // !_MSC_VER

ReplyHistoryReward::ReplyHistoryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyHistoryReward)
}

void ReplyHistoryReward::InitAsDefaultInstance() {
}

ReplyHistoryReward::ReplyHistoryReward(const ReplyHistoryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyHistoryReward)
}

void ReplyHistoryReward::SharedCtor() {
  _cached_size_ = 0;
  rests_ = 0u;
  coin_ = 0u;
  iron_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHistoryReward::~ReplyHistoryReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyHistoryReward)
  SharedDtor();
}

void ReplyHistoryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyHistoryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHistoryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHistoryReward_descriptor_;
}

const ReplyHistoryReward& ReplyHistoryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyHistoryReward* ReplyHistoryReward::default_instance_ = NULL;

ReplyHistoryReward* ReplyHistoryReward::New() const {
  return new ReplyHistoryReward;
}

void ReplyHistoryReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyHistoryReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rests_, iron_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHistoryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyHistoryReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rests = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rests_)));
          set_has_rests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iron;
        break;
      }

      // optional uint32 iron = 3;
      case 3: {
        if (tag == 24) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyHistoryReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyHistoryReward)
  return false;
#undef DO_
}

void ReplyHistoryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyHistoryReward)
  // required uint32 rests = 1;
  if (has_rests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rests(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // optional uint32 iron = 3;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iron(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyHistoryReward)
}

::google::protobuf::uint8* ReplyHistoryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyHistoryReward)
  // required uint32 rests = 1;
  if (has_rests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rests(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // optional uint32 iron = 3;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iron(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyHistoryReward)
  return target;
}

int ReplyHistoryReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rests = 1;
    if (has_rests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rests());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 iron = 3;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHistoryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHistoryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHistoryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHistoryReward::MergeFrom(const ReplyHistoryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rests()) {
      set_rests(from.rests());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHistoryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHistoryReward::CopyFrom(const ReplyHistoryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHistoryReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplyHistoryReward::Swap(ReplyHistoryReward* other) {
  if (other != this) {
    std::swap(rests_, other->rests_);
    std::swap(coin_, other->coin_);
    std::swap(iron_, other->iron_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHistoryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHistoryReward_descriptor_;
  metadata.reflection = ReplyHistoryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestKillReward::RequestKillReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestKillReward)
}

void RequestKillReward::InitAsDefaultInstance() {
}

RequestKillReward::RequestKillReward(const RequestKillReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestKillReward)
}

void RequestKillReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestKillReward::~RequestKillReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestKillReward)
  SharedDtor();
}

void RequestKillReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestKillReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestKillReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestKillReward_descriptor_;
}

const RequestKillReward& RequestKillReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestKillReward* RequestKillReward::default_instance_ = NULL;

RequestKillReward* RequestKillReward::New() const {
  return new RequestKillReward;
}

void RequestKillReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestKillReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestKillReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestKillReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestKillReward)
  return false;
#undef DO_
}

void RequestKillReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestKillReward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestKillReward)
}

::google::protobuf::uint8* RequestKillReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestKillReward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestKillReward)
  return target;
}

int RequestKillReward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestKillReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestKillReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestKillReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestKillReward::MergeFrom(const RequestKillReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestKillReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestKillReward::CopyFrom(const RequestKillReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestKillReward::IsInitialized() const {

  return true;
}

void RequestKillReward::Swap(RequestKillReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestKillReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestKillReward_descriptor_;
  metadata.reflection = RequestKillReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyKillReward::kEquipsFieldNumber;
const int ReplyKillReward::kBaseFieldNumber;
const int ReplyKillReward::kExploitBoxCntFieldNumber;
const int ReplyKillReward::kMultipleFieldNumber;
const int ReplyKillReward::kEquipsCntFieldNumber;
#endif  // !_MSC_VER

ReplyKillReward::ReplyKillReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyKillReward)
}

void ReplyKillReward::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

ReplyKillReward::ReplyKillReward(const ReplyKillReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyKillReward)
}

void ReplyKillReward::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  exploit_box_cnt_ = 0u;
  multiple_ = 0u;
  equips_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyKillReward::~ReplyKillReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyKillReward)
  SharedDtor();
}

void ReplyKillReward::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void ReplyKillReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyKillReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyKillReward_descriptor_;
}

const ReplyKillReward& ReplyKillReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyKillReward* ReplyKillReward::default_instance_ = NULL;

ReplyKillReward* ReplyKillReward::New() const {
  return new ReplyKillReward;
}

void ReplyKillReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyKillReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(exploit_box_cnt_, equips_cnt_);
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyKillReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyKillReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .DataCommon.CommonBaseRewardCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exploit_box_cnt;
        break;
      }

      // required uint32 exploit_box_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_exploit_box_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_box_cnt_)));
          set_has_exploit_box_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_multiple;
        break;
      }

      // required uint32 multiple = 4;
      case 4: {
        if (tag == 32) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_equips_cnt;
        break;
      }

      // optional uint32 equips_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_equips_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equips_cnt_)));
          set_has_equips_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyKillReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyKillReward)
  return false;
#undef DO_
}

void ReplyKillReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyKillReward)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // required uint32 exploit_box_cnt = 3;
  if (has_exploit_box_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exploit_box_cnt(), output);
  }

  // required uint32 multiple = 4;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->multiple(), output);
  }

  // optional uint32 equips_cnt = 5;
  if (has_equips_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->equips_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyKillReward)
}

::google::protobuf::uint8* ReplyKillReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyKillReward)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // required uint32 exploit_box_cnt = 3;
  if (has_exploit_box_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exploit_box_cnt(), target);
  }

  // required uint32 multiple = 4;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->multiple(), target);
  }

  // optional uint32 equips_cnt = 5;
  if (has_equips_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->equips_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyKillReward)
  return target;
}

int ReplyKillReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataCommon.CommonBaseRewardCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 exploit_box_cnt = 3;
    if (has_exploit_box_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit_box_cnt());
    }

    // required uint32 multiple = 4;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // optional uint32 equips_cnt = 5;
    if (has_equips_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equips_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyKillReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyKillReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyKillReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyKillReward::MergeFrom(const ReplyKillReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
    if (from.has_exploit_box_cnt()) {
      set_exploit_box_cnt(from.exploit_box_cnt());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_equips_cnt()) {
      set_equips_cnt(from.equips_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyKillReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyKillReward::CopyFrom(const ReplyKillReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyKillReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void ReplyKillReward::Swap(ReplyKillReward* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(exploit_box_cnt_, other->exploit_box_cnt_);
    std::swap(multiple_, other->multiple_);
    std::swap(equips_cnt_, other->equips_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyKillReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyKillReward_descriptor_;
  metadata.reflection = ReplyKillReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMissionPersonalReward::kTaskNoFieldNumber;
#endif  // !_MSC_VER

RequestMissionPersonalReward::RequestMissionPersonalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestMissionPersonalReward)
}

void RequestMissionPersonalReward::InitAsDefaultInstance() {
}

RequestMissionPersonalReward::RequestMissionPersonalReward(const RequestMissionPersonalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestMissionPersonalReward)
}

void RequestMissionPersonalReward::SharedCtor() {
  _cached_size_ = 0;
  task_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMissionPersonalReward::~RequestMissionPersonalReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestMissionPersonalReward)
  SharedDtor();
}

void RequestMissionPersonalReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMissionPersonalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMissionPersonalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMissionPersonalReward_descriptor_;
}

const RequestMissionPersonalReward& RequestMissionPersonalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestMissionPersonalReward* RequestMissionPersonalReward::default_instance_ = NULL;

RequestMissionPersonalReward* RequestMissionPersonalReward::New() const {
  return new RequestMissionPersonalReward;
}

void RequestMissionPersonalReward::Clear() {
  task_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMissionPersonalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestMissionPersonalReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_no_)));
          set_has_task_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestMissionPersonalReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestMissionPersonalReward)
  return false;
#undef DO_
}

void RequestMissionPersonalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestMissionPersonalReward)
  // required uint32 task_no = 1;
  if (has_task_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestMissionPersonalReward)
}

::google::protobuf::uint8* RequestMissionPersonalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestMissionPersonalReward)
  // required uint32 task_no = 1;
  if (has_task_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestMissionPersonalReward)
  return target;
}

int RequestMissionPersonalReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_no = 1;
    if (has_task_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMissionPersonalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMissionPersonalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMissionPersonalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMissionPersonalReward::MergeFrom(const RequestMissionPersonalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_no()) {
      set_task_no(from.task_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMissionPersonalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMissionPersonalReward::CopyFrom(const RequestMissionPersonalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMissionPersonalReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestMissionPersonalReward::Swap(RequestMissionPersonalReward* other) {
  if (other != this) {
    std::swap(task_no_, other->task_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMissionPersonalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMissionPersonalReward_descriptor_;
  metadata.reflection = RequestMissionPersonalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyMissionPersonalReward::kEquipsFieldNumber;
const int ReplyMissionPersonalReward::kEquipsCntFieldNumber;
const int ReplyMissionPersonalReward::kBaseFieldNumber;
const int ReplyMissionPersonalReward::kMpFieldNumber;
#endif  // !_MSC_VER

ReplyMissionPersonalReward::ReplyMissionPersonalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyMissionPersonalReward)
}

void ReplyMissionPersonalReward::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

ReplyMissionPersonalReward::ReplyMissionPersonalReward(const ReplyMissionPersonalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyMissionPersonalReward)
}

void ReplyMissionPersonalReward::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyMissionPersonalReward::~ReplyMissionPersonalReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyMissionPersonalReward)
  SharedDtor();
}

void ReplyMissionPersonalReward::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void ReplyMissionPersonalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyMissionPersonalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyMissionPersonalReward_descriptor_;
}

const ReplyMissionPersonalReward& ReplyMissionPersonalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyMissionPersonalReward* ReplyMissionPersonalReward::default_instance_ = NULL;

ReplyMissionPersonalReward* ReplyMissionPersonalReward::New() const {
  return new ReplyMissionPersonalReward;
}

void ReplyMissionPersonalReward::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }
  equips_cnt_.Clear();
  mp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyMissionPersonalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyMissionPersonalReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equips_cnt;
        break;
      }

      // repeated uint32 equips_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_equips_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equips_cnt())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equips_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equips_cnt;
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // optional .DataCommon.CommonBaseRewardCPP base = 3;
      case 3: {
        if (tag == 26) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // repeated uint32 mp = 4;
      case 4: {
        if (tag == 32) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_mp())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyMissionPersonalReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyMissionPersonalReward)
  return false;
#undef DO_
}

void ReplyMissionPersonalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyMissionPersonalReward)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // repeated uint32 equips_cnt = 2;
  for (int i = 0; i < this->equips_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equips_cnt(i), output);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  // repeated uint32 mp = 4;
  for (int i = 0; i < this->mp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->mp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyMissionPersonalReward)
}

::google::protobuf::uint8* ReplyMissionPersonalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyMissionPersonalReward)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // repeated uint32 equips_cnt = 2;
  for (int i = 0; i < this->equips_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equips_cnt(i), target);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  // repeated uint32 mp = 4;
  for (int i = 0; i < this->mp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->mp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyMissionPersonalReward)
  return target;
}

int ReplyMissionPersonalReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataCommon.CommonBaseRewardCPP base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  // repeated uint32 equips_cnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equips_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equips_cnt(i));
    }
    total_size += 1 * this->equips_cnt_size() + data_size;
  }

  // repeated uint32 mp = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mp(i));
    }
    total_size += 1 * this->mp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyMissionPersonalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyMissionPersonalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyMissionPersonalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyMissionPersonalReward::MergeFrom(const ReplyMissionPersonalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_cnt_.MergeFrom(from.equips_cnt_);
  mp_.MergeFrom(from.mp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyMissionPersonalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyMissionPersonalReward::CopyFrom(const ReplyMissionPersonalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyMissionPersonalReward::IsInitialized() const {

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void ReplyMissionPersonalReward::Swap(ReplyMissionPersonalReward* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    equips_cnt_.Swap(&other->equips_cnt_);
    std::swap(base_, other->base_);
    mp_.Swap(&other->mp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyMissionPersonalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyMissionPersonalReward_descriptor_;
  metadata.reflection = ReplyMissionPersonalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMissionCountryReward::kTaskNoFieldNumber;
#endif  // !_MSC_VER

RequestMissionCountryReward::RequestMissionCountryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestMissionCountryReward)
}

void RequestMissionCountryReward::InitAsDefaultInstance() {
}

RequestMissionCountryReward::RequestMissionCountryReward(const RequestMissionCountryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestMissionCountryReward)
}

void RequestMissionCountryReward::SharedCtor() {
  _cached_size_ = 0;
  task_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMissionCountryReward::~RequestMissionCountryReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestMissionCountryReward)
  SharedDtor();
}

void RequestMissionCountryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMissionCountryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMissionCountryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMissionCountryReward_descriptor_;
}

const RequestMissionCountryReward& RequestMissionCountryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestMissionCountryReward* RequestMissionCountryReward::default_instance_ = NULL;

RequestMissionCountryReward* RequestMissionCountryReward::New() const {
  return new RequestMissionCountryReward;
}

void RequestMissionCountryReward::Clear() {
  task_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMissionCountryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestMissionCountryReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_no_)));
          set_has_task_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestMissionCountryReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestMissionCountryReward)
  return false;
#undef DO_
}

void RequestMissionCountryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestMissionCountryReward)
  // required uint32 task_no = 1;
  if (has_task_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestMissionCountryReward)
}

::google::protobuf::uint8* RequestMissionCountryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestMissionCountryReward)
  // required uint32 task_no = 1;
  if (has_task_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestMissionCountryReward)
  return target;
}

int RequestMissionCountryReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_no = 1;
    if (has_task_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMissionCountryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMissionCountryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMissionCountryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMissionCountryReward::MergeFrom(const RequestMissionCountryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_no()) {
      set_task_no(from.task_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMissionCountryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMissionCountryReward::CopyFrom(const RequestMissionCountryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMissionCountryReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestMissionCountryReward::Swap(RequestMissionCountryReward* other) {
  if (other != this) {
    std::swap(task_no_, other->task_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMissionCountryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMissionCountryReward_descriptor_;
  metadata.reflection = RequestMissionCountryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyMissionCountryReward::kBaseFieldNumber;
const int ReplyMissionCountryReward::kMkFieldNumber;
#endif  // !_MSC_VER

ReplyMissionCountryReward::ReplyMissionCountryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyMissionCountryReward)
}

void ReplyMissionCountryReward::InitAsDefaultInstance() {
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

ReplyMissionCountryReward::ReplyMissionCountryReward(const ReplyMissionCountryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyMissionCountryReward)
}

void ReplyMissionCountryReward::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyMissionCountryReward::~ReplyMissionCountryReward() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyMissionCountryReward)
  SharedDtor();
}

void ReplyMissionCountryReward::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void ReplyMissionCountryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyMissionCountryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyMissionCountryReward_descriptor_;
}

const ReplyMissionCountryReward& ReplyMissionCountryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyMissionCountryReward* ReplyMissionCountryReward::default_instance_ = NULL;

ReplyMissionCountryReward* ReplyMissionCountryReward::New() const {
  return new ReplyMissionCountryReward;
}

void ReplyMissionCountryReward::Clear() {
  if (has_base()) {
    if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
  }
  mk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyMissionCountryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyMissionCountryReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonBaseRewardCPP base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mk;
        break;
      }

      // repeated uint32 mk = 2;
      case 2: {
        if (tag == 16) {
         parse_mk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_mk())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mk())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mk;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyMissionCountryReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyMissionCountryReward)
  return false;
#undef DO_
}

void ReplyMissionCountryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyMissionCountryReward)
  // required .DataCommon.CommonBaseRewardCPP base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated uint32 mk = 2;
  for (int i = 0; i < this->mk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mk(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyMissionCountryReward)
}

::google::protobuf::uint8* ReplyMissionCountryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyMissionCountryReward)
  // required .DataCommon.CommonBaseRewardCPP base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated uint32 mk = 2;
  for (int i = 0; i < this->mk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->mk(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyMissionCountryReward)
  return target;
}

int ReplyMissionCountryReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonBaseRewardCPP base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  // repeated uint32 mk = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mk_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mk(i));
    }
    total_size += 1 * this->mk_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyMissionCountryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyMissionCountryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyMissionCountryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyMissionCountryReward::MergeFrom(const ReplyMissionCountryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mk_.MergeFrom(from.mk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyMissionCountryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyMissionCountryReward::CopyFrom(const ReplyMissionCountryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyMissionCountryReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void ReplyMissionCountryReward::Swap(ReplyMissionCountryReward* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    mk_.Swap(&other->mk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyMissionCountryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyMissionCountryReward_descriptor_;
  metadata.reflection = ReplyMissionCountryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAuto::kBAtuoFieldNumber;
#endif  // !_MSC_VER

RequestAuto::RequestAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestAuto)
}

void RequestAuto::InitAsDefaultInstance() {
}

RequestAuto::RequestAuto(const RequestAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestAuto)
}

void RequestAuto::SharedCtor() {
  _cached_size_ = 0;
  b_atuo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAuto::~RequestAuto() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestAuto)
  SharedDtor();
}

void RequestAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAuto_descriptor_;
}

const RequestAuto& RequestAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestAuto* RequestAuto::default_instance_ = NULL;

RequestAuto* RequestAuto::New() const {
  return new RequestAuto;
}

void RequestAuto::Clear() {
  b_atuo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestAuto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool b_atuo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_atuo_)));
          set_has_b_atuo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestAuto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestAuto)
  return false;
#undef DO_
}

void RequestAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestAuto)
  // required bool b_atuo = 1;
  if (has_b_atuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->b_atuo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestAuto)
}

::google::protobuf::uint8* RequestAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestAuto)
  // required bool b_atuo = 1;
  if (has_b_atuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->b_atuo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestAuto)
  return target;
}

int RequestAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool b_atuo = 1;
    if (has_b_atuo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAuto::MergeFrom(const RequestAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_b_atuo()) {
      set_b_atuo(from.b_atuo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAuto::CopyFrom(const RequestAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestAuto::Swap(RequestAuto* other) {
  if (other != this) {
    std::swap(b_atuo_, other->b_atuo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAuto_descriptor_;
  metadata.reflection = RequestAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFight::kAttackerFieldNumber;
const int RequestFight::kDefenderFieldNumber;
const int RequestFight::kGidFieldNumber;
const int RequestFight::kIdFieldNumber;
#endif  // !_MSC_VER

RequestFight::RequestFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.RequestFight)
}

void RequestFight::InitAsDefaultInstance() {
}

RequestFight::RequestFight(const RequestFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.RequestFight)
}

void RequestFight::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFight::~RequestFight() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.RequestFight)
  SharedDtor();
}

void RequestFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFight_descriptor_;
}

const RequestFight& RequestFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

RequestFight* RequestFight::default_instance_ = NULL;

RequestFight* RequestFight::New() const {
  return new RequestFight;
}

void RequestFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gid_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attacker_.Clear();
  defender_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.RequestFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleField.HeroUid attacker = 1;
      case 1: {
        if (tag == 10) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attacker;
        if (input->ExpectTag(18)) goto parse_defender;
        break;
      }

      // repeated .ProtoBattleField.HeroUid defender = 2;
      case 2: {
        if (tag == 18) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_defender;
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required uint32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.RequestFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.RequestFight)
  return false;
#undef DO_
}

void RequestFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.RequestFight)
  // repeated .ProtoBattleField.HeroUid attacker = 1;
  for (int i = 0; i < this->attacker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker(i), output);
  }

  // repeated .ProtoBattleField.HeroUid defender = 2;
  for (int i = 0; i < this->defender_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender(i), output);
  }

  // required uint32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gid(), output);
  }

  // required uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.RequestFight)
}

::google::protobuf::uint8* RequestFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.RequestFight)
  // repeated .ProtoBattleField.HeroUid attacker = 1;
  for (int i = 0; i < this->attacker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker(i), target);
  }

  // repeated .ProtoBattleField.HeroUid defender = 2;
  for (int i = 0; i < this->defender_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender(i), target);
  }

  // required uint32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gid(), target);
  }

  // required uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.RequestFight)
  return target;
}

int RequestFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // required uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .ProtoBattleField.HeroUid attacker = 1;
  total_size += 1 * this->attacker_size();
  for (int i = 0; i < this->attacker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacker(i));
  }

  // repeated .ProtoBattleField.HeroUid defender = 2;
  total_size += 1 * this->defender_size();
  for (int i = 0; i < this->defender_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defender(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFight::MergeFrom(const RequestFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacker_.MergeFrom(from.attacker_);
  defender_.MergeFrom(from.defender_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFight::CopyFrom(const RequestFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attacker())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defender())) return false;
  return true;
}

void RequestFight::Swap(RequestFight* other) {
  if (other != this) {
    attacker_.Swap(&other->attacker_);
    defender_.Swap(&other->defender_);
    std::swap(gid_, other->gid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFight_descriptor_;
  metadata.reflection = RequestFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyFight::kIdFieldNumber;
const int ReplyFight::kTurnFieldNumber;
#endif  // !_MSC_VER

ReplyFight::ReplyFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBattleField.ReplyFight)
}

void ReplyFight::InitAsDefaultInstance() {
  turn_ = const_cast< ::ProtoBattleField::Turn*>(&::ProtoBattleField::Turn::default_instance());
}

ReplyFight::ReplyFight(const ReplyFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBattleField.ReplyFight)
}

void ReplyFight::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  turn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyFight::~ReplyFight() {
  // @@protoc_insertion_point(destructor:ProtoBattleField.ReplyFight)
  SharedDtor();
}

void ReplyFight::SharedDtor() {
  if (this != default_instance_) {
    delete turn_;
  }
}

void ReplyFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyFight_descriptor_;
}

const ReplyFight& ReplyFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleField_2eproto();
  return *default_instance_;
}

ReplyFight* ReplyFight::default_instance_ = NULL;

ReplyFight* ReplyFight::New() const {
  return new ReplyFight;
}

void ReplyFight::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_turn()) {
      if (turn_ != NULL) turn_->::ProtoBattleField::Turn::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBattleField.ReplyFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_turn;
        break;
      }

      // required .ProtoBattleField.Turn turn = 2;
      case 2: {
        if (tag == 18) {
         parse_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBattleField.ReplyFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBattleField.ReplyFight)
  return false;
#undef DO_
}

void ReplyFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBattleField.ReplyFight)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .ProtoBattleField.Turn turn = 2;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->turn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBattleField.ReplyFight)
}

::google::protobuf::uint8* ReplyFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBattleField.ReplyFight)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .ProtoBattleField.Turn turn = 2;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->turn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBattleField.ReplyFight)
  return target;
}

int ReplyFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .ProtoBattleField.Turn turn = 2;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyFight::MergeFrom(const ReplyFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_turn()) {
      mutable_turn()->::ProtoBattleField::Turn::MergeFrom(from.turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyFight::CopyFrom(const ReplyFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_turn()) {
    if (!this->turn().IsInitialized()) return false;
  }
  return true;
}

void ReplyFight::Swap(ReplyFight* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(turn_, other->turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyFight_descriptor_;
  metadata.reflection = ReplyFight_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBattleField

// @@protoc_insertion_point(global_scope)
