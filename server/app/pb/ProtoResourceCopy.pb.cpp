// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoResourceCopy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoResourceCopy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoResourceCopy {

namespace {

const ::google::protobuf::Descriptor* ResourceCopyCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceCopyCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceCopyCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceCopyCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGateWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGateWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGateWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGateWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyResourceCopyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyResourceCopyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyResourceCopyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyResourceCopyResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoResourceCopy_2eproto() {
  protobuf_AddDesc_ProtoResourceCopy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoResourceCopy.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceCopyCPP_descriptor_ = file->message_type(0);
  static const int ResourceCopyCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPP, buytimes_),
  };
  ResourceCopyCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceCopyCPP_descriptor_,
      ResourceCopyCPP::default_instance_,
      ResourceCopyCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceCopyCPP));
  ResourceCopyCPPAll_descriptor_ = file->message_type(1);
  static const int ResourceCopyCPPAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPPAll, rescopy_),
  };
  ResourceCopyCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceCopyCPPAll_descriptor_,
      ResourceCopyCPPAll::default_instance_,
      ResourceCopyCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceCopyCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceCopyCPPAll));
  OpenGateWindowReq_descriptor_ = file->message_type(2);
  static const int OpenGateWindowReq_offsets_[1] = {
  };
  OpenGateWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGateWindowReq_descriptor_,
      OpenGateWindowReq::default_instance_,
      OpenGateWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGateWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGateWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGateWindowReq));
  OpenGateWindowResp_descriptor_ = file->message_type(3);
  static const int OpenGateWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGateWindowResp, rescopies_),
  };
  OpenGateWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGateWindowResp_descriptor_,
      OpenGateWindowResp::default_instance_,
      OpenGateWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGateWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGateWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGateWindowResp));
  BuyResourceCopyReq_descriptor_ = file->message_type(4);
  static const int BuyResourceCopyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyReq, id_),
  };
  BuyResourceCopyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyResourceCopyReq_descriptor_,
      BuyResourceCopyReq::default_instance_,
      BuyResourceCopyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyResourceCopyReq));
  BuyResourceCopyResp_descriptor_ = file->message_type(5);
  static const int BuyResourceCopyResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyResp, rescopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyResp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyResp, cash_),
  };
  BuyResourceCopyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyResourceCopyResp_descriptor_,
      BuyResourceCopyResp::default_instance_,
      BuyResourceCopyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyResourceCopyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyResourceCopyResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoResourceCopy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceCopyCPP_descriptor_, &ResourceCopyCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceCopyCPPAll_descriptor_, &ResourceCopyCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGateWindowReq_descriptor_, &OpenGateWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGateWindowResp_descriptor_, &OpenGateWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyResourceCopyReq_descriptor_, &BuyResourceCopyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyResourceCopyResp_descriptor_, &BuyResourceCopyResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoResourceCopy_2eproto() {
  delete ResourceCopyCPP::default_instance_;
  delete ResourceCopyCPP_reflection_;
  delete ResourceCopyCPPAll::default_instance_;
  delete ResourceCopyCPPAll_reflection_;
  delete OpenGateWindowReq::default_instance_;
  delete OpenGateWindowReq_reflection_;
  delete OpenGateWindowResp::default_instance_;
  delete OpenGateWindowResp_reflection_;
  delete BuyResourceCopyReq::default_instance_;
  delete BuyResourceCopyReq_reflection_;
  delete BuyResourceCopyResp::default_instance_;
  delete BuyResourceCopyResp_reflection_;
}

void protobuf_AddDesc_ProtoResourceCopy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ProtoResourceCopy.proto\022\021ProtoResource"
    "Copy\032\nUser.proto\"/\n\017ResourceCopyCPP\022\n\n\002i"
    "d\030\001 \002(\r\022\020\n\010buytimes\030\002 \002(\r\"I\n\022ResourceCop"
    "yCPPAll\0223\n\007rescopy\030\001 \003(\0132\".ProtoResource"
    "Copy.ResourceCopyCPP\"\023\n\021OpenGateWindowRe"
    "q\"N\n\022OpenGateWindowResp\0228\n\trescopies\030\001 \002"
    "(\0132%.ProtoResourceCopy.ResourceCopyCPPAl"
    "l\" \n\022BuyResourceCopyReq\022\n\n\002id\030\001 \002(\r\"}\n\023B"
    "uyResourceCopyResp\0223\n\007rescopy\030\001 \002(\0132\".Pr"
    "otoResourceCopy.ResourceCopyCPP\022#\n\006rewar"
    "d\030\002 \002(\0132\023.User.RewardBagInfo\022\014\n\004cash\030\003 \002"
    "(\r", 442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoResourceCopy.proto", &protobuf_RegisterTypes);
  ResourceCopyCPP::default_instance_ = new ResourceCopyCPP();
  ResourceCopyCPPAll::default_instance_ = new ResourceCopyCPPAll();
  OpenGateWindowReq::default_instance_ = new OpenGateWindowReq();
  OpenGateWindowResp::default_instance_ = new OpenGateWindowResp();
  BuyResourceCopyReq::default_instance_ = new BuyResourceCopyReq();
  BuyResourceCopyResp::default_instance_ = new BuyResourceCopyResp();
  ResourceCopyCPP::default_instance_->InitAsDefaultInstance();
  ResourceCopyCPPAll::default_instance_->InitAsDefaultInstance();
  OpenGateWindowReq::default_instance_->InitAsDefaultInstance();
  OpenGateWindowResp::default_instance_->InitAsDefaultInstance();
  BuyResourceCopyReq::default_instance_->InitAsDefaultInstance();
  BuyResourceCopyResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoResourceCopy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoResourceCopy_2eproto {
  StaticDescriptorInitializer_ProtoResourceCopy_2eproto() {
    protobuf_AddDesc_ProtoResourceCopy_2eproto();
  }
} static_descriptor_initializer_ProtoResourceCopy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResourceCopyCPP::kIdFieldNumber;
const int ResourceCopyCPP::kBuytimesFieldNumber;
#endif  // !_MSC_VER

ResourceCopyCPP::ResourceCopyCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResourceCopy.ResourceCopyCPP)
}

void ResourceCopyCPP::InitAsDefaultInstance() {
}

ResourceCopyCPP::ResourceCopyCPP(const ResourceCopyCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResourceCopy.ResourceCopyCPP)
}

void ResourceCopyCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buytimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceCopyCPP::~ResourceCopyCPP() {
  // @@protoc_insertion_point(destructor:ProtoResourceCopy.ResourceCopyCPP)
  SharedDtor();
}

void ResourceCopyCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceCopyCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceCopyCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceCopyCPP_descriptor_;
}

const ResourceCopyCPP& ResourceCopyCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResourceCopy_2eproto();
  return *default_instance_;
}

ResourceCopyCPP* ResourceCopyCPP::default_instance_ = NULL;

ResourceCopyCPP* ResourceCopyCPP::New() const {
  return new ResourceCopyCPP;
}

void ResourceCopyCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResourceCopyCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buytimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceCopyCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResourceCopy.ResourceCopyCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buytimes;
        break;
      }

      // required uint32 buytimes = 2;
      case 2: {
        if (tag == 16) {
         parse_buytimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytimes_)));
          set_has_buytimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResourceCopy.ResourceCopyCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResourceCopy.ResourceCopyCPP)
  return false;
#undef DO_
}

void ResourceCopyCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResourceCopy.ResourceCopyCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 buytimes = 2;
  if (has_buytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buytimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResourceCopy.ResourceCopyCPP)
}

::google::protobuf::uint8* ResourceCopyCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResourceCopy.ResourceCopyCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 buytimes = 2;
  if (has_buytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buytimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResourceCopy.ResourceCopyCPP)
  return target;
}

int ResourceCopyCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 buytimes = 2;
    if (has_buytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceCopyCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceCopyCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceCopyCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceCopyCPP::MergeFrom(const ResourceCopyCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buytimes()) {
      set_buytimes(from.buytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceCopyCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceCopyCPP::CopyFrom(const ResourceCopyCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceCopyCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourceCopyCPP::Swap(ResourceCopyCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buytimes_, other->buytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceCopyCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceCopyCPP_descriptor_;
  metadata.reflection = ResourceCopyCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceCopyCPPAll::kRescopyFieldNumber;
#endif  // !_MSC_VER

ResourceCopyCPPAll::ResourceCopyCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResourceCopy.ResourceCopyCPPAll)
}

void ResourceCopyCPPAll::InitAsDefaultInstance() {
}

ResourceCopyCPPAll::ResourceCopyCPPAll(const ResourceCopyCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResourceCopy.ResourceCopyCPPAll)
}

void ResourceCopyCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceCopyCPPAll::~ResourceCopyCPPAll() {
  // @@protoc_insertion_point(destructor:ProtoResourceCopy.ResourceCopyCPPAll)
  SharedDtor();
}

void ResourceCopyCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceCopyCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceCopyCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceCopyCPPAll_descriptor_;
}

const ResourceCopyCPPAll& ResourceCopyCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResourceCopy_2eproto();
  return *default_instance_;
}

ResourceCopyCPPAll* ResourceCopyCPPAll::default_instance_ = NULL;

ResourceCopyCPPAll* ResourceCopyCPPAll::New() const {
  return new ResourceCopyCPPAll;
}

void ResourceCopyCPPAll::Clear() {
  rescopy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceCopyCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResourceCopy.ResourceCopyCPPAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
      case 1: {
        if (tag == 10) {
         parse_rescopy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rescopy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rescopy;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResourceCopy.ResourceCopyCPPAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResourceCopy.ResourceCopyCPPAll)
  return false;
#undef DO_
}

void ResourceCopyCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResourceCopy.ResourceCopyCPPAll)
  // repeated .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
  for (int i = 0; i < this->rescopy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rescopy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResourceCopy.ResourceCopyCPPAll)
}

::google::protobuf::uint8* ResourceCopyCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResourceCopy.ResourceCopyCPPAll)
  // repeated .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
  for (int i = 0; i < this->rescopy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rescopy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResourceCopy.ResourceCopyCPPAll)
  return target;
}

int ResourceCopyCPPAll::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
  total_size += 1 * this->rescopy_size();
  for (int i = 0; i < this->rescopy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rescopy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceCopyCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceCopyCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceCopyCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceCopyCPPAll::MergeFrom(const ResourceCopyCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  rescopy_.MergeFrom(from.rescopy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceCopyCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceCopyCPPAll::CopyFrom(const ResourceCopyCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceCopyCPPAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rescopy())) return false;
  return true;
}

void ResourceCopyCPPAll::Swap(ResourceCopyCPPAll* other) {
  if (other != this) {
    rescopy_.Swap(&other->rescopy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceCopyCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceCopyCPPAll_descriptor_;
  metadata.reflection = ResourceCopyCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenGateWindowReq::OpenGateWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResourceCopy.OpenGateWindowReq)
}

void OpenGateWindowReq::InitAsDefaultInstance() {
}

OpenGateWindowReq::OpenGateWindowReq(const OpenGateWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResourceCopy.OpenGateWindowReq)
}

void OpenGateWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGateWindowReq::~OpenGateWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoResourceCopy.OpenGateWindowReq)
  SharedDtor();
}

void OpenGateWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenGateWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGateWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGateWindowReq_descriptor_;
}

const OpenGateWindowReq& OpenGateWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResourceCopy_2eproto();
  return *default_instance_;
}

OpenGateWindowReq* OpenGateWindowReq::default_instance_ = NULL;

OpenGateWindowReq* OpenGateWindowReq::New() const {
  return new OpenGateWindowReq;
}

void OpenGateWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGateWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResourceCopy.OpenGateWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResourceCopy.OpenGateWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResourceCopy.OpenGateWindowReq)
  return false;
#undef DO_
}

void OpenGateWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResourceCopy.OpenGateWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResourceCopy.OpenGateWindowReq)
}

::google::protobuf::uint8* OpenGateWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResourceCopy.OpenGateWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResourceCopy.OpenGateWindowReq)
  return target;
}

int OpenGateWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGateWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGateWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGateWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGateWindowReq::MergeFrom(const OpenGateWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGateWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGateWindowReq::CopyFrom(const OpenGateWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGateWindowReq::IsInitialized() const {

  return true;
}

void OpenGateWindowReq::Swap(OpenGateWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGateWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGateWindowReq_descriptor_;
  metadata.reflection = OpenGateWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGateWindowResp::kRescopiesFieldNumber;
#endif  // !_MSC_VER

OpenGateWindowResp::OpenGateWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResourceCopy.OpenGateWindowResp)
}

void OpenGateWindowResp::InitAsDefaultInstance() {
  rescopies_ = const_cast< ::ProtoResourceCopy::ResourceCopyCPPAll*>(&::ProtoResourceCopy::ResourceCopyCPPAll::default_instance());
}

OpenGateWindowResp::OpenGateWindowResp(const OpenGateWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResourceCopy.OpenGateWindowResp)
}

void OpenGateWindowResp::SharedCtor() {
  _cached_size_ = 0;
  rescopies_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGateWindowResp::~OpenGateWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoResourceCopy.OpenGateWindowResp)
  SharedDtor();
}

void OpenGateWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete rescopies_;
  }
}

void OpenGateWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGateWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGateWindowResp_descriptor_;
}

const OpenGateWindowResp& OpenGateWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResourceCopy_2eproto();
  return *default_instance_;
}

OpenGateWindowResp* OpenGateWindowResp::default_instance_ = NULL;

OpenGateWindowResp* OpenGateWindowResp::New() const {
  return new OpenGateWindowResp;
}

void OpenGateWindowResp::Clear() {
  if (has_rescopies()) {
    if (rescopies_ != NULL) rescopies_->::ProtoResourceCopy::ResourceCopyCPPAll::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGateWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResourceCopy.OpenGateWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoResourceCopy.ResourceCopyCPPAll rescopies = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rescopies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResourceCopy.OpenGateWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResourceCopy.OpenGateWindowResp)
  return false;
#undef DO_
}

void OpenGateWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResourceCopy.OpenGateWindowResp)
  // required .ProtoResourceCopy.ResourceCopyCPPAll rescopies = 1;
  if (has_rescopies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rescopies(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResourceCopy.OpenGateWindowResp)
}

::google::protobuf::uint8* OpenGateWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResourceCopy.OpenGateWindowResp)
  // required .ProtoResourceCopy.ResourceCopyCPPAll rescopies = 1;
  if (has_rescopies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rescopies(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResourceCopy.OpenGateWindowResp)
  return target;
}

int OpenGateWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoResourceCopy.ResourceCopyCPPAll rescopies = 1;
    if (has_rescopies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rescopies());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGateWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGateWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGateWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGateWindowResp::MergeFrom(const OpenGateWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescopies()) {
      mutable_rescopies()->::ProtoResourceCopy::ResourceCopyCPPAll::MergeFrom(from.rescopies());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGateWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGateWindowResp::CopyFrom(const OpenGateWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGateWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rescopies()) {
    if (!this->rescopies().IsInitialized()) return false;
  }
  return true;
}

void OpenGateWindowResp::Swap(OpenGateWindowResp* other) {
  if (other != this) {
    std::swap(rescopies_, other->rescopies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGateWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGateWindowResp_descriptor_;
  metadata.reflection = OpenGateWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyResourceCopyReq::kIdFieldNumber;
#endif  // !_MSC_VER

BuyResourceCopyReq::BuyResourceCopyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResourceCopy.BuyResourceCopyReq)
}

void BuyResourceCopyReq::InitAsDefaultInstance() {
}

BuyResourceCopyReq::BuyResourceCopyReq(const BuyResourceCopyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResourceCopy.BuyResourceCopyReq)
}

void BuyResourceCopyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyResourceCopyReq::~BuyResourceCopyReq() {
  // @@protoc_insertion_point(destructor:ProtoResourceCopy.BuyResourceCopyReq)
  SharedDtor();
}

void BuyResourceCopyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyResourceCopyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyResourceCopyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyResourceCopyReq_descriptor_;
}

const BuyResourceCopyReq& BuyResourceCopyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResourceCopy_2eproto();
  return *default_instance_;
}

BuyResourceCopyReq* BuyResourceCopyReq::default_instance_ = NULL;

BuyResourceCopyReq* BuyResourceCopyReq::New() const {
  return new BuyResourceCopyReq;
}

void BuyResourceCopyReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyResourceCopyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResourceCopy.BuyResourceCopyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResourceCopy.BuyResourceCopyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResourceCopy.BuyResourceCopyReq)
  return false;
#undef DO_
}

void BuyResourceCopyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResourceCopy.BuyResourceCopyReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResourceCopy.BuyResourceCopyReq)
}

::google::protobuf::uint8* BuyResourceCopyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResourceCopy.BuyResourceCopyReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResourceCopy.BuyResourceCopyReq)
  return target;
}

int BuyResourceCopyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyResourceCopyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyResourceCopyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyResourceCopyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyResourceCopyReq::MergeFrom(const BuyResourceCopyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyResourceCopyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyResourceCopyReq::CopyFrom(const BuyResourceCopyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyResourceCopyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyResourceCopyReq::Swap(BuyResourceCopyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyResourceCopyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyResourceCopyReq_descriptor_;
  metadata.reflection = BuyResourceCopyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyResourceCopyResp::kRescopyFieldNumber;
const int BuyResourceCopyResp::kRewardFieldNumber;
const int BuyResourceCopyResp::kCashFieldNumber;
#endif  // !_MSC_VER

BuyResourceCopyResp::BuyResourceCopyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResourceCopy.BuyResourceCopyResp)
}

void BuyResourceCopyResp::InitAsDefaultInstance() {
  rescopy_ = const_cast< ::ProtoResourceCopy::ResourceCopyCPP*>(&::ProtoResourceCopy::ResourceCopyCPP::default_instance());
  reward_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
}

BuyResourceCopyResp::BuyResourceCopyResp(const BuyResourceCopyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResourceCopy.BuyResourceCopyResp)
}

void BuyResourceCopyResp::SharedCtor() {
  _cached_size_ = 0;
  rescopy_ = NULL;
  reward_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyResourceCopyResp::~BuyResourceCopyResp() {
  // @@protoc_insertion_point(destructor:ProtoResourceCopy.BuyResourceCopyResp)
  SharedDtor();
}

void BuyResourceCopyResp::SharedDtor() {
  if (this != default_instance_) {
    delete rescopy_;
    delete reward_;
  }
}

void BuyResourceCopyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyResourceCopyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyResourceCopyResp_descriptor_;
}

const BuyResourceCopyResp& BuyResourceCopyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResourceCopy_2eproto();
  return *default_instance_;
}

BuyResourceCopyResp* BuyResourceCopyResp::default_instance_ = NULL;

BuyResourceCopyResp* BuyResourceCopyResp::New() const {
  return new BuyResourceCopyResp;
}

void BuyResourceCopyResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_rescopy()) {
      if (rescopy_ != NULL) rescopy_->::ProtoResourceCopy::ResourceCopyCPP::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyResourceCopyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResourceCopy.BuyResourceCopyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rescopy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .User.RewardBagInfo reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }

      // required uint32 cash = 3;
      case 3: {
        if (tag == 24) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResourceCopy.BuyResourceCopyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResourceCopy.BuyResourceCopyResp)
  return false;
#undef DO_
}

void BuyResourceCopyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResourceCopy.BuyResourceCopyResp)
  // required .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
  if (has_rescopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rescopy(), output);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResourceCopy.BuyResourceCopyResp)
}

::google::protobuf::uint8* BuyResourceCopyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResourceCopy.BuyResourceCopyResp)
  // required .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
  if (has_rescopy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rescopy(), target);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResourceCopy.BuyResourceCopyResp)
  return target;
}

int BuyResourceCopyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoResourceCopy.ResourceCopyCPP rescopy = 1;
    if (has_rescopy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rescopy());
    }

    // required .User.RewardBagInfo reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyResourceCopyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyResourceCopyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyResourceCopyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyResourceCopyResp::MergeFrom(const BuyResourceCopyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescopy()) {
      mutable_rescopy()->::ProtoResourceCopy::ResourceCopyCPP::MergeFrom(from.rescopy());
    }
    if (from.has_reward()) {
      mutable_reward()->::User::RewardBagInfo::MergeFrom(from.reward());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyResourceCopyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyResourceCopyResp::CopyFrom(const BuyResourceCopyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyResourceCopyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_rescopy()) {
    if (!this->rescopy().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void BuyResourceCopyResp::Swap(BuyResourceCopyResp* other) {
  if (other != this) {
    std::swap(rescopy_, other->rescopy_);
    std::swap(reward_, other->reward_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyResourceCopyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyResourceCopyResp_descriptor_;
  metadata.reflection = BuyResourceCopyResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoResourceCopy

// @@protoc_insertion_point(global_scope)
