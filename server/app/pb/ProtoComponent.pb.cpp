// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoComponent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoComponent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoComponent {

namespace {

const ::google::protobuf::Descriptor* ComponentCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComponentAllCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentAllCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceComponentCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceComponentCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenComponentWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenComponentWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenComponentWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenComponentWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyProduceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyProduceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyProduceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyProduceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashProduceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashProduceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashProduceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashProduceResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoComponent_2eproto() {
  protobuf_AddDesc_ProtoComponent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoComponent.proto");
  GOOGLE_CHECK(file != NULL);
  ComponentCPP_descriptor_ = file->message_type(0);
  static const int ComponentCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, compud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, compid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, slave_),
  };
  ComponentCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentCPP_descriptor_,
      ComponentCPP::default_instance_,
      ComponentCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentCPP));
  ComponentAllCPP_descriptor_ = file->message_type(1);
  static const int ComponentAllCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentAllCPP, components_),
  };
  ComponentAllCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentAllCPP_descriptor_,
      ComponentAllCPP::default_instance_,
      ComponentAllCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentAllCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentAllCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentAllCPP));
  ProduceComponentCPP_descriptor_ = file->message_type(2);
  static const int ProduceComponentCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceComponentCPP, current_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceComponentCPP, ispaycash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceComponentCPP, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceComponentCPP, paycash_ts_),
  };
  ProduceComponentCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceComponentCPP_descriptor_,
      ProduceComponentCPP::default_instance_,
      ProduceComponentCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceComponentCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceComponentCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceComponentCPP));
  ProductCPP_descriptor_ = file->message_type(3);
  static const int ProductCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductCPP, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductCPP, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductCPP, level_),
  };
  ProductCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductCPP_descriptor_,
      ProductCPP::default_instance_,
      ProductCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductCPP));
  OpenComponentWindowReq_descriptor_ = file->message_type(4);
  static const int OpenComponentWindowReq_offsets_[1] = {
  };
  OpenComponentWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenComponentWindowReq_descriptor_,
      OpenComponentWindowReq::default_instance_,
      OpenComponentWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenComponentWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenComponentWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenComponentWindowReq));
  OpenComponentWindowResp_descriptor_ = file->message_type(5);
  static const int OpenComponentWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenComponentWindowResp, material_),
  };
  OpenComponentWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenComponentWindowResp_descriptor_,
      OpenComponentWindowResp::default_instance_,
      OpenComponentWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenComponentWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenComponentWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenComponentWindowResp));
  ProduceReq_descriptor_ = file->message_type(6);
  static const int ProduceReq_offsets_[1] = {
  };
  ProduceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceReq_descriptor_,
      ProduceReq::default_instance_,
      ProduceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceReq));
  ProduceResp_descriptor_ = file->message_type(7);
  static const int ProduceResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceResp, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceResp, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceResp, produce_),
  };
  ProduceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceResp_descriptor_,
      ProduceResp::default_instance_,
      ProduceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceResp));
  OneKeyProduceReq_descriptor_ = file->message_type(8);
  static const int OneKeyProduceReq_offsets_[1] = {
  };
  OneKeyProduceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyProduceReq_descriptor_,
      OneKeyProduceReq::default_instance_,
      OneKeyProduceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyProduceReq));
  OneKeyProduceResp_descriptor_ = file->message_type(9);
  static const int OneKeyProduceResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceResp, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceResp, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceResp, produce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceResp, stopcode_),
  };
  OneKeyProduceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyProduceResp_descriptor_,
      OneKeyProduceResp::default_instance_,
      OneKeyProduceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyProduceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyProduceResp));
  CashProduceReq_descriptor_ = file->message_type(10);
  static const int CashProduceReq_offsets_[1] = {
  };
  CashProduceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashProduceReq_descriptor_,
      CashProduceReq::default_instance_,
      CashProduceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashProduceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashProduceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashProduceReq));
  CashProduceResp_descriptor_ = file->message_type(11);
  static const int CashProduceResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashProduceResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashProduceResp, produce_),
  };
  CashProduceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashProduceResp_descriptor_,
      CashProduceResp::default_instance_,
      CashProduceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashProduceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashProduceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashProduceResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoComponent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentCPP_descriptor_, &ComponentCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentAllCPP_descriptor_, &ComponentAllCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceComponentCPP_descriptor_, &ProduceComponentCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductCPP_descriptor_, &ProductCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenComponentWindowReq_descriptor_, &OpenComponentWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenComponentWindowResp_descriptor_, &OpenComponentWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceReq_descriptor_, &ProduceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceResp_descriptor_, &ProduceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyProduceReq_descriptor_, &OneKeyProduceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyProduceResp_descriptor_, &OneKeyProduceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashProduceReq_descriptor_, &CashProduceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashProduceResp_descriptor_, &CashProduceResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoComponent_2eproto() {
  delete ComponentCPP::default_instance_;
  delete ComponentCPP_reflection_;
  delete ComponentAllCPP::default_instance_;
  delete ComponentAllCPP_reflection_;
  delete ProduceComponentCPP::default_instance_;
  delete ProduceComponentCPP_reflection_;
  delete ProductCPP::default_instance_;
  delete ProductCPP_reflection_;
  delete OpenComponentWindowReq::default_instance_;
  delete OpenComponentWindowReq_reflection_;
  delete OpenComponentWindowResp::default_instance_;
  delete OpenComponentWindowResp_reflection_;
  delete ProduceReq::default_instance_;
  delete ProduceReq_reflection_;
  delete ProduceResp::default_instance_;
  delete ProduceResp_reflection_;
  delete OneKeyProduceReq::default_instance_;
  delete OneKeyProduceReq_reflection_;
  delete OneKeyProduceResp::default_instance_;
  delete OneKeyProduceResp_reflection_;
  delete CashProduceReq::default_instance_;
  delete CashProduceReq_reflection_;
  delete CashProduceResp::default_instance_;
  delete CashProduceResp_reflection_;
}

void protobuf_AddDesc_ProtoComponent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtoComponent.proto\022\016ProtoComponent\"\213"
    "\001\n\014ComponentCPP\022\016\n\006compud\030\001 \002(\r\022\016\n\006compi"
    "d\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\016\n\006h"
    "eroid\030\005 \002(\r\022\020\n\010position\030\006 \002(\r\022\016\n\006master\030"
    "\007 \002(\r\022\r\n\005slave\030\010 \003(\r\"C\n\017ComponentAllCPP\022"
    "0\n\ncomponents\030\001 \003(\0132\034.ProtoComponent.Com"
    "ponentCPP\"b\n\023ProduceComponentCPP\022\025\n\rcurr"
    "ent_level\030\001 \002(\r\022\021\n\tispaycash\030\002 \002(\010\022\r\n\005ti"
    "mes\030\003 \002(\r\022\022\n\npaycash_ts\030\004 \002(\r\"^\n\nProduct"
    "CPP\022\020\n\010material\030\001 \001(\r\022/\n\tcomponent\030\002 \001(\013"
    "2\034.ProtoComponent.ComponentCPP\022\r\n\005level\030"
    "\003 \002(\r\"\030\n\026OpenComponentWindowReq\"+\n\027OpenC"
    "omponentWindowResp\022\020\n\010material\030\001 \002(\r\"\014\n\n"
    "ProduceReq\"\202\001\n\013ProduceResp\022\020\n\010material\030\001"
    " \002(\r\022+\n\007product\030\002 \002(\0132\032.ProtoComponent.P"
    "roductCPP\0224\n\007produce\030\003 \002(\0132#.ProtoCompon"
    "ent.ProduceComponentCPP\"\022\n\020OneKeyProduce"
    "Req\"\232\001\n\021OneKeyProduceResp\022\020\n\010material\030\001 "
    "\002(\r\022+\n\007product\030\002 \003(\0132\032.ProtoComponent.Pr"
    "oductCPP\0224\n\007produce\030\003 \002(\0132#.ProtoCompone"
    "nt.ProduceComponentCPP\022\020\n\010stopcode\030\004 \002(\r"
    "\"\020\n\016CashProduceReq\"U\n\017CashProduceResp\022\014\n"
    "\004cash\030\001 \002(\r\0224\n\007produce\030\002 \002(\0132#.ProtoComp"
    "onent.ProduceComponentCPP", 945);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoComponent.proto", &protobuf_RegisterTypes);
  ComponentCPP::default_instance_ = new ComponentCPP();
  ComponentAllCPP::default_instance_ = new ComponentAllCPP();
  ProduceComponentCPP::default_instance_ = new ProduceComponentCPP();
  ProductCPP::default_instance_ = new ProductCPP();
  OpenComponentWindowReq::default_instance_ = new OpenComponentWindowReq();
  OpenComponentWindowResp::default_instance_ = new OpenComponentWindowResp();
  ProduceReq::default_instance_ = new ProduceReq();
  ProduceResp::default_instance_ = new ProduceResp();
  OneKeyProduceReq::default_instance_ = new OneKeyProduceReq();
  OneKeyProduceResp::default_instance_ = new OneKeyProduceResp();
  CashProduceReq::default_instance_ = new CashProduceReq();
  CashProduceResp::default_instance_ = new CashProduceResp();
  ComponentCPP::default_instance_->InitAsDefaultInstance();
  ComponentAllCPP::default_instance_->InitAsDefaultInstance();
  ProduceComponentCPP::default_instance_->InitAsDefaultInstance();
  ProductCPP::default_instance_->InitAsDefaultInstance();
  OpenComponentWindowReq::default_instance_->InitAsDefaultInstance();
  OpenComponentWindowResp::default_instance_->InitAsDefaultInstance();
  ProduceReq::default_instance_->InitAsDefaultInstance();
  ProduceResp::default_instance_->InitAsDefaultInstance();
  OneKeyProduceReq::default_instance_->InitAsDefaultInstance();
  OneKeyProduceResp::default_instance_->InitAsDefaultInstance();
  CashProduceReq::default_instance_->InitAsDefaultInstance();
  CashProduceResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoComponent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoComponent_2eproto {
  StaticDescriptorInitializer_ProtoComponent_2eproto() {
    protobuf_AddDesc_ProtoComponent_2eproto();
  }
} static_descriptor_initializer_ProtoComponent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ComponentCPP::kCompudFieldNumber;
const int ComponentCPP::kCompidFieldNumber;
const int ComponentCPP::kLevelFieldNumber;
const int ComponentCPP::kExpFieldNumber;
const int ComponentCPP::kHeroidFieldNumber;
const int ComponentCPP::kPositionFieldNumber;
const int ComponentCPP::kMasterFieldNumber;
const int ComponentCPP::kSlaveFieldNumber;
#endif  // !_MSC_VER

ComponentCPP::ComponentCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.ComponentCPP)
}

void ComponentCPP::InitAsDefaultInstance() {
}

ComponentCPP::ComponentCPP(const ComponentCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.ComponentCPP)
}

void ComponentCPP::SharedCtor() {
  _cached_size_ = 0;
  compud_ = 0u;
  compid_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  heroid_ = 0u;
  position_ = 0u;
  master_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentCPP::~ComponentCPP() {
  // @@protoc_insertion_point(destructor:ProtoComponent.ComponentCPP)
  SharedDtor();
}

void ComponentCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComponentCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentCPP_descriptor_;
}

const ComponentCPP& ComponentCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

ComponentCPP* ComponentCPP::default_instance_ = NULL;

ComponentCPP* ComponentCPP::New() const {
  return new ComponentCPP;
}

void ComponentCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComponentCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(compud_, position_);
    master_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  slave_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.ComponentCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 compud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compud_)));
          set_has_compud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compid;
        break;
      }

      // required uint32 compid = 2;
      case 2: {
        if (tag == 16) {
         parse_compid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compid_)));
          set_has_compid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // required uint32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_position;
        break;
      }

      // required uint32 position = 6;
      case 6: {
        if (tag == 48) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_master;
        break;
      }

      // required uint32 master = 7;
      case 7: {
        if (tag == 56) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_slave;
        break;
      }

      // repeated uint32 slave = 8;
      case 8: {
        if (tag == 64) {
         parse_slave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_slave())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slave())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_slave;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.ComponentCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.ComponentCPP)
  return false;
#undef DO_
}

void ComponentCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.ComponentCPP)
  // required uint32 compud = 1;
  if (has_compud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compud(), output);
  }

  // required uint32 compid = 2;
  if (has_compid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->compid(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // required uint32 position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->position(), output);
  }

  // required uint32 master = 7;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->master(), output);
  }

  // repeated uint32 slave = 8;
  for (int i = 0; i < this->slave_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->slave(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.ComponentCPP)
}

::google::protobuf::uint8* ComponentCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.ComponentCPP)
  // required uint32 compud = 1;
  if (has_compud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compud(), target);
  }

  // required uint32 compid = 2;
  if (has_compid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->compid(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // required uint32 position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->position(), target);
  }

  // required uint32 master = 7;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->master(), target);
  }

  // repeated uint32 slave = 8;
  for (int i = 0; i < this->slave_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->slave(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.ComponentCPP)
  return target;
}

int ComponentCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 compud = 1;
    if (has_compud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compud());
    }

    // required uint32 compid = 2;
    if (has_compid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compid());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // required uint32 position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 master = 7;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master());
    }

  }
  // repeated uint32 slave = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->slave_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slave(i));
    }
    total_size += 1 * this->slave_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentCPP::MergeFrom(const ComponentCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  slave_.MergeFrom(from.slave_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compud()) {
      set_compud(from.compud());
    }
    if (from.has_compid()) {
      set_compid(from.compid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentCPP::CopyFrom(const ComponentCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ComponentCPP::Swap(ComponentCPP* other) {
  if (other != this) {
    std::swap(compud_, other->compud_);
    std::swap(compid_, other->compid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(heroid_, other->heroid_);
    std::swap(position_, other->position_);
    std::swap(master_, other->master_);
    slave_.Swap(&other->slave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentCPP_descriptor_;
  metadata.reflection = ComponentCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComponentAllCPP::kComponentsFieldNumber;
#endif  // !_MSC_VER

ComponentAllCPP::ComponentAllCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.ComponentAllCPP)
}

void ComponentAllCPP::InitAsDefaultInstance() {
}

ComponentAllCPP::ComponentAllCPP(const ComponentAllCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.ComponentAllCPP)
}

void ComponentAllCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentAllCPP::~ComponentAllCPP() {
  // @@protoc_insertion_point(destructor:ProtoComponent.ComponentAllCPP)
  SharedDtor();
}

void ComponentAllCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComponentAllCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentAllCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentAllCPP_descriptor_;
}

const ComponentAllCPP& ComponentAllCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

ComponentAllCPP* ComponentAllCPP::default_instance_ = NULL;

ComponentAllCPP* ComponentAllCPP::New() const {
  return new ComponentAllCPP;
}

void ComponentAllCPP::Clear() {
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentAllCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.ComponentAllCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoComponent.ComponentCPP components = 1;
      case 1: {
        if (tag == 10) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_components;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.ComponentAllCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.ComponentAllCPP)
  return false;
#undef DO_
}

void ComponentAllCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.ComponentAllCPP)
  // repeated .ProtoComponent.ComponentCPP components = 1;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->components(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.ComponentAllCPP)
}

::google::protobuf::uint8* ComponentAllCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.ComponentAllCPP)
  // repeated .ProtoComponent.ComponentCPP components = 1;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->components(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.ComponentAllCPP)
  return target;
}

int ComponentAllCPP::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoComponent.ComponentCPP components = 1;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentAllCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentAllCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentAllCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentAllCPP::MergeFrom(const ComponentAllCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  components_.MergeFrom(from.components_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentAllCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentAllCPP::CopyFrom(const ComponentAllCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentAllCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->components())) return false;
  return true;
}

void ComponentAllCPP::Swap(ComponentAllCPP* other) {
  if (other != this) {
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentAllCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentAllCPP_descriptor_;
  metadata.reflection = ComponentAllCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceComponentCPP::kCurrentLevelFieldNumber;
const int ProduceComponentCPP::kIspaycashFieldNumber;
const int ProduceComponentCPP::kTimesFieldNumber;
const int ProduceComponentCPP::kPaycashTsFieldNumber;
#endif  // !_MSC_VER

ProduceComponentCPP::ProduceComponentCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.ProduceComponentCPP)
}

void ProduceComponentCPP::InitAsDefaultInstance() {
}

ProduceComponentCPP::ProduceComponentCPP(const ProduceComponentCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.ProduceComponentCPP)
}

void ProduceComponentCPP::SharedCtor() {
  _cached_size_ = 0;
  current_level_ = 0u;
  ispaycash_ = false;
  times_ = 0u;
  paycash_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceComponentCPP::~ProduceComponentCPP() {
  // @@protoc_insertion_point(destructor:ProtoComponent.ProduceComponentCPP)
  SharedDtor();
}

void ProduceComponentCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceComponentCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceComponentCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceComponentCPP_descriptor_;
}

const ProduceComponentCPP& ProduceComponentCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

ProduceComponentCPP* ProduceComponentCPP::default_instance_ = NULL;

ProduceComponentCPP* ProduceComponentCPP::New() const {
  return new ProduceComponentCPP;
}

void ProduceComponentCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProduceComponentCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(current_level_, paycash_ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceComponentCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.ProduceComponentCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 current_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_level_)));
          set_has_current_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ispaycash;
        break;
      }

      // required bool ispaycash = 2;
      case 2: {
        if (tag == 16) {
         parse_ispaycash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaycash_)));
          set_has_ispaycash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // required uint32 times = 3;
      case 3: {
        if (tag == 24) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_paycash_ts;
        break;
      }

      // required uint32 paycash_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_paycash_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paycash_ts_)));
          set_has_paycash_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.ProduceComponentCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.ProduceComponentCPP)
  return false;
#undef DO_
}

void ProduceComponentCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.ProduceComponentCPP)
  // required uint32 current_level = 1;
  if (has_current_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_level(), output);
  }

  // required bool ispaycash = 2;
  if (has_ispaycash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispaycash(), output);
  }

  // required uint32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  // required uint32 paycash_ts = 4;
  if (has_paycash_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paycash_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.ProduceComponentCPP)
}

::google::protobuf::uint8* ProduceComponentCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.ProduceComponentCPP)
  // required uint32 current_level = 1;
  if (has_current_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_level(), target);
  }

  // required bool ispaycash = 2;
  if (has_ispaycash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispaycash(), target);
  }

  // required uint32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  // required uint32 paycash_ts = 4;
  if (has_paycash_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paycash_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.ProduceComponentCPP)
  return target;
}

int ProduceComponentCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 current_level = 1;
    if (has_current_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_level());
    }

    // required bool ispaycash = 2;
    if (has_ispaycash()) {
      total_size += 1 + 1;
    }

    // required uint32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // required uint32 paycash_ts = 4;
    if (has_paycash_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paycash_ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceComponentCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceComponentCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceComponentCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceComponentCPP::MergeFrom(const ProduceComponentCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_level()) {
      set_current_level(from.current_level());
    }
    if (from.has_ispaycash()) {
      set_ispaycash(from.ispaycash());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_paycash_ts()) {
      set_paycash_ts(from.paycash_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceComponentCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceComponentCPP::CopyFrom(const ProduceComponentCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceComponentCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ProduceComponentCPP::Swap(ProduceComponentCPP* other) {
  if (other != this) {
    std::swap(current_level_, other->current_level_);
    std::swap(ispaycash_, other->ispaycash_);
    std::swap(times_, other->times_);
    std::swap(paycash_ts_, other->paycash_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceComponentCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceComponentCPP_descriptor_;
  metadata.reflection = ProduceComponentCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductCPP::kMaterialFieldNumber;
const int ProductCPP::kComponentFieldNumber;
const int ProductCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

ProductCPP::ProductCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.ProductCPP)
}

void ProductCPP::InitAsDefaultInstance() {
  component_ = const_cast< ::ProtoComponent::ComponentCPP*>(&::ProtoComponent::ComponentCPP::default_instance());
}

ProductCPP::ProductCPP(const ProductCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.ProductCPP)
}

void ProductCPP::SharedCtor() {
  _cached_size_ = 0;
  material_ = 0u;
  component_ = NULL;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductCPP::~ProductCPP() {
  // @@protoc_insertion_point(destructor:ProtoComponent.ProductCPP)
  SharedDtor();
}

void ProductCPP::SharedDtor() {
  if (this != default_instance_) {
    delete component_;
  }
}

void ProductCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductCPP_descriptor_;
}

const ProductCPP& ProductCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

ProductCPP* ProductCPP::default_instance_ = NULL;

ProductCPP* ProductCPP::New() const {
  return new ProductCPP;
}

void ProductCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProductCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(material_, level_);
    if (has_component()) {
      if (component_ != NULL) component_->::ProtoComponent::ComponentCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.ProductCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 material = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_component;
        break;
      }

      // optional .ProtoComponent.ComponentCPP component = 2;
      case 2: {
        if (tag == 18) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.ProductCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.ProductCPP)
  return false;
#undef DO_
}

void ProductCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.ProductCPP)
  // optional uint32 material = 1;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->material(), output);
  }

  // optional .ProtoComponent.ComponentCPP component = 2;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->component(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.ProductCPP)
}

::google::protobuf::uint8* ProductCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.ProductCPP)
  // optional uint32 material = 1;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->material(), target);
  }

  // optional .ProtoComponent.ComponentCPP component = 2;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->component(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.ProductCPP)
  return target;
}

int ProductCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 material = 1;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->material());
    }

    // optional .ProtoComponent.ComponentCPP component = 2;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->component());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductCPP::MergeFrom(const ProductCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_component()) {
      mutable_component()->::ProtoComponent::ComponentCPP::MergeFrom(from.component());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductCPP::CopyFrom(const ProductCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_component()) {
    if (!this->component().IsInitialized()) return false;
  }
  return true;
}

void ProductCPP::Swap(ProductCPP* other) {
  if (other != this) {
    std::swap(material_, other->material_);
    std::swap(component_, other->component_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductCPP_descriptor_;
  metadata.reflection = ProductCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenComponentWindowReq::OpenComponentWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.OpenComponentWindowReq)
}

void OpenComponentWindowReq::InitAsDefaultInstance() {
}

OpenComponentWindowReq::OpenComponentWindowReq(const OpenComponentWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.OpenComponentWindowReq)
}

void OpenComponentWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenComponentWindowReq::~OpenComponentWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoComponent.OpenComponentWindowReq)
  SharedDtor();
}

void OpenComponentWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenComponentWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenComponentWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenComponentWindowReq_descriptor_;
}

const OpenComponentWindowReq& OpenComponentWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

OpenComponentWindowReq* OpenComponentWindowReq::default_instance_ = NULL;

OpenComponentWindowReq* OpenComponentWindowReq::New() const {
  return new OpenComponentWindowReq;
}

void OpenComponentWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenComponentWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.OpenComponentWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.OpenComponentWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.OpenComponentWindowReq)
  return false;
#undef DO_
}

void OpenComponentWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.OpenComponentWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.OpenComponentWindowReq)
}

::google::protobuf::uint8* OpenComponentWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.OpenComponentWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.OpenComponentWindowReq)
  return target;
}

int OpenComponentWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenComponentWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenComponentWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenComponentWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenComponentWindowReq::MergeFrom(const OpenComponentWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenComponentWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenComponentWindowReq::CopyFrom(const OpenComponentWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenComponentWindowReq::IsInitialized() const {

  return true;
}

void OpenComponentWindowReq::Swap(OpenComponentWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenComponentWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenComponentWindowReq_descriptor_;
  metadata.reflection = OpenComponentWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenComponentWindowResp::kMaterialFieldNumber;
#endif  // !_MSC_VER

OpenComponentWindowResp::OpenComponentWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.OpenComponentWindowResp)
}

void OpenComponentWindowResp::InitAsDefaultInstance() {
}

OpenComponentWindowResp::OpenComponentWindowResp(const OpenComponentWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.OpenComponentWindowResp)
}

void OpenComponentWindowResp::SharedCtor() {
  _cached_size_ = 0;
  material_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenComponentWindowResp::~OpenComponentWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoComponent.OpenComponentWindowResp)
  SharedDtor();
}

void OpenComponentWindowResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenComponentWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenComponentWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenComponentWindowResp_descriptor_;
}

const OpenComponentWindowResp& OpenComponentWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

OpenComponentWindowResp* OpenComponentWindowResp::default_instance_ = NULL;

OpenComponentWindowResp* OpenComponentWindowResp::New() const {
  return new OpenComponentWindowResp;
}

void OpenComponentWindowResp::Clear() {
  material_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenComponentWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.OpenComponentWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 material = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.OpenComponentWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.OpenComponentWindowResp)
  return false;
#undef DO_
}

void OpenComponentWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.OpenComponentWindowResp)
  // required uint32 material = 1;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->material(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.OpenComponentWindowResp)
}

::google::protobuf::uint8* OpenComponentWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.OpenComponentWindowResp)
  // required uint32 material = 1;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->material(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.OpenComponentWindowResp)
  return target;
}

int OpenComponentWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 material = 1;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->material());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenComponentWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenComponentWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenComponentWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenComponentWindowResp::MergeFrom(const OpenComponentWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_material()) {
      set_material(from.material());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenComponentWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenComponentWindowResp::CopyFrom(const OpenComponentWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenComponentWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenComponentWindowResp::Swap(OpenComponentWindowResp* other) {
  if (other != this) {
    std::swap(material_, other->material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenComponentWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenComponentWindowResp_descriptor_;
  metadata.reflection = OpenComponentWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProduceReq::ProduceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.ProduceReq)
}

void ProduceReq::InitAsDefaultInstance() {
}

ProduceReq::ProduceReq(const ProduceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.ProduceReq)
}

void ProduceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceReq::~ProduceReq() {
  // @@protoc_insertion_point(destructor:ProtoComponent.ProduceReq)
  SharedDtor();
}

void ProduceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceReq_descriptor_;
}

const ProduceReq& ProduceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

ProduceReq* ProduceReq::default_instance_ = NULL;

ProduceReq* ProduceReq::New() const {
  return new ProduceReq;
}

void ProduceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.ProduceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.ProduceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.ProduceReq)
  return false;
#undef DO_
}

void ProduceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.ProduceReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.ProduceReq)
}

::google::protobuf::uint8* ProduceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.ProduceReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.ProduceReq)
  return target;
}

int ProduceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceReq::MergeFrom(const ProduceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceReq::CopyFrom(const ProduceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceReq::IsInitialized() const {

  return true;
}

void ProduceReq::Swap(ProduceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceReq_descriptor_;
  metadata.reflection = ProduceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceResp::kMaterialFieldNumber;
const int ProduceResp::kProductFieldNumber;
const int ProduceResp::kProduceFieldNumber;
#endif  // !_MSC_VER

ProduceResp::ProduceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.ProduceResp)
}

void ProduceResp::InitAsDefaultInstance() {
  product_ = const_cast< ::ProtoComponent::ProductCPP*>(&::ProtoComponent::ProductCPP::default_instance());
  produce_ = const_cast< ::ProtoComponent::ProduceComponentCPP*>(&::ProtoComponent::ProduceComponentCPP::default_instance());
}

ProduceResp::ProduceResp(const ProduceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.ProduceResp)
}

void ProduceResp::SharedCtor() {
  _cached_size_ = 0;
  material_ = 0u;
  product_ = NULL;
  produce_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceResp::~ProduceResp() {
  // @@protoc_insertion_point(destructor:ProtoComponent.ProduceResp)
  SharedDtor();
}

void ProduceResp::SharedDtor() {
  if (this != default_instance_) {
    delete product_;
    delete produce_;
  }
}

void ProduceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceResp_descriptor_;
}

const ProduceResp& ProduceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

ProduceResp* ProduceResp::default_instance_ = NULL;

ProduceResp* ProduceResp::New() const {
  return new ProduceResp;
}

void ProduceResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    material_ = 0u;
    if (has_product()) {
      if (product_ != NULL) product_->::ProtoComponent::ProductCPP::Clear();
    }
    if (has_produce()) {
      if (produce_ != NULL) produce_->::ProtoComponent::ProduceComponentCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.ProduceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 material = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // required .ProtoComponent.ProductCPP product = 2;
      case 2: {
        if (tag == 18) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_produce;
        break;
      }

      // required .ProtoComponent.ProduceComponentCPP produce = 3;
      case 3: {
        if (tag == 26) {
         parse_produce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_produce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.ProduceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.ProduceResp)
  return false;
#undef DO_
}

void ProduceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.ProduceResp)
  // required uint32 material = 1;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->material(), output);
  }

  // required .ProtoComponent.ProductCPP product = 2;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->product(), output);
  }

  // required .ProtoComponent.ProduceComponentCPP produce = 3;
  if (has_produce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->produce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.ProduceResp)
}

::google::protobuf::uint8* ProduceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.ProduceResp)
  // required uint32 material = 1;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->material(), target);
  }

  // required .ProtoComponent.ProductCPP product = 2;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->product(), target);
  }

  // required .ProtoComponent.ProduceComponentCPP produce = 3;
  if (has_produce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->produce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.ProduceResp)
  return target;
}

int ProduceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 material = 1;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->material());
    }

    // required .ProtoComponent.ProductCPP product = 2;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product());
    }

    // required .ProtoComponent.ProduceComponentCPP produce = 3;
    if (has_produce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->produce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceResp::MergeFrom(const ProduceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_product()) {
      mutable_product()->::ProtoComponent::ProductCPP::MergeFrom(from.product());
    }
    if (from.has_produce()) {
      mutable_produce()->::ProtoComponent::ProduceComponentCPP::MergeFrom(from.produce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceResp::CopyFrom(const ProduceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_product()) {
    if (!this->product().IsInitialized()) return false;
  }
  if (has_produce()) {
    if (!this->produce().IsInitialized()) return false;
  }
  return true;
}

void ProduceResp::Swap(ProduceResp* other) {
  if (other != this) {
    std::swap(material_, other->material_);
    std::swap(product_, other->product_);
    std::swap(produce_, other->produce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceResp_descriptor_;
  metadata.reflection = ProduceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OneKeyProduceReq::OneKeyProduceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.OneKeyProduceReq)
}

void OneKeyProduceReq::InitAsDefaultInstance() {
}

OneKeyProduceReq::OneKeyProduceReq(const OneKeyProduceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.OneKeyProduceReq)
}

void OneKeyProduceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyProduceReq::~OneKeyProduceReq() {
  // @@protoc_insertion_point(destructor:ProtoComponent.OneKeyProduceReq)
  SharedDtor();
}

void OneKeyProduceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyProduceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyProduceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyProduceReq_descriptor_;
}

const OneKeyProduceReq& OneKeyProduceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

OneKeyProduceReq* OneKeyProduceReq::default_instance_ = NULL;

OneKeyProduceReq* OneKeyProduceReq::New() const {
  return new OneKeyProduceReq;
}

void OneKeyProduceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneKeyProduceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.OneKeyProduceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.OneKeyProduceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.OneKeyProduceReq)
  return false;
#undef DO_
}

void OneKeyProduceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.OneKeyProduceReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.OneKeyProduceReq)
}

::google::protobuf::uint8* OneKeyProduceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.OneKeyProduceReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.OneKeyProduceReq)
  return target;
}

int OneKeyProduceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyProduceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyProduceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyProduceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneKeyProduceReq::MergeFrom(const OneKeyProduceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneKeyProduceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneKeyProduceReq::CopyFrom(const OneKeyProduceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyProduceReq::IsInitialized() const {

  return true;
}

void OneKeyProduceReq::Swap(OneKeyProduceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneKeyProduceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyProduceReq_descriptor_;
  metadata.reflection = OneKeyProduceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyProduceResp::kMaterialFieldNumber;
const int OneKeyProduceResp::kProductFieldNumber;
const int OneKeyProduceResp::kProduceFieldNumber;
const int OneKeyProduceResp::kStopcodeFieldNumber;
#endif  // !_MSC_VER

OneKeyProduceResp::OneKeyProduceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.OneKeyProduceResp)
}

void OneKeyProduceResp::InitAsDefaultInstance() {
  produce_ = const_cast< ::ProtoComponent::ProduceComponentCPP*>(&::ProtoComponent::ProduceComponentCPP::default_instance());
}

OneKeyProduceResp::OneKeyProduceResp(const OneKeyProduceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.OneKeyProduceResp)
}

void OneKeyProduceResp::SharedCtor() {
  _cached_size_ = 0;
  material_ = 0u;
  produce_ = NULL;
  stopcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyProduceResp::~OneKeyProduceResp() {
  // @@protoc_insertion_point(destructor:ProtoComponent.OneKeyProduceResp)
  SharedDtor();
}

void OneKeyProduceResp::SharedDtor() {
  if (this != default_instance_) {
    delete produce_;
  }
}

void OneKeyProduceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyProduceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyProduceResp_descriptor_;
}

const OneKeyProduceResp& OneKeyProduceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

OneKeyProduceResp* OneKeyProduceResp::default_instance_ = NULL;

OneKeyProduceResp* OneKeyProduceResp::New() const {
  return new OneKeyProduceResp;
}

void OneKeyProduceResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OneKeyProduceResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(material_, stopcode_);
    if (has_produce()) {
      if (produce_ != NULL) produce_->::ProtoComponent::ProduceComponentCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  product_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneKeyProduceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.OneKeyProduceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 material = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // repeated .ProtoComponent.ProductCPP product = 2;
      case 2: {
        if (tag == 18) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product;
        if (input->ExpectTag(26)) goto parse_produce;
        break;
      }

      // required .ProtoComponent.ProduceComponentCPP produce = 3;
      case 3: {
        if (tag == 26) {
         parse_produce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_produce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stopcode;
        break;
      }

      // required uint32 stopcode = 4;
      case 4: {
        if (tag == 32) {
         parse_stopcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stopcode_)));
          set_has_stopcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.OneKeyProduceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.OneKeyProduceResp)
  return false;
#undef DO_
}

void OneKeyProduceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.OneKeyProduceResp)
  // required uint32 material = 1;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->material(), output);
  }

  // repeated .ProtoComponent.ProductCPP product = 2;
  for (int i = 0; i < this->product_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->product(i), output);
  }

  // required .ProtoComponent.ProduceComponentCPP produce = 3;
  if (has_produce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->produce(), output);
  }

  // required uint32 stopcode = 4;
  if (has_stopcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stopcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.OneKeyProduceResp)
}

::google::protobuf::uint8* OneKeyProduceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.OneKeyProduceResp)
  // required uint32 material = 1;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->material(), target);
  }

  // repeated .ProtoComponent.ProductCPP product = 2;
  for (int i = 0; i < this->product_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->product(i), target);
  }

  // required .ProtoComponent.ProduceComponentCPP produce = 3;
  if (has_produce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->produce(), target);
  }

  // required uint32 stopcode = 4;
  if (has_stopcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stopcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.OneKeyProduceResp)
  return target;
}

int OneKeyProduceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 material = 1;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->material());
    }

    // required .ProtoComponent.ProduceComponentCPP produce = 3;
    if (has_produce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->produce());
    }

    // required uint32 stopcode = 4;
    if (has_stopcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stopcode());
    }

  }
  // repeated .ProtoComponent.ProductCPP product = 2;
  total_size += 1 * this->product_size();
  for (int i = 0; i < this->product_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyProduceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyProduceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyProduceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneKeyProduceResp::MergeFrom(const OneKeyProduceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  product_.MergeFrom(from.product_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_produce()) {
      mutable_produce()->::ProtoComponent::ProduceComponentCPP::MergeFrom(from.produce());
    }
    if (from.has_stopcode()) {
      set_stopcode(from.stopcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneKeyProduceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneKeyProduceResp::CopyFrom(const OneKeyProduceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyProduceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->product())) return false;
  if (has_produce()) {
    if (!this->produce().IsInitialized()) return false;
  }
  return true;
}

void OneKeyProduceResp::Swap(OneKeyProduceResp* other) {
  if (other != this) {
    std::swap(material_, other->material_);
    product_.Swap(&other->product_);
    std::swap(produce_, other->produce_);
    std::swap(stopcode_, other->stopcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneKeyProduceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyProduceResp_descriptor_;
  metadata.reflection = OneKeyProduceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CashProduceReq::CashProduceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.CashProduceReq)
}

void CashProduceReq::InitAsDefaultInstance() {
}

CashProduceReq::CashProduceReq(const CashProduceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.CashProduceReq)
}

void CashProduceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashProduceReq::~CashProduceReq() {
  // @@protoc_insertion_point(destructor:ProtoComponent.CashProduceReq)
  SharedDtor();
}

void CashProduceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashProduceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashProduceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashProduceReq_descriptor_;
}

const CashProduceReq& CashProduceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

CashProduceReq* CashProduceReq::default_instance_ = NULL;

CashProduceReq* CashProduceReq::New() const {
  return new CashProduceReq;
}

void CashProduceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashProduceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.CashProduceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.CashProduceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.CashProduceReq)
  return false;
#undef DO_
}

void CashProduceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.CashProduceReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.CashProduceReq)
}

::google::protobuf::uint8* CashProduceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.CashProduceReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.CashProduceReq)
  return target;
}

int CashProduceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashProduceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashProduceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashProduceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashProduceReq::MergeFrom(const CashProduceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashProduceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashProduceReq::CopyFrom(const CashProduceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashProduceReq::IsInitialized() const {

  return true;
}

void CashProduceReq::Swap(CashProduceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashProduceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashProduceReq_descriptor_;
  metadata.reflection = CashProduceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashProduceResp::kCashFieldNumber;
const int CashProduceResp::kProduceFieldNumber;
#endif  // !_MSC_VER

CashProduceResp::CashProduceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoComponent.CashProduceResp)
}

void CashProduceResp::InitAsDefaultInstance() {
  produce_ = const_cast< ::ProtoComponent::ProduceComponentCPP*>(&::ProtoComponent::ProduceComponentCPP::default_instance());
}

CashProduceResp::CashProduceResp(const CashProduceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoComponent.CashProduceResp)
}

void CashProduceResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  produce_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashProduceResp::~CashProduceResp() {
  // @@protoc_insertion_point(destructor:ProtoComponent.CashProduceResp)
  SharedDtor();
}

void CashProduceResp::SharedDtor() {
  if (this != default_instance_) {
    delete produce_;
  }
}

void CashProduceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashProduceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashProduceResp_descriptor_;
}

const CashProduceResp& CashProduceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoComponent_2eproto();
  return *default_instance_;
}

CashProduceResp* CashProduceResp::default_instance_ = NULL;

CashProduceResp* CashProduceResp::New() const {
  return new CashProduceResp;
}

void CashProduceResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cash_ = 0u;
    if (has_produce()) {
      if (produce_ != NULL) produce_->::ProtoComponent::ProduceComponentCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashProduceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoComponent.CashProduceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_produce;
        break;
      }

      // required .ProtoComponent.ProduceComponentCPP produce = 2;
      case 2: {
        if (tag == 18) {
         parse_produce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_produce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoComponent.CashProduceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoComponent.CashProduceResp)
  return false;
#undef DO_
}

void CashProduceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoComponent.CashProduceResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required .ProtoComponent.ProduceComponentCPP produce = 2;
  if (has_produce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->produce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoComponent.CashProduceResp)
}

::google::protobuf::uint8* CashProduceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoComponent.CashProduceResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required .ProtoComponent.ProduceComponentCPP produce = 2;
  if (has_produce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->produce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoComponent.CashProduceResp)
  return target;
}

int CashProduceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required .ProtoComponent.ProduceComponentCPP produce = 2;
    if (has_produce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->produce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashProduceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashProduceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashProduceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashProduceResp::MergeFrom(const CashProduceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_produce()) {
      mutable_produce()->::ProtoComponent::ProduceComponentCPP::MergeFrom(from.produce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashProduceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashProduceResp::CopyFrom(const CashProduceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashProduceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_produce()) {
    if (!this->produce().IsInitialized()) return false;
  }
  return true;
}

void CashProduceResp::Swap(CashProduceResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(produce_, other->produce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashProduceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashProduceResp_descriptor_;
  metadata.reflection = CashProduceResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoComponent

// @@protoc_insertion_point(global_scope)
