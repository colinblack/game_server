// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMission {

namespace {

const ::google::protobuf::Descriptor* MissionCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionAllCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionAllCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerfifyMissonReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerfifyMissonReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyWorldMoveMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyWorldMoveMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMissionRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMissionRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMissionRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMissionRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoMission_2eproto() {
  protobuf_AddDesc_ProtoMission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoMission.proto");
  GOOGLE_CHECK(file != NULL);
  MissionCPP_descriptor_ = file->message_type(0);
  static const int MissionCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, current_),
  };
  MissionCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionCPP_descriptor_,
      MissionCPP::default_instance_,
      MissionCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionCPP));
  MissionAllCPP_descriptor_ = file->message_type(1);
  static const int MissionAllCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAllCPP, missions_),
  };
  MissionAllCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionAllCPP_descriptor_,
      MissionAllCPP::default_instance_,
      MissionAllCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAllCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAllCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionAllCPP));
  PushMissionReq_descriptor_ = file->message_type(2);
  static const int PushMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMissionReq, missions_),
  };
  PushMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMissionReq_descriptor_,
      PushMissionReq::default_instance_,
      PushMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMissionReq));
  VerfifyMissonReq_descriptor_ = file->message_type(3);
  static const int VerfifyMissonReq_offsets_[1] = {
  };
  VerfifyMissonReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerfifyMissonReq_descriptor_,
      VerfifyMissonReq::default_instance_,
      VerfifyMissonReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerfifyMissonReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerfifyMissonReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerfifyMissonReq));
  VerifyWorldMoveMissionReq_descriptor_ = file->message_type(4);
  static const int VerifyWorldMoveMissionReq_offsets_[1] = {
  };
  VerifyWorldMoveMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyWorldMoveMissionReq_descriptor_,
      VerifyWorldMoveMissionReq::default_instance_,
      VerifyWorldMoveMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyWorldMoveMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyWorldMoveMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyWorldMoveMissionReq));
  GetMissionRewardReq_descriptor_ = file->message_type(5);
  static const int GetMissionRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardReq, id_),
  };
  GetMissionRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMissionRewardReq_descriptor_,
      GetMissionRewardReq::default_instance_,
      GetMissionRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMissionRewardReq));
  GetMissionRewardResp_descriptor_ = file->message_type(6);
  static const int GetMissionRewardResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, nextmission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, hammer_),
  };
  GetMissionRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMissionRewardResp_descriptor_,
      GetMissionRewardResp::default_instance_,
      GetMissionRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMissionRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMissionRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoMission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionCPP_descriptor_, &MissionCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionAllCPP_descriptor_, &MissionAllCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMissionReq_descriptor_, &PushMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerfifyMissonReq_descriptor_, &VerfifyMissonReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyWorldMoveMissionReq_descriptor_, &VerifyWorldMoveMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMissionRewardReq_descriptor_, &GetMissionRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMissionRewardResp_descriptor_, &GetMissionRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoMission_2eproto() {
  delete MissionCPP::default_instance_;
  delete MissionCPP_reflection_;
  delete MissionAllCPP::default_instance_;
  delete MissionAllCPP_reflection_;
  delete PushMissionReq::default_instance_;
  delete PushMissionReq_reflection_;
  delete VerfifyMissonReq::default_instance_;
  delete VerfifyMissonReq_reflection_;
  delete VerifyWorldMoveMissionReq::default_instance_;
  delete VerifyWorldMoveMissionReq_reflection_;
  delete GetMissionRewardReq::default_instance_;
  delete GetMissionRewardReq_reflection_;
  delete GetMissionRewardResp::default_instance_;
  delete GetMissionRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoMission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoMission.proto\022\014ProtoMission\"9\n\nMi"
    "ssionCPP\022\n\n\002id\030\001 \002(\r\022\016\n\006status\030\002 \002(\010\022\017\n\007"
    "current\030\003 \003(\r\";\n\rMissionAllCPP\022*\n\010missio"
    "ns\030\001 \003(\0132\030.ProtoMission.MissionCPP\"\?\n\016Pu"
    "shMissionReq\022-\n\010missions\030\001 \002(\0132\033.ProtoMi"
    "ssion.MissionAllCPP\"\022\n\020VerfifyMissonReq\""
    "\033\n\031VerifyWorldMoveMissionReq\"!\n\023GetMissi"
    "onRewardReq\022\n\n\002id\030\001 \002(\r\"\236\001\n\024GetMissionRe"
    "wardResp\022\014\n\004food\030\001 \002(\r\022\014\n\004coin\030\002 \002(\r\022\014\n\004"
    "wood\030\003 \002(\r\022\013\n\003exp\030\004 \002(\004\022\r\n\005level\030\005 \002(\r\0220"
    "\n\013nextmission\030\006 \002(\0132\033.ProtoMission.Missi"
    "onAllCPP\022\016\n\006hammer\030\007 \001(\r", 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMission.proto", &protobuf_RegisterTypes);
  MissionCPP::default_instance_ = new MissionCPP();
  MissionAllCPP::default_instance_ = new MissionAllCPP();
  PushMissionReq::default_instance_ = new PushMissionReq();
  VerfifyMissonReq::default_instance_ = new VerfifyMissonReq();
  VerifyWorldMoveMissionReq::default_instance_ = new VerifyWorldMoveMissionReq();
  GetMissionRewardReq::default_instance_ = new GetMissionRewardReq();
  GetMissionRewardResp::default_instance_ = new GetMissionRewardResp();
  MissionCPP::default_instance_->InitAsDefaultInstance();
  MissionAllCPP::default_instance_->InitAsDefaultInstance();
  PushMissionReq::default_instance_->InitAsDefaultInstance();
  VerfifyMissonReq::default_instance_->InitAsDefaultInstance();
  VerifyWorldMoveMissionReq::default_instance_->InitAsDefaultInstance();
  GetMissionRewardReq::default_instance_->InitAsDefaultInstance();
  GetMissionRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoMission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoMission_2eproto {
  StaticDescriptorInitializer_ProtoMission_2eproto() {
    protobuf_AddDesc_ProtoMission_2eproto();
  }
} static_descriptor_initializer_ProtoMission_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MissionCPP::kIdFieldNumber;
const int MissionCPP::kStatusFieldNumber;
const int MissionCPP::kCurrentFieldNumber;
#endif  // !_MSC_VER

MissionCPP::MissionCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.MissionCPP)
}

void MissionCPP::InitAsDefaultInstance() {
}

MissionCPP::MissionCPP(const MissionCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.MissionCPP)
}

void MissionCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionCPP::~MissionCPP() {
  // @@protoc_insertion_point(destructor:ProtoMission.MissionCPP)
  SharedDtor();
}

void MissionCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionCPP_descriptor_;
}

const MissionCPP& MissionCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

MissionCPP* MissionCPP::default_instance_ = NULL;

MissionCPP* MissionCPP::New() const {
  return new MissionCPP;
}

void MissionCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MissionCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  current_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.MissionCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current;
        break;
      }

      // repeated uint32 current = 3;
      case 3: {
        if (tag == 24) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_current())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.MissionCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.MissionCPP)
  return false;
#undef DO_
}

void MissionCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // repeated uint32 current = 3;
  for (int i = 0; i < this->current_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->current(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.MissionCPP)
}

::google::protobuf::uint8* MissionCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // repeated uint32 current = 3;
  for (int i = 0; i < this->current_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->current(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.MissionCPP)
  return target;
}

int MissionCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 current = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current(i));
    }
    total_size += 1 * this->current_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionCPP::MergeFrom(const MissionCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  current_.MergeFrom(from.current_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionCPP::CopyFrom(const MissionCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MissionCPP::Swap(MissionCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    current_.Swap(&other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionCPP_descriptor_;
  metadata.reflection = MissionCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionAllCPP::kMissionsFieldNumber;
#endif  // !_MSC_VER

MissionAllCPP::MissionAllCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.MissionAllCPP)
}

void MissionAllCPP::InitAsDefaultInstance() {
}

MissionAllCPP::MissionAllCPP(const MissionAllCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.MissionAllCPP)
}

void MissionAllCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionAllCPP::~MissionAllCPP() {
  // @@protoc_insertion_point(destructor:ProtoMission.MissionAllCPP)
  SharedDtor();
}

void MissionAllCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionAllCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionAllCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionAllCPP_descriptor_;
}

const MissionAllCPP& MissionAllCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

MissionAllCPP* MissionAllCPP::default_instance_ = NULL;

MissionAllCPP* MissionAllCPP::New() const {
  return new MissionAllCPP;
}

void MissionAllCPP::Clear() {
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionAllCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.MissionAllCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMission.MissionCPP missions = 1;
      case 1: {
        if (tag == 10) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_missions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.MissionAllCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.MissionAllCPP)
  return false;
#undef DO_
}

void MissionAllCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.MissionAllCPP)
  // repeated .ProtoMission.MissionCPP missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.MissionAllCPP)
}

::google::protobuf::uint8* MissionAllCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.MissionAllCPP)
  // repeated .ProtoMission.MissionCPP missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.MissionAllCPP)
  return target;
}

int MissionAllCPP::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoMission.MissionCPP missions = 1;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionAllCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionAllCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionAllCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionAllCPP::MergeFrom(const MissionAllCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionAllCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionAllCPP::CopyFrom(const MissionAllCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionAllCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->missions())) return false;
  return true;
}

void MissionAllCPP::Swap(MissionAllCPP* other) {
  if (other != this) {
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionAllCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionAllCPP_descriptor_;
  metadata.reflection = MissionAllCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMissionReq::kMissionsFieldNumber;
#endif  // !_MSC_VER

PushMissionReq::PushMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.PushMissionReq)
}

void PushMissionReq::InitAsDefaultInstance() {
  missions_ = const_cast< ::ProtoMission::MissionAllCPP*>(&::ProtoMission::MissionAllCPP::default_instance());
}

PushMissionReq::PushMissionReq(const PushMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.PushMissionReq)
}

void PushMissionReq::SharedCtor() {
  _cached_size_ = 0;
  missions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMissionReq::~PushMissionReq() {
  // @@protoc_insertion_point(destructor:ProtoMission.PushMissionReq)
  SharedDtor();
}

void PushMissionReq::SharedDtor() {
  if (this != default_instance_) {
    delete missions_;
  }
}

void PushMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMissionReq_descriptor_;
}

const PushMissionReq& PushMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

PushMissionReq* PushMissionReq::default_instance_ = NULL;

PushMissionReq* PushMissionReq::New() const {
  return new PushMissionReq;
}

void PushMissionReq::Clear() {
  if (has_missions()) {
    if (missions_ != NULL) missions_->::ProtoMission::MissionAllCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.PushMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoMission.MissionAllCPP missions = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.PushMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.PushMissionReq)
  return false;
#undef DO_
}

void PushMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.PushMissionReq)
  // required .ProtoMission.MissionAllCPP missions = 1;
  if (has_missions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.PushMissionReq)
}

::google::protobuf::uint8* PushMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.PushMissionReq)
  // required .ProtoMission.MissionAllCPP missions = 1;
  if (has_missions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.PushMissionReq)
  return target;
}

int PushMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoMission.MissionAllCPP missions = 1;
    if (has_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMissionReq::MergeFrom(const PushMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missions()) {
      mutable_missions()->::ProtoMission::MissionAllCPP::MergeFrom(from.missions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMissionReq::CopyFrom(const PushMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMissionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_missions()) {
    if (!this->missions().IsInitialized()) return false;
  }
  return true;
}

void PushMissionReq::Swap(PushMissionReq* other) {
  if (other != this) {
    std::swap(missions_, other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMissionReq_descriptor_;
  metadata.reflection = PushMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VerfifyMissonReq::VerfifyMissonReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.VerfifyMissonReq)
}

void VerfifyMissonReq::InitAsDefaultInstance() {
}

VerfifyMissonReq::VerfifyMissonReq(const VerfifyMissonReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.VerfifyMissonReq)
}

void VerfifyMissonReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerfifyMissonReq::~VerfifyMissonReq() {
  // @@protoc_insertion_point(destructor:ProtoMission.VerfifyMissonReq)
  SharedDtor();
}

void VerfifyMissonReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerfifyMissonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerfifyMissonReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerfifyMissonReq_descriptor_;
}

const VerfifyMissonReq& VerfifyMissonReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

VerfifyMissonReq* VerfifyMissonReq::default_instance_ = NULL;

VerfifyMissonReq* VerfifyMissonReq::New() const {
  return new VerfifyMissonReq;
}

void VerfifyMissonReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerfifyMissonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.VerfifyMissonReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.VerfifyMissonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.VerfifyMissonReq)
  return false;
#undef DO_
}

void VerfifyMissonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.VerfifyMissonReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.VerfifyMissonReq)
}

::google::protobuf::uint8* VerfifyMissonReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.VerfifyMissonReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.VerfifyMissonReq)
  return target;
}

int VerfifyMissonReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerfifyMissonReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerfifyMissonReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerfifyMissonReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerfifyMissonReq::MergeFrom(const VerfifyMissonReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerfifyMissonReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerfifyMissonReq::CopyFrom(const VerfifyMissonReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerfifyMissonReq::IsInitialized() const {

  return true;
}

void VerfifyMissonReq::Swap(VerfifyMissonReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerfifyMissonReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerfifyMissonReq_descriptor_;
  metadata.reflection = VerfifyMissonReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VerifyWorldMoveMissionReq::VerifyWorldMoveMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.VerifyWorldMoveMissionReq)
}

void VerifyWorldMoveMissionReq::InitAsDefaultInstance() {
}

VerifyWorldMoveMissionReq::VerifyWorldMoveMissionReq(const VerifyWorldMoveMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.VerifyWorldMoveMissionReq)
}

void VerifyWorldMoveMissionReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyWorldMoveMissionReq::~VerifyWorldMoveMissionReq() {
  // @@protoc_insertion_point(destructor:ProtoMission.VerifyWorldMoveMissionReq)
  SharedDtor();
}

void VerifyWorldMoveMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyWorldMoveMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyWorldMoveMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyWorldMoveMissionReq_descriptor_;
}

const VerifyWorldMoveMissionReq& VerifyWorldMoveMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

VerifyWorldMoveMissionReq* VerifyWorldMoveMissionReq::default_instance_ = NULL;

VerifyWorldMoveMissionReq* VerifyWorldMoveMissionReq::New() const {
  return new VerifyWorldMoveMissionReq;
}

void VerifyWorldMoveMissionReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyWorldMoveMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.VerifyWorldMoveMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.VerifyWorldMoveMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.VerifyWorldMoveMissionReq)
  return false;
#undef DO_
}

void VerifyWorldMoveMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.VerifyWorldMoveMissionReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.VerifyWorldMoveMissionReq)
}

::google::protobuf::uint8* VerifyWorldMoveMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.VerifyWorldMoveMissionReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.VerifyWorldMoveMissionReq)
  return target;
}

int VerifyWorldMoveMissionReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyWorldMoveMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyWorldMoveMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyWorldMoveMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyWorldMoveMissionReq::MergeFrom(const VerifyWorldMoveMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyWorldMoveMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyWorldMoveMissionReq::CopyFrom(const VerifyWorldMoveMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyWorldMoveMissionReq::IsInitialized() const {

  return true;
}

void VerifyWorldMoveMissionReq::Swap(VerifyWorldMoveMissionReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyWorldMoveMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyWorldMoveMissionReq_descriptor_;
  metadata.reflection = VerifyWorldMoveMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMissionRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetMissionRewardReq::GetMissionRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.GetMissionRewardReq)
}

void GetMissionRewardReq::InitAsDefaultInstance() {
}

GetMissionRewardReq::GetMissionRewardReq(const GetMissionRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.GetMissionRewardReq)
}

void GetMissionRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMissionRewardReq::~GetMissionRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoMission.GetMissionRewardReq)
  SharedDtor();
}

void GetMissionRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMissionRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMissionRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMissionRewardReq_descriptor_;
}

const GetMissionRewardReq& GetMissionRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

GetMissionRewardReq* GetMissionRewardReq::default_instance_ = NULL;

GetMissionRewardReq* GetMissionRewardReq::New() const {
  return new GetMissionRewardReq;
}

void GetMissionRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMissionRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.GetMissionRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.GetMissionRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.GetMissionRewardReq)
  return false;
#undef DO_
}

void GetMissionRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.GetMissionRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.GetMissionRewardReq)
}

::google::protobuf::uint8* GetMissionRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.GetMissionRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.GetMissionRewardReq)
  return target;
}

int GetMissionRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMissionRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMissionRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMissionRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMissionRewardReq::MergeFrom(const GetMissionRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMissionRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMissionRewardReq::CopyFrom(const GetMissionRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMissionRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetMissionRewardReq::Swap(GetMissionRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMissionRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMissionRewardReq_descriptor_;
  metadata.reflection = GetMissionRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMissionRewardResp::kFoodFieldNumber;
const int GetMissionRewardResp::kCoinFieldNumber;
const int GetMissionRewardResp::kWoodFieldNumber;
const int GetMissionRewardResp::kExpFieldNumber;
const int GetMissionRewardResp::kLevelFieldNumber;
const int GetMissionRewardResp::kNextmissionFieldNumber;
const int GetMissionRewardResp::kHammerFieldNumber;
#endif  // !_MSC_VER

GetMissionRewardResp::GetMissionRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.GetMissionRewardResp)
}

void GetMissionRewardResp::InitAsDefaultInstance() {
  nextmission_ = const_cast< ::ProtoMission::MissionAllCPP*>(&::ProtoMission::MissionAllCPP::default_instance());
}

GetMissionRewardResp::GetMissionRewardResp(const GetMissionRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.GetMissionRewardResp)
}

void GetMissionRewardResp::SharedCtor() {
  _cached_size_ = 0;
  food_ = 0u;
  coin_ = 0u;
  wood_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  nextmission_ = NULL;
  hammer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMissionRewardResp::~GetMissionRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoMission.GetMissionRewardResp)
  SharedDtor();
}

void GetMissionRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete nextmission_;
  }
}

void GetMissionRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMissionRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMissionRewardResp_descriptor_;
}

const GetMissionRewardResp& GetMissionRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

GetMissionRewardResp* GetMissionRewardResp::default_instance_ = NULL;

GetMissionRewardResp* GetMissionRewardResp::New() const {
  return new GetMissionRewardResp;
}

void GetMissionRewardResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetMissionRewardResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(food_, level_);
    if (has_nextmission()) {
      if (nextmission_ != NULL) nextmission_->::ProtoMission::MissionAllCPP::Clear();
    }
    hammer_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMissionRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.GetMissionRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 food = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wood;
        break;
      }

      // required uint32 wood = 3;
      case 3: {
        if (tag == 24) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint64 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nextmission;
        break;
      }

      // required .ProtoMission.MissionAllCPP nextmission = 6;
      case 6: {
        if (tag == 50) {
         parse_nextmission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextmission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hammer;
        break;
      }

      // optional uint32 hammer = 7;
      case 7: {
        if (tag == 56) {
         parse_hammer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammer_)));
          set_has_hammer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.GetMissionRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.GetMissionRewardResp)
  return false;
#undef DO_
}

void GetMissionRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.GetMissionRewardResp)
  // required uint32 food = 1;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->food(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wood(), output);
  }

  // required uint64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->exp(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required .ProtoMission.MissionAllCPP nextmission = 6;
  if (has_nextmission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nextmission(), output);
  }

  // optional uint32 hammer = 7;
  if (has_hammer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hammer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.GetMissionRewardResp)
}

::google::protobuf::uint8* GetMissionRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.GetMissionRewardResp)
  // required uint32 food = 1;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->food(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wood(), target);
  }

  // required uint64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->exp(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // required .ProtoMission.MissionAllCPP nextmission = 6;
  if (has_nextmission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nextmission(), target);
  }

  // optional uint32 hammer = 7;
  if (has_hammer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hammer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.GetMissionRewardResp)
  return target;
}

int GetMissionRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 food = 1;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 3;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required .ProtoMission.MissionAllCPP nextmission = 6;
    if (has_nextmission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextmission());
    }

    // optional uint32 hammer = 7;
    if (has_hammer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMissionRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMissionRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMissionRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMissionRewardResp::MergeFrom(const GetMissionRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nextmission()) {
      mutable_nextmission()->::ProtoMission::MissionAllCPP::MergeFrom(from.nextmission());
    }
    if (from.has_hammer()) {
      set_hammer(from.hammer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMissionRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMissionRewardResp::CopyFrom(const GetMissionRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMissionRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_nextmission()) {
    if (!this->nextmission().IsInitialized()) return false;
  }
  return true;
}

void GetMissionRewardResp::Swap(GetMissionRewardResp* other) {
  if (other != this) {
    std::swap(food_, other->food_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(nextmission_, other->nextmission_);
    std::swap(hammer_, other->hammer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMissionRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMissionRewardResp_descriptor_;
  metadata.reflection = GetMissionRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMission

// @@protoc_insertion_point(global_scope)
