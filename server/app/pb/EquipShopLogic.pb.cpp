// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipShopLogic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipShopLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EquipShopLogic {

namespace {

const ::google::protobuf::Descriptor* RefreshReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperRefreshReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperRefreshReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperRefreshResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperRefreshResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutRefreshReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutRefreshReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutRefreshResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutRefreshResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeWingmanReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeWingmanReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeWingmanResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeWingmanResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipShopLogic_2eproto() {
  protobuf_AddDesc_EquipShopLogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipShopLogic.proto");
  GOOGLE_CHECK(file != NULL);
  RefreshReq_descriptor_ = file->message_type(0);
  static const int RefreshReq_offsets_[1] = {
  };
  RefreshReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshReq_descriptor_,
      RefreshReq::default_instance_,
      RefreshReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshReq));
  RefreshResp_descriptor_ = file->message_type(1);
  static const int RefreshResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshResp, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshResp, equippool_),
  };
  RefreshResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshResp_descriptor_,
      RefreshResp::default_instance_,
      RefreshResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshResp));
  SuperRefreshReq_descriptor_ = file->message_type(2);
  static const int SuperRefreshReq_offsets_[1] = {
  };
  SuperRefreshReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperRefreshReq_descriptor_,
      SuperRefreshReq::default_instance_,
      SuperRefreshReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRefreshReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRefreshReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperRefreshReq));
  SuperRefreshResp_descriptor_ = file->message_type(3);
  static const int SuperRefreshResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRefreshResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRefreshResp, equippool_),
  };
  SuperRefreshResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperRefreshResp_descriptor_,
      SuperRefreshResp::default_instance_,
      SuperRefreshResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRefreshResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRefreshResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperRefreshResp));
  CutRefreshReq_descriptor_ = file->message_type(4);
  static const int CutRefreshReq_offsets_[1] = {
  };
  CutRefreshReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CutRefreshReq_descriptor_,
      CutRefreshReq::default_instance_,
      CutRefreshReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutRefreshReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutRefreshReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CutRefreshReq));
  CutRefreshResp_descriptor_ = file->message_type(5);
  static const int CutRefreshResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutRefreshResp, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutRefreshResp, cash_),
  };
  CutRefreshResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CutRefreshResp_descriptor_,
      CutRefreshResp::default_instance_,
      CutRefreshResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutRefreshResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutRefreshResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CutRefreshResp));
  PurchaseEquipReq_descriptor_ = file->message_type(6);
  static const int PurchaseEquipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipReq, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipReq, eqid_),
  };
  PurchaseEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseEquipReq_descriptor_,
      PurchaseEquipReq::default_instance_,
      PurchaseEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseEquipReq));
  PurchaseEquipResp_descriptor_ = file->message_type(7);
  static const int PurchaseEquipResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, equippool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, iron_),
  };
  PurchaseEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseEquipResp_descriptor_,
      PurchaseEquipResp::default_instance_,
      PurchaseEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseEquipResp));
  ExchangeWingmanReq_descriptor_ = file->message_type(8);
  static const int ExchangeWingmanReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanReq, eqid_),
  };
  ExchangeWingmanReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeWingmanReq_descriptor_,
      ExchangeWingmanReq::default_instance_,
      ExchangeWingmanReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeWingmanReq));
  ExchangeWingmanResp_descriptor_ = file->message_type(9);
  static const int ExchangeWingmanResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanResp, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanResp, ticket_),
  };
  ExchangeWingmanResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeWingmanResp_descriptor_,
      ExchangeWingmanResp::default_instance_,
      ExchangeWingmanResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeWingmanResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeWingmanResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipShopLogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshReq_descriptor_, &RefreshReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshResp_descriptor_, &RefreshResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperRefreshReq_descriptor_, &SuperRefreshReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperRefreshResp_descriptor_, &SuperRefreshResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CutRefreshReq_descriptor_, &CutRefreshReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CutRefreshResp_descriptor_, &CutRefreshResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseEquipReq_descriptor_, &PurchaseEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseEquipResp_descriptor_, &PurchaseEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeWingmanReq_descriptor_, &ExchangeWingmanReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeWingmanResp_descriptor_, &ExchangeWingmanResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipShopLogic_2eproto() {
  delete RefreshReq::default_instance_;
  delete RefreshReq_reflection_;
  delete RefreshResp::default_instance_;
  delete RefreshResp_reflection_;
  delete SuperRefreshReq::default_instance_;
  delete SuperRefreshReq_reflection_;
  delete SuperRefreshResp::default_instance_;
  delete SuperRefreshResp_reflection_;
  delete CutRefreshReq::default_instance_;
  delete CutRefreshReq_reflection_;
  delete CutRefreshResp::default_instance_;
  delete CutRefreshResp_reflection_;
  delete PurchaseEquipReq::default_instance_;
  delete PurchaseEquipReq_reflection_;
  delete PurchaseEquipResp::default_instance_;
  delete PurchaseEquipResp_reflection_;
  delete ExchangeWingmanReq::default_instance_;
  delete ExchangeWingmanReq_reflection_;
  delete ExchangeWingmanResp::default_instance_;
  delete ExchangeWingmanResp_reflection_;
}

void protobuf_AddDesc_EquipShopLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024EquipShopLogic.proto\022\016EquipShopLogic\032\020"
    "DataCommon.proto\"\014\n\nRefreshReq\"J\n\013Refres"
    "hResp\022\016\n\006cdtime\030\001 \002(\r\022+\n\tequippool\030\002 \003(\013"
    "2\030.DataCommon.EquipShopCPP\"\021\n\017SuperRefre"
    "shReq\"M\n\020SuperRefreshResp\022\014\n\004cash\030\001 \002(\r\022"
    "+\n\tequippool\030\002 \003(\0132\030.DataCommon.EquipSho"
    "pCPP\"\017\n\rCutRefreshReq\".\n\016CutRefreshResp\022"
    "\016\n\006cdtime\030\001 \002(\r\022\014\n\004cash\030\002 \002(\r\"-\n\020Purchas"
    "eEquipReq\022\013\n\003pid\030\001 \002(\r\022\014\n\004eqid\030\002 \002(\r\"\224\001\n"
    "\021PurchaseEquipResp\022\'\n\005equip\030\001 \001(\0132\030.Data"
    "Common.EquipmentCPP\022\014\n\004coin\030\002 \002(\r\022+\n\tequ"
    "ippool\030\003 \003(\0132\030.DataCommon.EquipShopCPP\022\r"
    "\n\005order\030\004 \002(\r\022\014\n\004iron\030\005 \002(\r\"\"\n\022ExchangeW"
    "ingmanReq\022\014\n\004eqid\030\001 \002(\r\"R\n\023ExchangeWingm"
    "anResp\022+\n\006equips\030\001 \002(\0132\033.DataCommon.Equi"
    "pmentAllCPP\022\016\n\006ticket\030\002 \002(\r", 627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipShopLogic.proto", &protobuf_RegisterTypes);
  RefreshReq::default_instance_ = new RefreshReq();
  RefreshResp::default_instance_ = new RefreshResp();
  SuperRefreshReq::default_instance_ = new SuperRefreshReq();
  SuperRefreshResp::default_instance_ = new SuperRefreshResp();
  CutRefreshReq::default_instance_ = new CutRefreshReq();
  CutRefreshResp::default_instance_ = new CutRefreshResp();
  PurchaseEquipReq::default_instance_ = new PurchaseEquipReq();
  PurchaseEquipResp::default_instance_ = new PurchaseEquipResp();
  ExchangeWingmanReq::default_instance_ = new ExchangeWingmanReq();
  ExchangeWingmanResp::default_instance_ = new ExchangeWingmanResp();
  RefreshReq::default_instance_->InitAsDefaultInstance();
  RefreshResp::default_instance_->InitAsDefaultInstance();
  SuperRefreshReq::default_instance_->InitAsDefaultInstance();
  SuperRefreshResp::default_instance_->InitAsDefaultInstance();
  CutRefreshReq::default_instance_->InitAsDefaultInstance();
  CutRefreshResp::default_instance_->InitAsDefaultInstance();
  PurchaseEquipReq::default_instance_->InitAsDefaultInstance();
  PurchaseEquipResp::default_instance_->InitAsDefaultInstance();
  ExchangeWingmanReq::default_instance_->InitAsDefaultInstance();
  ExchangeWingmanResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipShopLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipShopLogic_2eproto {
  StaticDescriptorInitializer_EquipShopLogic_2eproto() {
    protobuf_AddDesc_EquipShopLogic_2eproto();
  }
} static_descriptor_initializer_EquipShopLogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RefreshReq::RefreshReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.RefreshReq)
}

void RefreshReq::InitAsDefaultInstance() {
}

RefreshReq::RefreshReq(const RefreshReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.RefreshReq)
}

void RefreshReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshReq::~RefreshReq() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.RefreshReq)
  SharedDtor();
}

void RefreshReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshReq_descriptor_;
}

const RefreshReq& RefreshReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

RefreshReq* RefreshReq::default_instance_ = NULL;

RefreshReq* RefreshReq::New() const {
  return new RefreshReq;
}

void RefreshReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.RefreshReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.RefreshReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.RefreshReq)
  return false;
#undef DO_
}

void RefreshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.RefreshReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.RefreshReq)
}

::google::protobuf::uint8* RefreshReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.RefreshReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.RefreshReq)
  return target;
}

int RefreshReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshReq::MergeFrom(const RefreshReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshReq::CopyFrom(const RefreshReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshReq::IsInitialized() const {

  return true;
}

void RefreshReq::Swap(RefreshReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshReq_descriptor_;
  metadata.reflection = RefreshReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshResp::kCdtimeFieldNumber;
const int RefreshResp::kEquippoolFieldNumber;
#endif  // !_MSC_VER

RefreshResp::RefreshResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.RefreshResp)
}

void RefreshResp::InitAsDefaultInstance() {
}

RefreshResp::RefreshResp(const RefreshResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.RefreshResp)
}

void RefreshResp::SharedCtor() {
  _cached_size_ = 0;
  cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshResp::~RefreshResp() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.RefreshResp)
  SharedDtor();
}

void RefreshResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshResp_descriptor_;
}

const RefreshResp& RefreshResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

RefreshResp* RefreshResp::default_instance_ = NULL;

RefreshResp* RefreshResp::New() const {
  return new RefreshResp;
}

void RefreshResp::Clear() {
  cdtime_ = 0u;
  equippool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.RefreshResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cdtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equippool;
        break;
      }

      // repeated .DataCommon.EquipShopCPP equippool = 2;
      case 2: {
        if (tag == 18) {
         parse_equippool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equippool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equippool;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.RefreshResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.RefreshResp)
  return false;
#undef DO_
}

void RefreshResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.RefreshResp)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cdtime(), output);
  }

  // repeated .DataCommon.EquipShopCPP equippool = 2;
  for (int i = 0; i < this->equippool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equippool(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.RefreshResp)
}

::google::protobuf::uint8* RefreshResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.RefreshResp)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cdtime(), target);
  }

  // repeated .DataCommon.EquipShopCPP equippool = 2;
  for (int i = 0; i < this->equippool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equippool(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.RefreshResp)
  return target;
}

int RefreshResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cdtime = 1;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

  }
  // repeated .DataCommon.EquipShopCPP equippool = 2;
  total_size += 1 * this->equippool_size();
  for (int i = 0; i < this->equippool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equippool(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshResp::MergeFrom(const RefreshResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equippool_.MergeFrom(from.equippool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshResp::CopyFrom(const RefreshResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equippool())) return false;
  return true;
}

void RefreshResp::Swap(RefreshResp* other) {
  if (other != this) {
    std::swap(cdtime_, other->cdtime_);
    equippool_.Swap(&other->equippool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshResp_descriptor_;
  metadata.reflection = RefreshResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SuperRefreshReq::SuperRefreshReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.SuperRefreshReq)
}

void SuperRefreshReq::InitAsDefaultInstance() {
}

SuperRefreshReq::SuperRefreshReq(const SuperRefreshReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.SuperRefreshReq)
}

void SuperRefreshReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperRefreshReq::~SuperRefreshReq() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.SuperRefreshReq)
  SharedDtor();
}

void SuperRefreshReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperRefreshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperRefreshReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperRefreshReq_descriptor_;
}

const SuperRefreshReq& SuperRefreshReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

SuperRefreshReq* SuperRefreshReq::default_instance_ = NULL;

SuperRefreshReq* SuperRefreshReq::New() const {
  return new SuperRefreshReq;
}

void SuperRefreshReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperRefreshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.SuperRefreshReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.SuperRefreshReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.SuperRefreshReq)
  return false;
#undef DO_
}

void SuperRefreshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.SuperRefreshReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.SuperRefreshReq)
}

::google::protobuf::uint8* SuperRefreshReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.SuperRefreshReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.SuperRefreshReq)
  return target;
}

int SuperRefreshReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperRefreshReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperRefreshReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperRefreshReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperRefreshReq::MergeFrom(const SuperRefreshReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperRefreshReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperRefreshReq::CopyFrom(const SuperRefreshReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperRefreshReq::IsInitialized() const {

  return true;
}

void SuperRefreshReq::Swap(SuperRefreshReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperRefreshReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperRefreshReq_descriptor_;
  metadata.reflection = SuperRefreshReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperRefreshResp::kCashFieldNumber;
const int SuperRefreshResp::kEquippoolFieldNumber;
#endif  // !_MSC_VER

SuperRefreshResp::SuperRefreshResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.SuperRefreshResp)
}

void SuperRefreshResp::InitAsDefaultInstance() {
}

SuperRefreshResp::SuperRefreshResp(const SuperRefreshResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.SuperRefreshResp)
}

void SuperRefreshResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperRefreshResp::~SuperRefreshResp() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.SuperRefreshResp)
  SharedDtor();
}

void SuperRefreshResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperRefreshResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperRefreshResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperRefreshResp_descriptor_;
}

const SuperRefreshResp& SuperRefreshResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

SuperRefreshResp* SuperRefreshResp::default_instance_ = NULL;

SuperRefreshResp* SuperRefreshResp::New() const {
  return new SuperRefreshResp;
}

void SuperRefreshResp::Clear() {
  cash_ = 0u;
  equippool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperRefreshResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.SuperRefreshResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equippool;
        break;
      }

      // repeated .DataCommon.EquipShopCPP equippool = 2;
      case 2: {
        if (tag == 18) {
         parse_equippool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equippool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equippool;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.SuperRefreshResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.SuperRefreshResp)
  return false;
#undef DO_
}

void SuperRefreshResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.SuperRefreshResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // repeated .DataCommon.EquipShopCPP equippool = 2;
  for (int i = 0; i < this->equippool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equippool(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.SuperRefreshResp)
}

::google::protobuf::uint8* SuperRefreshResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.SuperRefreshResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // repeated .DataCommon.EquipShopCPP equippool = 2;
  for (int i = 0; i < this->equippool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equippool(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.SuperRefreshResp)
  return target;
}

int SuperRefreshResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  // repeated .DataCommon.EquipShopCPP equippool = 2;
  total_size += 1 * this->equippool_size();
  for (int i = 0; i < this->equippool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equippool(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperRefreshResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperRefreshResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperRefreshResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperRefreshResp::MergeFrom(const SuperRefreshResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equippool_.MergeFrom(from.equippool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperRefreshResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperRefreshResp::CopyFrom(const SuperRefreshResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperRefreshResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equippool())) return false;
  return true;
}

void SuperRefreshResp::Swap(SuperRefreshResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    equippool_.Swap(&other->equippool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperRefreshResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperRefreshResp_descriptor_;
  metadata.reflection = SuperRefreshResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CutRefreshReq::CutRefreshReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.CutRefreshReq)
}

void CutRefreshReq::InitAsDefaultInstance() {
}

CutRefreshReq::CutRefreshReq(const CutRefreshReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.CutRefreshReq)
}

void CutRefreshReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutRefreshReq::~CutRefreshReq() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.CutRefreshReq)
  SharedDtor();
}

void CutRefreshReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CutRefreshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutRefreshReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutRefreshReq_descriptor_;
}

const CutRefreshReq& CutRefreshReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

CutRefreshReq* CutRefreshReq::default_instance_ = NULL;

CutRefreshReq* CutRefreshReq::New() const {
  return new CutRefreshReq;
}

void CutRefreshReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CutRefreshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.CutRefreshReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.CutRefreshReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.CutRefreshReq)
  return false;
#undef DO_
}

void CutRefreshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.CutRefreshReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.CutRefreshReq)
}

::google::protobuf::uint8* CutRefreshReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.CutRefreshReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.CutRefreshReq)
  return target;
}

int CutRefreshReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutRefreshReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CutRefreshReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CutRefreshReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutRefreshReq::MergeFrom(const CutRefreshReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CutRefreshReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutRefreshReq::CopyFrom(const CutRefreshReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutRefreshReq::IsInitialized() const {

  return true;
}

void CutRefreshReq::Swap(CutRefreshReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CutRefreshReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutRefreshReq_descriptor_;
  metadata.reflection = CutRefreshReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CutRefreshResp::kCdtimeFieldNumber;
const int CutRefreshResp::kCashFieldNumber;
#endif  // !_MSC_VER

CutRefreshResp::CutRefreshResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.CutRefreshResp)
}

void CutRefreshResp::InitAsDefaultInstance() {
}

CutRefreshResp::CutRefreshResp(const CutRefreshResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.CutRefreshResp)
}

void CutRefreshResp::SharedCtor() {
  _cached_size_ = 0;
  cdtime_ = 0u;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutRefreshResp::~CutRefreshResp() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.CutRefreshResp)
  SharedDtor();
}

void CutRefreshResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CutRefreshResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutRefreshResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutRefreshResp_descriptor_;
}

const CutRefreshResp& CutRefreshResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

CutRefreshResp* CutRefreshResp::default_instance_ = NULL;

CutRefreshResp* CutRefreshResp::New() const {
  return new CutRefreshResp;
}

void CutRefreshResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CutRefreshResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cdtime_, cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CutRefreshResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.CutRefreshResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cdtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.CutRefreshResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.CutRefreshResp)
  return false;
#undef DO_
}

void CutRefreshResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.CutRefreshResp)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cdtime(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.CutRefreshResp)
}

::google::protobuf::uint8* CutRefreshResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.CutRefreshResp)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cdtime(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.CutRefreshResp)
  return target;
}

int CutRefreshResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cdtime = 1;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutRefreshResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CutRefreshResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CutRefreshResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutRefreshResp::MergeFrom(const CutRefreshResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CutRefreshResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutRefreshResp::CopyFrom(const CutRefreshResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutRefreshResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CutRefreshResp::Swap(CutRefreshResp* other) {
  if (other != this) {
    std::swap(cdtime_, other->cdtime_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CutRefreshResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutRefreshResp_descriptor_;
  metadata.reflection = CutRefreshResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseEquipReq::kPidFieldNumber;
const int PurchaseEquipReq::kEqidFieldNumber;
#endif  // !_MSC_VER

PurchaseEquipReq::PurchaseEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.PurchaseEquipReq)
}

void PurchaseEquipReq::InitAsDefaultInstance() {
}

PurchaseEquipReq::PurchaseEquipReq(const PurchaseEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.PurchaseEquipReq)
}

void PurchaseEquipReq::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0u;
  eqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseEquipReq::~PurchaseEquipReq() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.PurchaseEquipReq)
  SharedDtor();
}

void PurchaseEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PurchaseEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseEquipReq_descriptor_;
}

const PurchaseEquipReq& PurchaseEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

PurchaseEquipReq* PurchaseEquipReq::default_instance_ = NULL;

PurchaseEquipReq* PurchaseEquipReq::New() const {
  return new PurchaseEquipReq;
}

void PurchaseEquipReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PurchaseEquipReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, eqid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.PurchaseEquipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eqid;
        break;
      }

      // required uint32 eqid = 2;
      case 2: {
        if (tag == 16) {
         parse_eqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.PurchaseEquipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.PurchaseEquipReq)
  return false;
#undef DO_
}

void PurchaseEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.PurchaseEquipReq)
  // required uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // required uint32 eqid = 2;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.PurchaseEquipReq)
}

::google::protobuf::uint8* PurchaseEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.PurchaseEquipReq)
  // required uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // required uint32 eqid = 2;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.PurchaseEquipReq)
  return target;
}

int PurchaseEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // required uint32 eqid = 2;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseEquipReq::MergeFrom(const PurchaseEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseEquipReq::CopyFrom(const PurchaseEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PurchaseEquipReq::Swap(PurchaseEquipReq* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(eqid_, other->eqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseEquipReq_descriptor_;
  metadata.reflection = PurchaseEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseEquipResp::kEquipFieldNumber;
const int PurchaseEquipResp::kCoinFieldNumber;
const int PurchaseEquipResp::kEquippoolFieldNumber;
const int PurchaseEquipResp::kOrderFieldNumber;
const int PurchaseEquipResp::kIronFieldNumber;
#endif  // !_MSC_VER

PurchaseEquipResp::PurchaseEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.PurchaseEquipResp)
}

void PurchaseEquipResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::DataCommon::EquipmentCPP*>(&::DataCommon::EquipmentCPP::default_instance());
}

PurchaseEquipResp::PurchaseEquipResp(const PurchaseEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.PurchaseEquipResp)
}

void PurchaseEquipResp::SharedCtor() {
  _cached_size_ = 0;
  equip_ = NULL;
  coin_ = 0u;
  order_ = 0u;
  iron_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseEquipResp::~PurchaseEquipResp() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.PurchaseEquipResp)
  SharedDtor();
}

void PurchaseEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void PurchaseEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseEquipResp_descriptor_;
}

const PurchaseEquipResp& PurchaseEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

PurchaseEquipResp* PurchaseEquipResp::default_instance_ = NULL;

PurchaseEquipResp* PurchaseEquipResp::New() const {
  return new PurchaseEquipResp;
}

void PurchaseEquipResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PurchaseEquipResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(coin_, iron_);
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equippool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.PurchaseEquipResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentCPP equip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equippool;
        break;
      }

      // repeated .DataCommon.EquipShopCPP equippool = 3;
      case 3: {
        if (tag == 26) {
         parse_equippool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equippool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equippool;
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }

      // required uint32 order = 4;
      case 4: {
        if (tag == 32) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iron;
        break;
      }

      // required uint32 iron = 5;
      case 5: {
        if (tag == 40) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.PurchaseEquipResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.PurchaseEquipResp)
  return false;
#undef DO_
}

void PurchaseEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.PurchaseEquipResp)
  // optional .DataCommon.EquipmentCPP equip = 1;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // repeated .DataCommon.EquipShopCPP equippool = 3;
  for (int i = 0; i < this->equippool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equippool(i), output);
  }

  // required uint32 order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order(), output);
  }

  // required uint32 iron = 5;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->iron(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.PurchaseEquipResp)
}

::google::protobuf::uint8* PurchaseEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.PurchaseEquipResp)
  // optional .DataCommon.EquipmentCPP equip = 1;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // repeated .DataCommon.EquipShopCPP equippool = 3;
  for (int i = 0; i < this->equippool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equippool(i), target);
  }

  // required uint32 order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->order(), target);
  }

  // required uint32 iron = 5;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->iron(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.PurchaseEquipResp)
  return target;
}

int PurchaseEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentCPP equip = 1;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // required uint32 iron = 5;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

  }
  // repeated .DataCommon.EquipShopCPP equippool = 3;
  total_size += 1 * this->equippool_size();
  for (int i = 0; i < this->equippool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equippool(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseEquipResp::MergeFrom(const PurchaseEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equippool_.MergeFrom(from.equippool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentCPP::MergeFrom(from.equip());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseEquipResp::CopyFrom(const PurchaseEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->equippool())) return false;
  return true;
}

void PurchaseEquipResp::Swap(PurchaseEquipResp* other) {
  if (other != this) {
    std::swap(equip_, other->equip_);
    std::swap(coin_, other->coin_);
    equippool_.Swap(&other->equippool_);
    std::swap(order_, other->order_);
    std::swap(iron_, other->iron_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseEquipResp_descriptor_;
  metadata.reflection = PurchaseEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeWingmanReq::kEqidFieldNumber;
#endif  // !_MSC_VER

ExchangeWingmanReq::ExchangeWingmanReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.ExchangeWingmanReq)
}

void ExchangeWingmanReq::InitAsDefaultInstance() {
}

ExchangeWingmanReq::ExchangeWingmanReq(const ExchangeWingmanReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.ExchangeWingmanReq)
}

void ExchangeWingmanReq::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeWingmanReq::~ExchangeWingmanReq() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.ExchangeWingmanReq)
  SharedDtor();
}

void ExchangeWingmanReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeWingmanReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeWingmanReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeWingmanReq_descriptor_;
}

const ExchangeWingmanReq& ExchangeWingmanReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

ExchangeWingmanReq* ExchangeWingmanReq::default_instance_ = NULL;

ExchangeWingmanReq* ExchangeWingmanReq::New() const {
  return new ExchangeWingmanReq;
}

void ExchangeWingmanReq::Clear() {
  eqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeWingmanReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.ExchangeWingmanReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.ExchangeWingmanReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.ExchangeWingmanReq)
  return false;
#undef DO_
}

void ExchangeWingmanReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.ExchangeWingmanReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.ExchangeWingmanReq)
}

::google::protobuf::uint8* ExchangeWingmanReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.ExchangeWingmanReq)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.ExchangeWingmanReq)
  return target;
}

int ExchangeWingmanReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeWingmanReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeWingmanReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeWingmanReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeWingmanReq::MergeFrom(const ExchangeWingmanReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeWingmanReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeWingmanReq::CopyFrom(const ExchangeWingmanReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeWingmanReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExchangeWingmanReq::Swap(ExchangeWingmanReq* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeWingmanReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeWingmanReq_descriptor_;
  metadata.reflection = ExchangeWingmanReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeWingmanResp::kEquipsFieldNumber;
const int ExchangeWingmanResp::kTicketFieldNumber;
#endif  // !_MSC_VER

ExchangeWingmanResp::ExchangeWingmanResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipShopLogic.ExchangeWingmanResp)
}

void ExchangeWingmanResp::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
}

ExchangeWingmanResp::ExchangeWingmanResp(const ExchangeWingmanResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipShopLogic.ExchangeWingmanResp)
}

void ExchangeWingmanResp::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  ticket_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeWingmanResp::~ExchangeWingmanResp() {
  // @@protoc_insertion_point(destructor:EquipShopLogic.ExchangeWingmanResp)
  SharedDtor();
}

void ExchangeWingmanResp::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
  }
}

void ExchangeWingmanResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeWingmanResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeWingmanResp_descriptor_;
}

const ExchangeWingmanResp& ExchangeWingmanResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipShopLogic_2eproto();
  return *default_instance_;
}

ExchangeWingmanResp* ExchangeWingmanResp::default_instance_ = NULL;

ExchangeWingmanResp* ExchangeWingmanResp::New() const {
  return new ExchangeWingmanResp;
}

void ExchangeWingmanResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    ticket_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeWingmanResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipShopLogic.ExchangeWingmanResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ticket;
        break;
      }

      // required uint32 ticket = 2;
      case 2: {
        if (tag == 16) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipShopLogic.ExchangeWingmanResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipShopLogic.ExchangeWingmanResp)
  return false;
#undef DO_
}

void ExchangeWingmanResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipShopLogic.ExchangeWingmanResp)
  // required .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // required uint32 ticket = 2;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipShopLogic.ExchangeWingmanResp)
}

::google::protobuf::uint8* ExchangeWingmanResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipShopLogic.ExchangeWingmanResp)
  // required .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // required uint32 ticket = 2;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipShopLogic.ExchangeWingmanResp)
  return target;
}

int ExchangeWingmanResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // required uint32 ticket = 2;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeWingmanResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeWingmanResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeWingmanResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeWingmanResp::MergeFrom(const ExchangeWingmanResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeWingmanResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeWingmanResp::CopyFrom(const ExchangeWingmanResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeWingmanResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  return true;
}

void ExchangeWingmanResp::Swap(ExchangeWingmanResp* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeWingmanResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeWingmanResp_descriptor_;
  metadata.reflection = ExchangeWingmanResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EquipShopLogic

// @@protoc_insertion_point(global_scope)
