// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoWeapon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoWeapon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoWeapon {

namespace {

const ::google::protobuf::Descriptor* WeaponInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponUnlockResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponUnlockResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponCastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponCastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponCastResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponCastResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoWeapon_2eproto() {
  protobuf_AddDesc_ProtoWeapon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoWeapon.proto");
  GOOGLE_CHECK(file != NULL);
  WeaponInfoCPP_descriptor_ = file->message_type(0);
  static const int WeaponInfoCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfoCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfoCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfoCPP, cast_),
  };
  WeaponInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponInfoCPP_descriptor_,
      WeaponInfoCPP::default_instance_,
      WeaponInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponInfoCPP));
  WeaponUnlockReq_descriptor_ = file->message_type(1);
  static const int WeaponUnlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockReq, id_),
  };
  WeaponUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponUnlockReq_descriptor_,
      WeaponUnlockReq::default_instance_,
      WeaponUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponUnlockReq));
  WeaponUnlockResp_descriptor_ = file->message_type(2);
  static const int WeaponUnlockResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockResp, resource_),
  };
  WeaponUnlockResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponUnlockResp_descriptor_,
      WeaponUnlockResp::default_instance_,
      WeaponUnlockResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUnlockResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponUnlockResp));
  WeaponCastReq_descriptor_ = file->message_type(3);
  static const int WeaponCastReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastReq, id_),
  };
  WeaponCastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponCastReq_descriptor_,
      WeaponCastReq::default_instance_,
      WeaponCastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponCastReq));
  WeaponCastResp_descriptor_ = file->message_type(4);
  static const int WeaponCastResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastResp, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastResp, resource_),
  };
  WeaponCastResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponCastResp_descriptor_,
      WeaponCastResp::default_instance_,
      WeaponCastResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponCastResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponCastResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoWeapon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponInfoCPP_descriptor_, &WeaponInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponUnlockReq_descriptor_, &WeaponUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponUnlockResp_descriptor_, &WeaponUnlockResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponCastReq_descriptor_, &WeaponCastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponCastResp_descriptor_, &WeaponCastResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoWeapon_2eproto() {
  delete WeaponInfoCPP::default_instance_;
  delete WeaponInfoCPP_reflection_;
  delete WeaponUnlockReq::default_instance_;
  delete WeaponUnlockReq_reflection_;
  delete WeaponUnlockResp::default_instance_;
  delete WeaponUnlockResp_reflection_;
  delete WeaponCastReq::default_instance_;
  delete WeaponCastReq_reflection_;
  delete WeaponCastResp::default_instance_;
  delete WeaponCastResp_reflection_;
}

void protobuf_AddDesc_ProtoWeapon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoWeapon.proto\022\013ProtoWeapon\032\020DataCo"
    "mmon.proto\"8\n\rWeaponInfoCPP\022\n\n\002id\030\001 \002(\r\022"
    "\r\n\005level\030\002 \002(\r\022\014\n\004cast\030\003 \002(\r\"\035\n\017WeaponUn"
    "lockReq\022\n\n\002id\030\001 \002(\r\"k\n\020WeaponUnlockResp\022"
    "(\n\004item\030\001 \002(\0132\032.ProtoWeapon.WeaponInfoCP"
    "P\022-\n\010resource\030\002 \002(\0132\033.DataCommon.UserRes"
    "ourceCPP\"\033\n\rWeaponCastReq\022\n\n\002id\030\001 \002(\r\"{\n"
    "\016WeaponCastResp\022(\n\004item\030\001 \002(\0132\032.ProtoWea"
    "pon.WeaponInfoCPP\022\020\n\010multiple\030\002 \002(\r\022-\n\010r"
    "esource\030\003 \002(\0132\033.DataCommon.UserResourceC"
    "PP", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoWeapon.proto", &protobuf_RegisterTypes);
  WeaponInfoCPP::default_instance_ = new WeaponInfoCPP();
  WeaponUnlockReq::default_instance_ = new WeaponUnlockReq();
  WeaponUnlockResp::default_instance_ = new WeaponUnlockResp();
  WeaponCastReq::default_instance_ = new WeaponCastReq();
  WeaponCastResp::default_instance_ = new WeaponCastResp();
  WeaponInfoCPP::default_instance_->InitAsDefaultInstance();
  WeaponUnlockReq::default_instance_->InitAsDefaultInstance();
  WeaponUnlockResp::default_instance_->InitAsDefaultInstance();
  WeaponCastReq::default_instance_->InitAsDefaultInstance();
  WeaponCastResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoWeapon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoWeapon_2eproto {
  StaticDescriptorInitializer_ProtoWeapon_2eproto() {
    protobuf_AddDesc_ProtoWeapon_2eproto();
  }
} static_descriptor_initializer_ProtoWeapon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WeaponInfoCPP::kIdFieldNumber;
const int WeaponInfoCPP::kLevelFieldNumber;
const int WeaponInfoCPP::kCastFieldNumber;
#endif  // !_MSC_VER

WeaponInfoCPP::WeaponInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoWeapon.WeaponInfoCPP)
}

void WeaponInfoCPP::InitAsDefaultInstance() {
}

WeaponInfoCPP::WeaponInfoCPP(const WeaponInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoWeapon.WeaponInfoCPP)
}

void WeaponInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  cast_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponInfoCPP::~WeaponInfoCPP() {
  // @@protoc_insertion_point(destructor:ProtoWeapon.WeaponInfoCPP)
  SharedDtor();
}

void WeaponInfoCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponInfoCPP_descriptor_;
}

const WeaponInfoCPP& WeaponInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoWeapon_2eproto();
  return *default_instance_;
}

WeaponInfoCPP* WeaponInfoCPP::default_instance_ = NULL;

WeaponInfoCPP* WeaponInfoCPP::New() const {
  return new WeaponInfoCPP;
}

void WeaponInfoCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeaponInfoCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, cast_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoWeapon.WeaponInfoCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cast;
        break;
      }

      // required uint32 cast = 3;
      case 3: {
        if (tag == 24) {
         parse_cast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cast_)));
          set_has_cast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoWeapon.WeaponInfoCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoWeapon.WeaponInfoCPP)
  return false;
#undef DO_
}

void WeaponInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoWeapon.WeaponInfoCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 cast = 3;
  if (has_cast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoWeapon.WeaponInfoCPP)
}

::google::protobuf::uint8* WeaponInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoWeapon.WeaponInfoCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 cast = 3;
  if (has_cast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoWeapon.WeaponInfoCPP)
  return target;
}

int WeaponInfoCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 cast = 3;
    if (has_cast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponInfoCPP::MergeFrom(const WeaponInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cast()) {
      set_cast(from.cast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponInfoCPP::CopyFrom(const WeaponInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WeaponInfoCPP::Swap(WeaponInfoCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(cast_, other->cast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponInfoCPP_descriptor_;
  metadata.reflection = WeaponInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponUnlockReq::kIdFieldNumber;
#endif  // !_MSC_VER

WeaponUnlockReq::WeaponUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoWeapon.WeaponUnlockReq)
}

void WeaponUnlockReq::InitAsDefaultInstance() {
}

WeaponUnlockReq::WeaponUnlockReq(const WeaponUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoWeapon.WeaponUnlockReq)
}

void WeaponUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponUnlockReq::~WeaponUnlockReq() {
  // @@protoc_insertion_point(destructor:ProtoWeapon.WeaponUnlockReq)
  SharedDtor();
}

void WeaponUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponUnlockReq_descriptor_;
}

const WeaponUnlockReq& WeaponUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoWeapon_2eproto();
  return *default_instance_;
}

WeaponUnlockReq* WeaponUnlockReq::default_instance_ = NULL;

WeaponUnlockReq* WeaponUnlockReq::New() const {
  return new WeaponUnlockReq;
}

void WeaponUnlockReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoWeapon.WeaponUnlockReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoWeapon.WeaponUnlockReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoWeapon.WeaponUnlockReq)
  return false;
#undef DO_
}

void WeaponUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoWeapon.WeaponUnlockReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoWeapon.WeaponUnlockReq)
}

::google::protobuf::uint8* WeaponUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoWeapon.WeaponUnlockReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoWeapon.WeaponUnlockReq)
  return target;
}

int WeaponUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponUnlockReq::MergeFrom(const WeaponUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponUnlockReq::CopyFrom(const WeaponUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponUnlockReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WeaponUnlockReq::Swap(WeaponUnlockReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponUnlockReq_descriptor_;
  metadata.reflection = WeaponUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponUnlockResp::kItemFieldNumber;
const int WeaponUnlockResp::kResourceFieldNumber;
#endif  // !_MSC_VER

WeaponUnlockResp::WeaponUnlockResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoWeapon.WeaponUnlockResp)
}

void WeaponUnlockResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoWeapon::WeaponInfoCPP*>(&::ProtoWeapon::WeaponInfoCPP::default_instance());
  resource_ = const_cast< ::DataCommon::UserResourceCPP*>(&::DataCommon::UserResourceCPP::default_instance());
}

WeaponUnlockResp::WeaponUnlockResp(const WeaponUnlockResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoWeapon.WeaponUnlockResp)
}

void WeaponUnlockResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponUnlockResp::~WeaponUnlockResp() {
  // @@protoc_insertion_point(destructor:ProtoWeapon.WeaponUnlockResp)
  SharedDtor();
}

void WeaponUnlockResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete resource_;
  }
}

void WeaponUnlockResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponUnlockResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponUnlockResp_descriptor_;
}

const WeaponUnlockResp& WeaponUnlockResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoWeapon_2eproto();
  return *default_instance_;
}

WeaponUnlockResp* WeaponUnlockResp::default_instance_ = NULL;

WeaponUnlockResp* WeaponUnlockResp::New() const {
  return new WeaponUnlockResp;
}

void WeaponUnlockResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoWeapon::WeaponInfoCPP::Clear();
    }
    if (has_resource()) {
      if (resource_ != NULL) resource_->::DataCommon::UserResourceCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponUnlockResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoWeapon.WeaponUnlockResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoWeapon.WeaponInfoCPP item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // required .DataCommon.UserResourceCPP resource = 2;
      case 2: {
        if (tag == 18) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoWeapon.WeaponUnlockResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoWeapon.WeaponUnlockResp)
  return false;
#undef DO_
}

void WeaponUnlockResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoWeapon.WeaponUnlockResp)
  // required .ProtoWeapon.WeaponInfoCPP item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required .DataCommon.UserResourceCPP resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoWeapon.WeaponUnlockResp)
}

::google::protobuf::uint8* WeaponUnlockResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoWeapon.WeaponUnlockResp)
  // required .ProtoWeapon.WeaponInfoCPP item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required .DataCommon.UserResourceCPP resource = 2;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoWeapon.WeaponUnlockResp)
  return target;
}

int WeaponUnlockResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoWeapon.WeaponInfoCPP item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required .DataCommon.UserResourceCPP resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponUnlockResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponUnlockResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponUnlockResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponUnlockResp::MergeFrom(const WeaponUnlockResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoWeapon::WeaponInfoCPP::MergeFrom(from.item());
    }
    if (from.has_resource()) {
      mutable_resource()->::DataCommon::UserResourceCPP::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponUnlockResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponUnlockResp::CopyFrom(const WeaponUnlockResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponUnlockResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void WeaponUnlockResp::Swap(WeaponUnlockResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponUnlockResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponUnlockResp_descriptor_;
  metadata.reflection = WeaponUnlockResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponCastReq::kIdFieldNumber;
#endif  // !_MSC_VER

WeaponCastReq::WeaponCastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoWeapon.WeaponCastReq)
}

void WeaponCastReq::InitAsDefaultInstance() {
}

WeaponCastReq::WeaponCastReq(const WeaponCastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoWeapon.WeaponCastReq)
}

void WeaponCastReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponCastReq::~WeaponCastReq() {
  // @@protoc_insertion_point(destructor:ProtoWeapon.WeaponCastReq)
  SharedDtor();
}

void WeaponCastReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponCastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponCastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponCastReq_descriptor_;
}

const WeaponCastReq& WeaponCastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoWeapon_2eproto();
  return *default_instance_;
}

WeaponCastReq* WeaponCastReq::default_instance_ = NULL;

WeaponCastReq* WeaponCastReq::New() const {
  return new WeaponCastReq;
}

void WeaponCastReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponCastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoWeapon.WeaponCastReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoWeapon.WeaponCastReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoWeapon.WeaponCastReq)
  return false;
#undef DO_
}

void WeaponCastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoWeapon.WeaponCastReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoWeapon.WeaponCastReq)
}

::google::protobuf::uint8* WeaponCastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoWeapon.WeaponCastReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoWeapon.WeaponCastReq)
  return target;
}

int WeaponCastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponCastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponCastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponCastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponCastReq::MergeFrom(const WeaponCastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponCastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponCastReq::CopyFrom(const WeaponCastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponCastReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WeaponCastReq::Swap(WeaponCastReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponCastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponCastReq_descriptor_;
  metadata.reflection = WeaponCastReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponCastResp::kItemFieldNumber;
const int WeaponCastResp::kMultipleFieldNumber;
const int WeaponCastResp::kResourceFieldNumber;
#endif  // !_MSC_VER

WeaponCastResp::WeaponCastResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoWeapon.WeaponCastResp)
}

void WeaponCastResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoWeapon::WeaponInfoCPP*>(&::ProtoWeapon::WeaponInfoCPP::default_instance());
  resource_ = const_cast< ::DataCommon::UserResourceCPP*>(&::DataCommon::UserResourceCPP::default_instance());
}

WeaponCastResp::WeaponCastResp(const WeaponCastResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoWeapon.WeaponCastResp)
}

void WeaponCastResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  multiple_ = 0u;
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponCastResp::~WeaponCastResp() {
  // @@protoc_insertion_point(destructor:ProtoWeapon.WeaponCastResp)
  SharedDtor();
}

void WeaponCastResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete resource_;
  }
}

void WeaponCastResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponCastResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponCastResp_descriptor_;
}

const WeaponCastResp& WeaponCastResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoWeapon_2eproto();
  return *default_instance_;
}

WeaponCastResp* WeaponCastResp::default_instance_ = NULL;

WeaponCastResp* WeaponCastResp::New() const {
  return new WeaponCastResp;
}

void WeaponCastResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoWeapon::WeaponInfoCPP::Clear();
    }
    multiple_ = 0u;
    if (has_resource()) {
      if (resource_ != NULL) resource_->::DataCommon::UserResourceCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponCastResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoWeapon.WeaponCastResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoWeapon.WeaponInfoCPP item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_multiple;
        break;
      }

      // required uint32 multiple = 2;
      case 2: {
        if (tag == 16) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // required .DataCommon.UserResourceCPP resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoWeapon.WeaponCastResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoWeapon.WeaponCastResp)
  return false;
#undef DO_
}

void WeaponCastResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoWeapon.WeaponCastResp)
  // required .ProtoWeapon.WeaponInfoCPP item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required uint32 multiple = 2;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->multiple(), output);
  }

  // required .DataCommon.UserResourceCPP resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoWeapon.WeaponCastResp)
}

::google::protobuf::uint8* WeaponCastResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoWeapon.WeaponCastResp)
  // required .ProtoWeapon.WeaponInfoCPP item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required uint32 multiple = 2;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->multiple(), target);
  }

  // required .DataCommon.UserResourceCPP resource = 3;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoWeapon.WeaponCastResp)
  return target;
}

int WeaponCastResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoWeapon.WeaponInfoCPP item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required uint32 multiple = 2;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // required .DataCommon.UserResourceCPP resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponCastResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponCastResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponCastResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponCastResp::MergeFrom(const WeaponCastResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoWeapon::WeaponInfoCPP::MergeFrom(from.item());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_resource()) {
      mutable_resource()->::DataCommon::UserResourceCPP::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponCastResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponCastResp::CopyFrom(const WeaponCastResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponCastResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void WeaponCastResp::Swap(WeaponCastResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(multiple_, other->multiple_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponCastResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponCastResp_descriptor_;
  metadata.reflection = WeaponCastResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoWeapon

// @@protoc_insertion_point(global_scope)
