// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAttackHarbor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoAttackHarbor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoAttackHarbor {

namespace {

const ::google::protobuf::Descriptor* CountryRankCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryRankCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryRankCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryRankCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAttackWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAttackWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAttackWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAttackWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecieveCountryRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecieveCountryRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecieveCountryRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecieveCountryRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoAttackHarbor_2eproto() {
  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoAttackHarbor.proto");
  GOOGLE_CHECK(file != NULL);
  CountryRankCPP_descriptor_ = file->message_type(0);
  static const int CountryRankCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, wreckage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, trump_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, trump_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, trump_wreckage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, rank_),
  };
  CountryRankCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryRankCPP_descriptor_,
      CountryRankCPP::default_instance_,
      CountryRankCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryRankCPP));
  CountryRankCPPAll_descriptor_ = file->message_type(1);
  static const int CountryRankCPPAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPPAll, countryrank_),
  };
  CountryRankCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryRankCPPAll_descriptor_,
      CountryRankCPPAll::default_instance_,
      CountryRankCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryRankCPPAll));
  OpenAttackWindowReq_descriptor_ = file->message_type(2);
  static const int OpenAttackWindowReq_offsets_[1] = {
  };
  OpenAttackWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAttackWindowReq_descriptor_,
      OpenAttackWindowReq::default_instance_,
      OpenAttackWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAttackWindowReq));
  OpenAttackWindowResp_descriptor_ = file->message_type(3);
  static const int OpenAttackWindowResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowResp, countryranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowResp, reward_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowResp, wreckage_),
  };
  OpenAttackWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAttackWindowResp_descriptor_,
      OpenAttackWindowResp::default_instance_,
      OpenAttackWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAttackWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAttackWindowResp));
  RecieveCountryRewardReq_descriptor_ = file->message_type(4);
  static const int RecieveCountryRewardReq_offsets_[1] = {
  };
  RecieveCountryRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecieveCountryRewardReq_descriptor_,
      RecieveCountryRewardReq::default_instance_,
      RecieveCountryRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCountryRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCountryRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecieveCountryRewardReq));
  RecieveCountryRewardResp_descriptor_ = file->message_type(5);
  static const int RecieveCountryRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCountryRewardResp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCountryRewardResp, reward_status_),
  };
  RecieveCountryRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecieveCountryRewardResp_descriptor_,
      RecieveCountryRewardResp::default_instance_,
      RecieveCountryRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCountryRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCountryRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecieveCountryRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoAttackHarbor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryRankCPP_descriptor_, &CountryRankCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryRankCPPAll_descriptor_, &CountryRankCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAttackWindowReq_descriptor_, &OpenAttackWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAttackWindowResp_descriptor_, &OpenAttackWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecieveCountryRewardReq_descriptor_, &RecieveCountryRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecieveCountryRewardResp_descriptor_, &RecieveCountryRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto() {
  delete CountryRankCPP::default_instance_;
  delete CountryRankCPP_reflection_;
  delete CountryRankCPPAll::default_instance_;
  delete CountryRankCPPAll_reflection_;
  delete OpenAttackWindowReq::default_instance_;
  delete OpenAttackWindowReq_reflection_;
  delete OpenAttackWindowResp::default_instance_;
  delete OpenAttackWindowResp_reflection_;
  delete RecieveCountryRewardReq::default_instance_;
  delete RecieveCountryRewardReq_reflection_;
  delete RecieveCountryRewardResp::default_instance_;
  delete RecieveCountryRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoAttackHarbor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ProtoAttackHarbor.proto\022\021ProtoAttackHa"
    "rbor\032\nUser.proto\"\200\001\n\016CountryRankCPP\022\017\n\007k"
    "ingdom\030\001 \002(\r\022\020\n\010wreckage\030\002 \002(\r\022\021\n\ttrump_"
    "uid\030\003 \002(\r\022\022\n\ntrump_name\030\004 \002(\014\022\026\n\016trump_w"
    "reckage\030\005 \002(\r\022\014\n\004rank\030\006 \002(\r\"K\n\021CountryRa"
    "nkCPPAll\0226\n\013countryrank\030\001 \003(\0132!.ProtoAtt"
    "ackHarbor.CountryRankCPP\"\025\n\023OpenAttackWi"
    "ndowReq\"{\n\024OpenAttackWindowResp\022:\n\014count"
    "ryranks\030\001 \002(\0132$.ProtoAttackHarbor.Countr"
    "yRankCPPAll\022\025\n\rreward_status\030\002 \002(\r\022\020\n\010wr"
    "eckage\030\003 \002(\r\"\031\n\027RecieveCountryRewardReq\""
    "V\n\030RecieveCountryRewardResp\022#\n\006reward\030\001 "
    "\002(\0132\023.User.RewardBagInfo\022\025\n\rreward_statu"
    "s\030\002 \002(\r", 527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoAttackHarbor.proto", &protobuf_RegisterTypes);
  CountryRankCPP::default_instance_ = new CountryRankCPP();
  CountryRankCPPAll::default_instance_ = new CountryRankCPPAll();
  OpenAttackWindowReq::default_instance_ = new OpenAttackWindowReq();
  OpenAttackWindowResp::default_instance_ = new OpenAttackWindowResp();
  RecieveCountryRewardReq::default_instance_ = new RecieveCountryRewardReq();
  RecieveCountryRewardResp::default_instance_ = new RecieveCountryRewardResp();
  CountryRankCPP::default_instance_->InitAsDefaultInstance();
  CountryRankCPPAll::default_instance_->InitAsDefaultInstance();
  OpenAttackWindowReq::default_instance_->InitAsDefaultInstance();
  OpenAttackWindowResp::default_instance_->InitAsDefaultInstance();
  RecieveCountryRewardReq::default_instance_->InitAsDefaultInstance();
  RecieveCountryRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoAttackHarbor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoAttackHarbor_2eproto {
  StaticDescriptorInitializer_ProtoAttackHarbor_2eproto() {
    protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  }
} static_descriptor_initializer_ProtoAttackHarbor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CountryRankCPP::kKingdomFieldNumber;
const int CountryRankCPP::kWreckageFieldNumber;
const int CountryRankCPP::kTrumpUidFieldNumber;
const int CountryRankCPP::kTrumpNameFieldNumber;
const int CountryRankCPP::kTrumpWreckageFieldNumber;
const int CountryRankCPP::kRankFieldNumber;
#endif  // !_MSC_VER

CountryRankCPP::CountryRankCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAttackHarbor.CountryRankCPP)
}

void CountryRankCPP::InitAsDefaultInstance() {
}

CountryRankCPP::CountryRankCPP(const CountryRankCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAttackHarbor.CountryRankCPP)
}

void CountryRankCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kingdom_ = 0u;
  wreckage_ = 0u;
  trump_uid_ = 0u;
  trump_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trump_wreckage_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryRankCPP::~CountryRankCPP() {
  // @@protoc_insertion_point(destructor:ProtoAttackHarbor.CountryRankCPP)
  SharedDtor();
}

void CountryRankCPP::SharedDtor() {
  if (trump_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trump_name_;
  }
  if (this != default_instance_) {
  }
}

void CountryRankCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryRankCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryRankCPP_descriptor_;
}

const CountryRankCPP& CountryRankCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  return *default_instance_;
}

CountryRankCPP* CountryRankCPP::default_instance_ = NULL;

CountryRankCPP* CountryRankCPP::New() const {
  return new CountryRankCPP;
}

void CountryRankCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CountryRankCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(kingdom_, wreckage_);
    ZR_(trump_uid_, rank_);
    if (has_trump_name()) {
      if (trump_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trump_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryRankCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAttackHarbor.CountryRankCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kingdom = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wreckage;
        break;
      }

      // required uint32 wreckage = 2;
      case 2: {
        if (tag == 16) {
         parse_wreckage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreckage_)));
          set_has_wreckage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trump_uid;
        break;
      }

      // required uint32 trump_uid = 3;
      case 3: {
        if (tag == 24) {
         parse_trump_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trump_uid_)));
          set_has_trump_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trump_name;
        break;
      }

      // required bytes trump_name = 4;
      case 4: {
        if (tag == 34) {
         parse_trump_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trump_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trump_wreckage;
        break;
      }

      // required uint32 trump_wreckage = 5;
      case 5: {
        if (tag == 40) {
         parse_trump_wreckage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trump_wreckage_)));
          set_has_trump_wreckage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // required uint32 rank = 6;
      case 6: {
        if (tag == 48) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAttackHarbor.CountryRankCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAttackHarbor.CountryRankCPP)
  return false;
#undef DO_
}

void CountryRankCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAttackHarbor.CountryRankCPP)
  // required uint32 kingdom = 1;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kingdom(), output);
  }

  // required uint32 wreckage = 2;
  if (has_wreckage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wreckage(), output);
  }

  // required uint32 trump_uid = 3;
  if (has_trump_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trump_uid(), output);
  }

  // required bytes trump_name = 4;
  if (has_trump_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->trump_name(), output);
  }

  // required uint32 trump_wreckage = 5;
  if (has_trump_wreckage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trump_wreckage(), output);
  }

  // required uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAttackHarbor.CountryRankCPP)
}

::google::protobuf::uint8* CountryRankCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAttackHarbor.CountryRankCPP)
  // required uint32 kingdom = 1;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kingdom(), target);
  }

  // required uint32 wreckage = 2;
  if (has_wreckage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wreckage(), target);
  }

  // required uint32 trump_uid = 3;
  if (has_trump_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trump_uid(), target);
  }

  // required bytes trump_name = 4;
  if (has_trump_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->trump_name(), target);
  }

  // required uint32 trump_wreckage = 5;
  if (has_trump_wreckage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trump_wreckage(), target);
  }

  // required uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAttackHarbor.CountryRankCPP)
  return target;
}

int CountryRankCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kingdom = 1;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

    // required uint32 wreckage = 2;
    if (has_wreckage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreckage());
    }

    // required uint32 trump_uid = 3;
    if (has_trump_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trump_uid());
    }

    // required bytes trump_name = 4;
    if (has_trump_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trump_name());
    }

    // required uint32 trump_wreckage = 5;
    if (has_trump_wreckage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trump_wreckage());
    }

    // required uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryRankCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryRankCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryRankCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryRankCPP::MergeFrom(const CountryRankCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
    if (from.has_wreckage()) {
      set_wreckage(from.wreckage());
    }
    if (from.has_trump_uid()) {
      set_trump_uid(from.trump_uid());
    }
    if (from.has_trump_name()) {
      set_trump_name(from.trump_name());
    }
    if (from.has_trump_wreckage()) {
      set_trump_wreckage(from.trump_wreckage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryRankCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryRankCPP::CopyFrom(const CountryRankCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryRankCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CountryRankCPP::Swap(CountryRankCPP* other) {
  if (other != this) {
    std::swap(kingdom_, other->kingdom_);
    std::swap(wreckage_, other->wreckage_);
    std::swap(trump_uid_, other->trump_uid_);
    std::swap(trump_name_, other->trump_name_);
    std::swap(trump_wreckage_, other->trump_wreckage_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryRankCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryRankCPP_descriptor_;
  metadata.reflection = CountryRankCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryRankCPPAll::kCountryrankFieldNumber;
#endif  // !_MSC_VER

CountryRankCPPAll::CountryRankCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAttackHarbor.CountryRankCPPAll)
}

void CountryRankCPPAll::InitAsDefaultInstance() {
}

CountryRankCPPAll::CountryRankCPPAll(const CountryRankCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAttackHarbor.CountryRankCPPAll)
}

void CountryRankCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryRankCPPAll::~CountryRankCPPAll() {
  // @@protoc_insertion_point(destructor:ProtoAttackHarbor.CountryRankCPPAll)
  SharedDtor();
}

void CountryRankCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryRankCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryRankCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryRankCPPAll_descriptor_;
}

const CountryRankCPPAll& CountryRankCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  return *default_instance_;
}

CountryRankCPPAll* CountryRankCPPAll::default_instance_ = NULL;

CountryRankCPPAll* CountryRankCPPAll::New() const {
  return new CountryRankCPPAll;
}

void CountryRankCPPAll::Clear() {
  countryrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryRankCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAttackHarbor.CountryRankCPPAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAttackHarbor.CountryRankCPP countryrank = 1;
      case 1: {
        if (tag == 10) {
         parse_countryrank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_countryrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_countryrank;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAttackHarbor.CountryRankCPPAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAttackHarbor.CountryRankCPPAll)
  return false;
#undef DO_
}

void CountryRankCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAttackHarbor.CountryRankCPPAll)
  // repeated .ProtoAttackHarbor.CountryRankCPP countryrank = 1;
  for (int i = 0; i < this->countryrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->countryrank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAttackHarbor.CountryRankCPPAll)
}

::google::protobuf::uint8* CountryRankCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAttackHarbor.CountryRankCPPAll)
  // repeated .ProtoAttackHarbor.CountryRankCPP countryrank = 1;
  for (int i = 0; i < this->countryrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countryrank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAttackHarbor.CountryRankCPPAll)
  return target;
}

int CountryRankCPPAll::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAttackHarbor.CountryRankCPP countryrank = 1;
  total_size += 1 * this->countryrank_size();
  for (int i = 0; i < this->countryrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->countryrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryRankCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryRankCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryRankCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryRankCPPAll::MergeFrom(const CountryRankCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  countryrank_.MergeFrom(from.countryrank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryRankCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryRankCPPAll::CopyFrom(const CountryRankCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryRankCPPAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->countryrank())) return false;
  return true;
}

void CountryRankCPPAll::Swap(CountryRankCPPAll* other) {
  if (other != this) {
    countryrank_.Swap(&other->countryrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryRankCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryRankCPPAll_descriptor_;
  metadata.reflection = CountryRankCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenAttackWindowReq::OpenAttackWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAttackHarbor.OpenAttackWindowReq)
}

void OpenAttackWindowReq::InitAsDefaultInstance() {
}

OpenAttackWindowReq::OpenAttackWindowReq(const OpenAttackWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAttackHarbor.OpenAttackWindowReq)
}

void OpenAttackWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAttackWindowReq::~OpenAttackWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoAttackHarbor.OpenAttackWindowReq)
  SharedDtor();
}

void OpenAttackWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenAttackWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAttackWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAttackWindowReq_descriptor_;
}

const OpenAttackWindowReq& OpenAttackWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  return *default_instance_;
}

OpenAttackWindowReq* OpenAttackWindowReq::default_instance_ = NULL;

OpenAttackWindowReq* OpenAttackWindowReq::New() const {
  return new OpenAttackWindowReq;
}

void OpenAttackWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAttackWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAttackHarbor.OpenAttackWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAttackHarbor.OpenAttackWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAttackHarbor.OpenAttackWindowReq)
  return false;
#undef DO_
}

void OpenAttackWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAttackHarbor.OpenAttackWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAttackHarbor.OpenAttackWindowReq)
}

::google::protobuf::uint8* OpenAttackWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAttackHarbor.OpenAttackWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAttackHarbor.OpenAttackWindowReq)
  return target;
}

int OpenAttackWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAttackWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAttackWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAttackWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAttackWindowReq::MergeFrom(const OpenAttackWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAttackWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAttackWindowReq::CopyFrom(const OpenAttackWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAttackWindowReq::IsInitialized() const {

  return true;
}

void OpenAttackWindowReq::Swap(OpenAttackWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAttackWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAttackWindowReq_descriptor_;
  metadata.reflection = OpenAttackWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAttackWindowResp::kCountryranksFieldNumber;
const int OpenAttackWindowResp::kRewardStatusFieldNumber;
const int OpenAttackWindowResp::kWreckageFieldNumber;
#endif  // !_MSC_VER

OpenAttackWindowResp::OpenAttackWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAttackHarbor.OpenAttackWindowResp)
}

void OpenAttackWindowResp::InitAsDefaultInstance() {
  countryranks_ = const_cast< ::ProtoAttackHarbor::CountryRankCPPAll*>(&::ProtoAttackHarbor::CountryRankCPPAll::default_instance());
}

OpenAttackWindowResp::OpenAttackWindowResp(const OpenAttackWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAttackHarbor.OpenAttackWindowResp)
}

void OpenAttackWindowResp::SharedCtor() {
  _cached_size_ = 0;
  countryranks_ = NULL;
  reward_status_ = 0u;
  wreckage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAttackWindowResp::~OpenAttackWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoAttackHarbor.OpenAttackWindowResp)
  SharedDtor();
}

void OpenAttackWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete countryranks_;
  }
}

void OpenAttackWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAttackWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAttackWindowResp_descriptor_;
}

const OpenAttackWindowResp& OpenAttackWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  return *default_instance_;
}

OpenAttackWindowResp* OpenAttackWindowResp::default_instance_ = NULL;

OpenAttackWindowResp* OpenAttackWindowResp::New() const {
  return new OpenAttackWindowResp;
}

void OpenAttackWindowResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenAttackWindowResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(reward_status_, wreckage_);
    if (has_countryranks()) {
      if (countryranks_ != NULL) countryranks_->::ProtoAttackHarbor::CountryRankCPPAll::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAttackWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAttackHarbor.OpenAttackWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAttackHarbor.CountryRankCPPAll countryranks = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_countryranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_status;
        break;
      }

      // required uint32 reward_status = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_status_)));
          set_has_reward_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wreckage;
        break;
      }

      // required uint32 wreckage = 3;
      case 3: {
        if (tag == 24) {
         parse_wreckage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreckage_)));
          set_has_wreckage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAttackHarbor.OpenAttackWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAttackHarbor.OpenAttackWindowResp)
  return false;
#undef DO_
}

void OpenAttackWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAttackHarbor.OpenAttackWindowResp)
  // required .ProtoAttackHarbor.CountryRankCPPAll countryranks = 1;
  if (has_countryranks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->countryranks(), output);
  }

  // required uint32 reward_status = 2;
  if (has_reward_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_status(), output);
  }

  // required uint32 wreckage = 3;
  if (has_wreckage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wreckage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAttackHarbor.OpenAttackWindowResp)
}

::google::protobuf::uint8* OpenAttackWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAttackHarbor.OpenAttackWindowResp)
  // required .ProtoAttackHarbor.CountryRankCPPAll countryranks = 1;
  if (has_countryranks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countryranks(), target);
  }

  // required uint32 reward_status = 2;
  if (has_reward_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_status(), target);
  }

  // required uint32 wreckage = 3;
  if (has_wreckage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wreckage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAttackHarbor.OpenAttackWindowResp)
  return target;
}

int OpenAttackWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAttackHarbor.CountryRankCPPAll countryranks = 1;
    if (has_countryranks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->countryranks());
    }

    // required uint32 reward_status = 2;
    if (has_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_status());
    }

    // required uint32 wreckage = 3;
    if (has_wreckage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreckage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAttackWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAttackWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAttackWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAttackWindowResp::MergeFrom(const OpenAttackWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryranks()) {
      mutable_countryranks()->::ProtoAttackHarbor::CountryRankCPPAll::MergeFrom(from.countryranks());
    }
    if (from.has_reward_status()) {
      set_reward_status(from.reward_status());
    }
    if (from.has_wreckage()) {
      set_wreckage(from.wreckage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAttackWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAttackWindowResp::CopyFrom(const OpenAttackWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAttackWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_countryranks()) {
    if (!this->countryranks().IsInitialized()) return false;
  }
  return true;
}

void OpenAttackWindowResp::Swap(OpenAttackWindowResp* other) {
  if (other != this) {
    std::swap(countryranks_, other->countryranks_);
    std::swap(reward_status_, other->reward_status_);
    std::swap(wreckage_, other->wreckage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAttackWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAttackWindowResp_descriptor_;
  metadata.reflection = OpenAttackWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecieveCountryRewardReq::RecieveCountryRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAttackHarbor.RecieveCountryRewardReq)
}

void RecieveCountryRewardReq::InitAsDefaultInstance() {
}

RecieveCountryRewardReq::RecieveCountryRewardReq(const RecieveCountryRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAttackHarbor.RecieveCountryRewardReq)
}

void RecieveCountryRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecieveCountryRewardReq::~RecieveCountryRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoAttackHarbor.RecieveCountryRewardReq)
  SharedDtor();
}

void RecieveCountryRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecieveCountryRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecieveCountryRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecieveCountryRewardReq_descriptor_;
}

const RecieveCountryRewardReq& RecieveCountryRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  return *default_instance_;
}

RecieveCountryRewardReq* RecieveCountryRewardReq::default_instance_ = NULL;

RecieveCountryRewardReq* RecieveCountryRewardReq::New() const {
  return new RecieveCountryRewardReq;
}

void RecieveCountryRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecieveCountryRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAttackHarbor.RecieveCountryRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAttackHarbor.RecieveCountryRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAttackHarbor.RecieveCountryRewardReq)
  return false;
#undef DO_
}

void RecieveCountryRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAttackHarbor.RecieveCountryRewardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAttackHarbor.RecieveCountryRewardReq)
}

::google::protobuf::uint8* RecieveCountryRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAttackHarbor.RecieveCountryRewardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAttackHarbor.RecieveCountryRewardReq)
  return target;
}

int RecieveCountryRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecieveCountryRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecieveCountryRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecieveCountryRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecieveCountryRewardReq::MergeFrom(const RecieveCountryRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecieveCountryRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecieveCountryRewardReq::CopyFrom(const RecieveCountryRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecieveCountryRewardReq::IsInitialized() const {

  return true;
}

void RecieveCountryRewardReq::Swap(RecieveCountryRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecieveCountryRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecieveCountryRewardReq_descriptor_;
  metadata.reflection = RecieveCountryRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecieveCountryRewardResp::kRewardFieldNumber;
const int RecieveCountryRewardResp::kRewardStatusFieldNumber;
#endif  // !_MSC_VER

RecieveCountryRewardResp::RecieveCountryRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAttackHarbor.RecieveCountryRewardResp)
}

void RecieveCountryRewardResp::InitAsDefaultInstance() {
  reward_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
}

RecieveCountryRewardResp::RecieveCountryRewardResp(const RecieveCountryRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAttackHarbor.RecieveCountryRewardResp)
}

void RecieveCountryRewardResp::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  reward_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecieveCountryRewardResp::~RecieveCountryRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoAttackHarbor.RecieveCountryRewardResp)
  SharedDtor();
}

void RecieveCountryRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void RecieveCountryRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecieveCountryRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecieveCountryRewardResp_descriptor_;
}

const RecieveCountryRewardResp& RecieveCountryRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  return *default_instance_;
}

RecieveCountryRewardResp* RecieveCountryRewardResp::default_instance_ = NULL;

RecieveCountryRewardResp* RecieveCountryRewardResp::New() const {
  return new RecieveCountryRewardResp;
}

void RecieveCountryRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
    }
    reward_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecieveCountryRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAttackHarbor.RecieveCountryRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.RewardBagInfo reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_status;
        break;
      }

      // required uint32 reward_status = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_status_)));
          set_has_reward_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAttackHarbor.RecieveCountryRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAttackHarbor.RecieveCountryRewardResp)
  return false;
#undef DO_
}

void RecieveCountryRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAttackHarbor.RecieveCountryRewardResp)
  // required .User.RewardBagInfo reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  // required uint32 reward_status = 2;
  if (has_reward_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAttackHarbor.RecieveCountryRewardResp)
}

::google::protobuf::uint8* RecieveCountryRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAttackHarbor.RecieveCountryRewardResp)
  // required .User.RewardBagInfo reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  // required uint32 reward_status = 2;
  if (has_reward_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAttackHarbor.RecieveCountryRewardResp)
  return target;
}

int RecieveCountryRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.RewardBagInfo reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required uint32 reward_status = 2;
    if (has_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecieveCountryRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecieveCountryRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecieveCountryRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecieveCountryRewardResp::MergeFrom(const RecieveCountryRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::User::RewardBagInfo::MergeFrom(from.reward());
    }
    if (from.has_reward_status()) {
      set_reward_status(from.reward_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecieveCountryRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecieveCountryRewardResp::CopyFrom(const RecieveCountryRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecieveCountryRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void RecieveCountryRewardResp::Swap(RecieveCountryRewardResp* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(reward_status_, other->reward_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecieveCountryRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecieveCountryRewardResp_descriptor_;
  metadata.reflection = RecieveCountryRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAttackHarbor

// @@protoc_insertion_point(global_scope)
