// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoOperaBattle.proto

#ifndef PROTOBUF_ProtoOperaBattle_2eproto__INCLUDED
#define PROTOBUF_ProtoOperaBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoOperaBattle {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

class OperaBattleCPP;
class OperaBattleCPPAll;
class MemoryRecordCPP;
class MemoryBattleRecordCPP;
class MemoryOperaBattleRecordCPPAll;
class OpenOperaBattleWindowReq;
class OpenOperaBattleWindowResp;
class StartOperaBattleReq;
class StartOperaBattleResp;
class EndOperaBattleReq;
class EndOperaBattleResp;
class ReceiveStarRewardReq;
class ReceiveStarRewardResp;

// ===================================================================

class OperaBattleCPP : public ::google::protobuf::Message {
 public:
  OperaBattleCPP();
  virtual ~OperaBattleCPP();

  OperaBattleCPP(const OperaBattleCPP& from);

  inline OperaBattleCPP& operator=(const OperaBattleCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperaBattleCPP& default_instance();

  void Swap(OperaBattleCPP* other);

  // implements Message ----------------------------------------------

  OperaBattleCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperaBattleCPP& from);
  void MergeFrom(const OperaBattleCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 difficulty = 2;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // required uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.OperaBattleCPP)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 star_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static OperaBattleCPP* default_instance_;
};
// -------------------------------------------------------------------

class OperaBattleCPPAll : public ::google::protobuf::Message {
 public:
  OperaBattleCPPAll();
  virtual ~OperaBattleCPPAll();

  OperaBattleCPPAll(const OperaBattleCPPAll& from);

  inline OperaBattleCPPAll& operator=(const OperaBattleCPPAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperaBattleCPPAll& default_instance();

  void Swap(OperaBattleCPPAll* other);

  // implements Message ----------------------------------------------

  OperaBattleCPPAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperaBattleCPPAll& from);
  void MergeFrom(const OperaBattleCPPAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoOperaBattle.OperaBattleCPP operabattles = 1;
  inline int operabattles_size() const;
  inline void clear_operabattles();
  static const int kOperabattlesFieldNumber = 1;
  inline const ::ProtoOperaBattle::OperaBattleCPP& operabattles(int index) const;
  inline ::ProtoOperaBattle::OperaBattleCPP* mutable_operabattles(int index);
  inline ::ProtoOperaBattle::OperaBattleCPP* add_operabattles();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::OperaBattleCPP >&
      operabattles() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::OperaBattleCPP >*
      mutable_operabattles();

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.OperaBattleCPPAll)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::OperaBattleCPP > operabattles_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static OperaBattleCPPAll* default_instance_;
};
// -------------------------------------------------------------------

class MemoryRecordCPP : public ::google::protobuf::Message {
 public:
  MemoryRecordCPP();
  virtual ~MemoryRecordCPP();

  MemoryRecordCPP(const MemoryRecordCPP& from);

  inline MemoryRecordCPP& operator=(const MemoryRecordCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryRecordCPP& default_instance();

  void Swap(MemoryRecordCPP* other);

  // implements Message ----------------------------------------------

  MemoryRecordCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryRecordCPP& from);
  void MergeFrom(const MemoryRecordCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 kingdom = 1;
  inline bool has_kingdom() const;
  inline void clear_kingdom();
  static const int kKingdomFieldNumber = 1;
  inline ::google::protobuf::uint32 kingdom() const;
  inline void set_kingdom(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 left_time() const;
  inline void set_left_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.MemoryRecordCPP)
 private:
  inline void set_has_kingdom();
  inline void clear_has_kingdom();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 kingdom_;
  ::google::protobuf::uint32 left_time_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static MemoryRecordCPP* default_instance_;
};
// -------------------------------------------------------------------

class MemoryBattleRecordCPP : public ::google::protobuf::Message {
 public:
  MemoryBattleRecordCPP();
  virtual ~MemoryBattleRecordCPP();

  MemoryBattleRecordCPP(const MemoryBattleRecordCPP& from);

  inline MemoryBattleRecordCPP& operator=(const MemoryBattleRecordCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryBattleRecordCPP& default_instance();

  void Swap(MemoryBattleRecordCPP* other);

  // implements Message ----------------------------------------------

  MemoryBattleRecordCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryBattleRecordCPP& from);
  void MergeFrom(const MemoryBattleRecordCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // repeated .ProtoOperaBattle.MemoryRecordCPP diff_record = 2;
  inline int diff_record_size() const;
  inline void clear_diff_record();
  static const int kDiffRecordFieldNumber = 2;
  inline const ::ProtoOperaBattle::MemoryRecordCPP& diff_record(int index) const;
  inline ::ProtoOperaBattle::MemoryRecordCPP* mutable_diff_record(int index);
  inline ::ProtoOperaBattle::MemoryRecordCPP* add_diff_record();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryRecordCPP >&
      diff_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryRecordCPP >*
      mutable_diff_record();

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.MemoryBattleRecordCPP)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryRecordCPP > diff_record_;
  ::google::protobuf::uint32 gateid_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static MemoryBattleRecordCPP* default_instance_;
};
// -------------------------------------------------------------------

class MemoryOperaBattleRecordCPPAll : public ::google::protobuf::Message {
 public:
  MemoryOperaBattleRecordCPPAll();
  virtual ~MemoryOperaBattleRecordCPPAll();

  MemoryOperaBattleRecordCPPAll(const MemoryOperaBattleRecordCPPAll& from);

  inline MemoryOperaBattleRecordCPPAll& operator=(const MemoryOperaBattleRecordCPPAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryOperaBattleRecordCPPAll& default_instance();

  void Swap(MemoryOperaBattleRecordCPPAll* other);

  // implements Message ----------------------------------------------

  MemoryOperaBattleRecordCPPAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryOperaBattleRecordCPPAll& from);
  void MergeFrom(const MemoryOperaBattleRecordCPPAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoOperaBattle.MemoryBattleRecordCPP battle_record = 1;
  inline int battle_record_size() const;
  inline void clear_battle_record();
  static const int kBattleRecordFieldNumber = 1;
  inline const ::ProtoOperaBattle::MemoryBattleRecordCPP& battle_record(int index) const;
  inline ::ProtoOperaBattle::MemoryBattleRecordCPP* mutable_battle_record(int index);
  inline ::ProtoOperaBattle::MemoryBattleRecordCPP* add_battle_record();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryBattleRecordCPP >&
      battle_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryBattleRecordCPP >*
      mutable_battle_record();

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryBattleRecordCPP > battle_record_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static MemoryOperaBattleRecordCPPAll* default_instance_;
};
// -------------------------------------------------------------------

class OpenOperaBattleWindowReq : public ::google::protobuf::Message {
 public:
  OpenOperaBattleWindowReq();
  virtual ~OpenOperaBattleWindowReq();

  OpenOperaBattleWindowReq(const OpenOperaBattleWindowReq& from);

  inline OpenOperaBattleWindowReq& operator=(const OpenOperaBattleWindowReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenOperaBattleWindowReq& default_instance();

  void Swap(OpenOperaBattleWindowReq* other);

  // implements Message ----------------------------------------------

  OpenOperaBattleWindowReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenOperaBattleWindowReq& from);
  void MergeFrom(const OpenOperaBattleWindowReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.OpenOperaBattleWindowReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static OpenOperaBattleWindowReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenOperaBattleWindowResp : public ::google::protobuf::Message {
 public:
  OpenOperaBattleWindowResp();
  virtual ~OpenOperaBattleWindowResp();

  OpenOperaBattleWindowResp(const OpenOperaBattleWindowResp& from);

  inline OpenOperaBattleWindowResp& operator=(const OpenOperaBattleWindowResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenOperaBattleWindowResp& default_instance();

  void Swap(OpenOperaBattleWindowResp* other);

  // implements Message ----------------------------------------------

  OpenOperaBattleWindowResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenOperaBattleWindowResp& from);
  void MergeFrom(const OpenOperaBattleWindowResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoOperaBattle.OperaBattleCPPAll operabattles = 1;
  inline bool has_operabattles() const;
  inline void clear_operabattles();
  static const int kOperabattlesFieldNumber = 1;
  inline const ::ProtoOperaBattle::OperaBattleCPPAll& operabattles() const;
  inline ::ProtoOperaBattle::OperaBattleCPPAll* mutable_operabattles();
  inline ::ProtoOperaBattle::OperaBattleCPPAll* release_operabattles();
  inline void set_allocated_operabattles(::ProtoOperaBattle::OperaBattleCPPAll* operabattles);

  // required .ProtoOperaBattle.MemoryOperaBattleRecordCPPAll records = 2;
  inline bool has_records() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 2;
  inline const ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll& records() const;
  inline ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* mutable_records();
  inline ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* release_records();
  inline void set_allocated_records(::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* records);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.OpenOperaBattleWindowResp)
 private:
  inline void set_has_operabattles();
  inline void clear_has_operabattles();
  inline void set_has_records();
  inline void clear_has_records();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoOperaBattle::OperaBattleCPPAll* operabattles_;
  ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* records_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static OpenOperaBattleWindowResp* default_instance_;
};
// -------------------------------------------------------------------

class StartOperaBattleReq : public ::google::protobuf::Message {
 public:
  StartOperaBattleReq();
  virtual ~StartOperaBattleReq();

  StartOperaBattleReq(const StartOperaBattleReq& from);

  inline StartOperaBattleReq& operator=(const StartOperaBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartOperaBattleReq& default_instance();

  void Swap(StartOperaBattleReq* other);

  // implements Message ----------------------------------------------

  StartOperaBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartOperaBattleReq& from);
  void MergeFrom(const StartOperaBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 difficulty = 2;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.StartOperaBattleReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 difficulty_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static StartOperaBattleReq* default_instance_;
};
// -------------------------------------------------------------------

class StartOperaBattleResp : public ::google::protobuf::Message {
 public:
  StartOperaBattleResp();
  virtual ~StartOperaBattleResp();

  StartOperaBattleResp(const StartOperaBattleResp& from);

  inline StartOperaBattleResp& operator=(const StartOperaBattleResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartOperaBattleResp& default_instance();

  void Swap(StartOperaBattleResp* other);

  // implements Message ----------------------------------------------

  StartOperaBattleResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartOperaBattleResp& from);
  void MergeFrom(const StartOperaBattleResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 food = 1;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 1;
  inline ::google::protobuf::uint32 food() const;
  inline void set_food(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.StartOperaBattleResp)
 private:
  inline void set_has_food();
  inline void clear_has_food();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 food_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static StartOperaBattleResp* default_instance_;
};
// -------------------------------------------------------------------

class EndOperaBattleReq : public ::google::protobuf::Message {
 public:
  EndOperaBattleReq();
  virtual ~EndOperaBattleReq();

  EndOperaBattleReq(const EndOperaBattleReq& from);

  inline EndOperaBattleReq& operator=(const EndOperaBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndOperaBattleReq& default_instance();

  void Swap(EndOperaBattleReq* other);

  // implements Message ----------------------------------------------

  EndOperaBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndOperaBattleReq& from);
  void MergeFrom(const EndOperaBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 difficulty = 2;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // required uint32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 left_time() const;
  inline void set_left_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.EndOperaBattleReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 left_time_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static EndOperaBattleReq* default_instance_;
};
// -------------------------------------------------------------------

class EndOperaBattleResp : public ::google::protobuf::Message {
 public:
  EndOperaBattleResp();
  virtual ~EndOperaBattleResp();

  EndOperaBattleResp(const EndOperaBattleResp& from);

  inline EndOperaBattleResp& operator=(const EndOperaBattleResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndOperaBattleResp& default_instance();

  void Swap(EndOperaBattleResp* other);

  // implements Message ----------------------------------------------

  EndOperaBattleResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndOperaBattleResp& from);
  void MergeFrom(const EndOperaBattleResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoOperaBattle.MemoryRecordCPP record = 1;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::ProtoOperaBattle::MemoryRecordCPP& record() const;
  inline ::ProtoOperaBattle::MemoryRecordCPP* mutable_record();
  inline ::ProtoOperaBattle::MemoryRecordCPP* release_record();
  inline void set_allocated_record(::ProtoOperaBattle::MemoryRecordCPP* record);

  // optional uint32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // optional uint32 difficulty = 3;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.EndOperaBattleResp)
 private:
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoOperaBattle::MemoryRecordCPP* record_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 difficulty_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static EndOperaBattleResp* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveStarRewardReq : public ::google::protobuf::Message {
 public:
  ReceiveStarRewardReq();
  virtual ~ReceiveStarRewardReq();

  ReceiveStarRewardReq(const ReceiveStarRewardReq& from);

  inline ReceiveStarRewardReq& operator=(const ReceiveStarRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveStarRewardReq& default_instance();

  void Swap(ReceiveStarRewardReq* other);

  // implements Message ----------------------------------------------

  ReceiveStarRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveStarRewardReq& from);
  void MergeFrom(const ReceiveStarRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 difficulty = 2;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // required uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 battle_star = 4;
  inline bool has_battle_star() const;
  inline void clear_battle_star();
  static const int kBattleStarFieldNumber = 4;
  inline ::google::protobuf::uint32 battle_star() const;
  inline void set_battle_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.ReceiveStarRewardReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_battle_star();
  inline void clear_has_battle_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 battle_star_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static ReceiveStarRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveStarRewardResp : public ::google::protobuf::Message {
 public:
  ReceiveStarRewardResp();
  virtual ~ReceiveStarRewardResp();

  ReceiveStarRewardResp(const ReceiveStarRewardResp& from);

  inline ReceiveStarRewardResp& operator=(const ReceiveStarRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveStarRewardResp& default_instance();

  void Swap(ReceiveStarRewardResp* other);

  // implements Message ----------------------------------------------

  ReceiveStarRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveStarRewardResp& from);
  void MergeFrom(const ReceiveStarRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cash = 1;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 1;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // required .ProtoOperaBattle.OperaBattleCPP operabattle = 2;
  inline bool has_operabattle() const;
  inline void clear_operabattle();
  static const int kOperabattleFieldNumber = 2;
  inline const ::ProtoOperaBattle::OperaBattleCPP& operabattle() const;
  inline ::ProtoOperaBattle::OperaBattleCPP* mutable_operabattle();
  inline ::ProtoOperaBattle::OperaBattleCPP* release_operabattle();
  inline void set_allocated_operabattle(::ProtoOperaBattle::OperaBattleCPP* operabattle);

  // required .User.RewardBagInfo reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::User::RewardBagInfo& reward() const;
  inline ::User::RewardBagInfo* mutable_reward();
  inline ::User::RewardBagInfo* release_reward();
  inline void set_allocated_reward(::User::RewardBagInfo* reward);

  // @@protoc_insertion_point(class_scope:ProtoOperaBattle.ReceiveStarRewardResp)
 private:
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_operabattle();
  inline void clear_has_operabattle();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoOperaBattle::OperaBattleCPP* operabattle_;
  ::User::RewardBagInfo* reward_;
  ::google::protobuf::uint32 cash_;
  friend void  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_AssignDesc_ProtoOperaBattle_2eproto();
  friend void protobuf_ShutdownFile_ProtoOperaBattle_2eproto();

  void InitAsDefaultInstance();
  static ReceiveStarRewardResp* default_instance_;
};
// ===================================================================


// ===================================================================

// OperaBattleCPP

// required uint32 gateid = 1;
inline bool OperaBattleCPP::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperaBattleCPP::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperaBattleCPP::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperaBattleCPP::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 OperaBattleCPP::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.OperaBattleCPP.gateid)
  return gateid_;
}
inline void OperaBattleCPP::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.OperaBattleCPP.gateid)
}

// required uint32 difficulty = 2;
inline bool OperaBattleCPP::has_difficulty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperaBattleCPP::set_has_difficulty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperaBattleCPP::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperaBattleCPP::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 OperaBattleCPP::difficulty() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.OperaBattleCPP.difficulty)
  return difficulty_;
}
inline void OperaBattleCPP::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.OperaBattleCPP.difficulty)
}

// required uint32 star = 3;
inline bool OperaBattleCPP::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperaBattleCPP::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperaBattleCPP::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperaBattleCPP::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 OperaBattleCPP::star() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.OperaBattleCPP.star)
  return star_;
}
inline void OperaBattleCPP::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.OperaBattleCPP.star)
}

// -------------------------------------------------------------------

// OperaBattleCPPAll

// repeated .ProtoOperaBattle.OperaBattleCPP operabattles = 1;
inline int OperaBattleCPPAll::operabattles_size() const {
  return operabattles_.size();
}
inline void OperaBattleCPPAll::clear_operabattles() {
  operabattles_.Clear();
}
inline const ::ProtoOperaBattle::OperaBattleCPP& OperaBattleCPPAll::operabattles(int index) const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.OperaBattleCPPAll.operabattles)
  return operabattles_.Get(index);
}
inline ::ProtoOperaBattle::OperaBattleCPP* OperaBattleCPPAll::mutable_operabattles(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.OperaBattleCPPAll.operabattles)
  return operabattles_.Mutable(index);
}
inline ::ProtoOperaBattle::OperaBattleCPP* OperaBattleCPPAll::add_operabattles() {
  // @@protoc_insertion_point(field_add:ProtoOperaBattle.OperaBattleCPPAll.operabattles)
  return operabattles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::OperaBattleCPP >&
OperaBattleCPPAll::operabattles() const {
  // @@protoc_insertion_point(field_list:ProtoOperaBattle.OperaBattleCPPAll.operabattles)
  return operabattles_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::OperaBattleCPP >*
OperaBattleCPPAll::mutable_operabattles() {
  // @@protoc_insertion_point(field_mutable_list:ProtoOperaBattle.OperaBattleCPPAll.operabattles)
  return &operabattles_;
}

// -------------------------------------------------------------------

// MemoryRecordCPP

// required uint32 kingdom = 1;
inline bool MemoryRecordCPP::has_kingdom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryRecordCPP::set_has_kingdom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryRecordCPP::clear_has_kingdom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryRecordCPP::clear_kingdom() {
  kingdom_ = 0u;
  clear_has_kingdom();
}
inline ::google::protobuf::uint32 MemoryRecordCPP::kingdom() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.MemoryRecordCPP.kingdom)
  return kingdom_;
}
inline void MemoryRecordCPP::set_kingdom(::google::protobuf::uint32 value) {
  set_has_kingdom();
  kingdom_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.MemoryRecordCPP.kingdom)
}

// required bytes name = 2;
inline bool MemoryRecordCPP::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryRecordCPP::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryRecordCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryRecordCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MemoryRecordCPP::name() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.MemoryRecordCPP.name)
  return *name_;
}
inline void MemoryRecordCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.MemoryRecordCPP.name)
}
inline void MemoryRecordCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoOperaBattle.MemoryRecordCPP.name)
}
inline void MemoryRecordCPP::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoOperaBattle.MemoryRecordCPP.name)
}
inline ::std::string* MemoryRecordCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.MemoryRecordCPP.name)
  return name_;
}
inline ::std::string* MemoryRecordCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MemoryRecordCPP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoOperaBattle.MemoryRecordCPP.name)
}

// required uint32 left_time = 3;
inline bool MemoryRecordCPP::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryRecordCPP::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryRecordCPP::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryRecordCPP::clear_left_time() {
  left_time_ = 0u;
  clear_has_left_time();
}
inline ::google::protobuf::uint32 MemoryRecordCPP::left_time() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.MemoryRecordCPP.left_time)
  return left_time_;
}
inline void MemoryRecordCPP::set_left_time(::google::protobuf::uint32 value) {
  set_has_left_time();
  left_time_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.MemoryRecordCPP.left_time)
}

// -------------------------------------------------------------------

// MemoryBattleRecordCPP

// required uint32 gateid = 1;
inline bool MemoryBattleRecordCPP::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryBattleRecordCPP::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryBattleRecordCPP::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryBattleRecordCPP::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 MemoryBattleRecordCPP::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.MemoryBattleRecordCPP.gateid)
  return gateid_;
}
inline void MemoryBattleRecordCPP::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.MemoryBattleRecordCPP.gateid)
}

// repeated .ProtoOperaBattle.MemoryRecordCPP diff_record = 2;
inline int MemoryBattleRecordCPP::diff_record_size() const {
  return diff_record_.size();
}
inline void MemoryBattleRecordCPP::clear_diff_record() {
  diff_record_.Clear();
}
inline const ::ProtoOperaBattle::MemoryRecordCPP& MemoryBattleRecordCPP::diff_record(int index) const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.MemoryBattleRecordCPP.diff_record)
  return diff_record_.Get(index);
}
inline ::ProtoOperaBattle::MemoryRecordCPP* MemoryBattleRecordCPP::mutable_diff_record(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.MemoryBattleRecordCPP.diff_record)
  return diff_record_.Mutable(index);
}
inline ::ProtoOperaBattle::MemoryRecordCPP* MemoryBattleRecordCPP::add_diff_record() {
  // @@protoc_insertion_point(field_add:ProtoOperaBattle.MemoryBattleRecordCPP.diff_record)
  return diff_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryRecordCPP >&
MemoryBattleRecordCPP::diff_record() const {
  // @@protoc_insertion_point(field_list:ProtoOperaBattle.MemoryBattleRecordCPP.diff_record)
  return diff_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryRecordCPP >*
MemoryBattleRecordCPP::mutable_diff_record() {
  // @@protoc_insertion_point(field_mutable_list:ProtoOperaBattle.MemoryBattleRecordCPP.diff_record)
  return &diff_record_;
}

// -------------------------------------------------------------------

// MemoryOperaBattleRecordCPPAll

// repeated .ProtoOperaBattle.MemoryBattleRecordCPP battle_record = 1;
inline int MemoryOperaBattleRecordCPPAll::battle_record_size() const {
  return battle_record_.size();
}
inline void MemoryOperaBattleRecordCPPAll::clear_battle_record() {
  battle_record_.Clear();
}
inline const ::ProtoOperaBattle::MemoryBattleRecordCPP& MemoryOperaBattleRecordCPPAll::battle_record(int index) const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll.battle_record)
  return battle_record_.Get(index);
}
inline ::ProtoOperaBattle::MemoryBattleRecordCPP* MemoryOperaBattleRecordCPPAll::mutable_battle_record(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll.battle_record)
  return battle_record_.Mutable(index);
}
inline ::ProtoOperaBattle::MemoryBattleRecordCPP* MemoryOperaBattleRecordCPPAll::add_battle_record() {
  // @@protoc_insertion_point(field_add:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll.battle_record)
  return battle_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryBattleRecordCPP >&
MemoryOperaBattleRecordCPPAll::battle_record() const {
  // @@protoc_insertion_point(field_list:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll.battle_record)
  return battle_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoOperaBattle::MemoryBattleRecordCPP >*
MemoryOperaBattleRecordCPPAll::mutable_battle_record() {
  // @@protoc_insertion_point(field_mutable_list:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll.battle_record)
  return &battle_record_;
}

// -------------------------------------------------------------------

// OpenOperaBattleWindowReq

// -------------------------------------------------------------------

// OpenOperaBattleWindowResp

// required .ProtoOperaBattle.OperaBattleCPPAll operabattles = 1;
inline bool OpenOperaBattleWindowResp::has_operabattles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenOperaBattleWindowResp::set_has_operabattles() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenOperaBattleWindowResp::clear_has_operabattles() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenOperaBattleWindowResp::clear_operabattles() {
  if (operabattles_ != NULL) operabattles_->::ProtoOperaBattle::OperaBattleCPPAll::Clear();
  clear_has_operabattles();
}
inline const ::ProtoOperaBattle::OperaBattleCPPAll& OpenOperaBattleWindowResp::operabattles() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.OpenOperaBattleWindowResp.operabattles)
  return operabattles_ != NULL ? *operabattles_ : *default_instance_->operabattles_;
}
inline ::ProtoOperaBattle::OperaBattleCPPAll* OpenOperaBattleWindowResp::mutable_operabattles() {
  set_has_operabattles();
  if (operabattles_ == NULL) operabattles_ = new ::ProtoOperaBattle::OperaBattleCPPAll;
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.OpenOperaBattleWindowResp.operabattles)
  return operabattles_;
}
inline ::ProtoOperaBattle::OperaBattleCPPAll* OpenOperaBattleWindowResp::release_operabattles() {
  clear_has_operabattles();
  ::ProtoOperaBattle::OperaBattleCPPAll* temp = operabattles_;
  operabattles_ = NULL;
  return temp;
}
inline void OpenOperaBattleWindowResp::set_allocated_operabattles(::ProtoOperaBattle::OperaBattleCPPAll* operabattles) {
  delete operabattles_;
  operabattles_ = operabattles;
  if (operabattles) {
    set_has_operabattles();
  } else {
    clear_has_operabattles();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoOperaBattle.OpenOperaBattleWindowResp.operabattles)
}

// required .ProtoOperaBattle.MemoryOperaBattleRecordCPPAll records = 2;
inline bool OpenOperaBattleWindowResp::has_records() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenOperaBattleWindowResp::set_has_records() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenOperaBattleWindowResp::clear_has_records() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenOperaBattleWindowResp::clear_records() {
  if (records_ != NULL) records_->::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll::Clear();
  clear_has_records();
}
inline const ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll& OpenOperaBattleWindowResp::records() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.OpenOperaBattleWindowResp.records)
  return records_ != NULL ? *records_ : *default_instance_->records_;
}
inline ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* OpenOperaBattleWindowResp::mutable_records() {
  set_has_records();
  if (records_ == NULL) records_ = new ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll;
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.OpenOperaBattleWindowResp.records)
  return records_;
}
inline ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* OpenOperaBattleWindowResp::release_records() {
  clear_has_records();
  ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* temp = records_;
  records_ = NULL;
  return temp;
}
inline void OpenOperaBattleWindowResp::set_allocated_records(::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll* records) {
  delete records_;
  records_ = records;
  if (records) {
    set_has_records();
  } else {
    clear_has_records();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoOperaBattle.OpenOperaBattleWindowResp.records)
}

// -------------------------------------------------------------------

// StartOperaBattleReq

// required uint32 gateid = 1;
inline bool StartOperaBattleReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartOperaBattleReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartOperaBattleReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartOperaBattleReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 StartOperaBattleReq::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.StartOperaBattleReq.gateid)
  return gateid_;
}
inline void StartOperaBattleReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.StartOperaBattleReq.gateid)
}

// required uint32 difficulty = 2;
inline bool StartOperaBattleReq::has_difficulty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartOperaBattleReq::set_has_difficulty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartOperaBattleReq::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartOperaBattleReq::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 StartOperaBattleReq::difficulty() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.StartOperaBattleReq.difficulty)
  return difficulty_;
}
inline void StartOperaBattleReq::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.StartOperaBattleReq.difficulty)
}

// -------------------------------------------------------------------

// StartOperaBattleResp

// required uint32 food = 1;
inline bool StartOperaBattleResp::has_food() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartOperaBattleResp::set_has_food() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartOperaBattleResp::clear_has_food() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartOperaBattleResp::clear_food() {
  food_ = 0u;
  clear_has_food();
}
inline ::google::protobuf::uint32 StartOperaBattleResp::food() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.StartOperaBattleResp.food)
  return food_;
}
inline void StartOperaBattleResp::set_food(::google::protobuf::uint32 value) {
  set_has_food();
  food_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.StartOperaBattleResp.food)
}

// -------------------------------------------------------------------

// EndOperaBattleReq

// required uint32 gateid = 1;
inline bool EndOperaBattleReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndOperaBattleReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndOperaBattleReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndOperaBattleReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 EndOperaBattleReq::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.EndOperaBattleReq.gateid)
  return gateid_;
}
inline void EndOperaBattleReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.EndOperaBattleReq.gateid)
}

// required uint32 difficulty = 2;
inline bool EndOperaBattleReq::has_difficulty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndOperaBattleReq::set_has_difficulty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndOperaBattleReq::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndOperaBattleReq::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 EndOperaBattleReq::difficulty() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.EndOperaBattleReq.difficulty)
  return difficulty_;
}
inline void EndOperaBattleReq::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.EndOperaBattleReq.difficulty)
}

// required uint32 left_time = 3;
inline bool EndOperaBattleReq::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndOperaBattleReq::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndOperaBattleReq::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndOperaBattleReq::clear_left_time() {
  left_time_ = 0u;
  clear_has_left_time();
}
inline ::google::protobuf::uint32 EndOperaBattleReq::left_time() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.EndOperaBattleReq.left_time)
  return left_time_;
}
inline void EndOperaBattleReq::set_left_time(::google::protobuf::uint32 value) {
  set_has_left_time();
  left_time_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.EndOperaBattleReq.left_time)
}

// -------------------------------------------------------------------

// EndOperaBattleResp

// optional .ProtoOperaBattle.MemoryRecordCPP record = 1;
inline bool EndOperaBattleResp::has_record() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndOperaBattleResp::set_has_record() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndOperaBattleResp::clear_has_record() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndOperaBattleResp::clear_record() {
  if (record_ != NULL) record_->::ProtoOperaBattle::MemoryRecordCPP::Clear();
  clear_has_record();
}
inline const ::ProtoOperaBattle::MemoryRecordCPP& EndOperaBattleResp::record() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.EndOperaBattleResp.record)
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::ProtoOperaBattle::MemoryRecordCPP* EndOperaBattleResp::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::ProtoOperaBattle::MemoryRecordCPP;
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.EndOperaBattleResp.record)
  return record_;
}
inline ::ProtoOperaBattle::MemoryRecordCPP* EndOperaBattleResp::release_record() {
  clear_has_record();
  ::ProtoOperaBattle::MemoryRecordCPP* temp = record_;
  record_ = NULL;
  return temp;
}
inline void EndOperaBattleResp::set_allocated_record(::ProtoOperaBattle::MemoryRecordCPP* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoOperaBattle.EndOperaBattleResp.record)
}

// optional uint32 gateid = 2;
inline bool EndOperaBattleResp::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndOperaBattleResp::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndOperaBattleResp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndOperaBattleResp::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 EndOperaBattleResp::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.EndOperaBattleResp.gateid)
  return gateid_;
}
inline void EndOperaBattleResp::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.EndOperaBattleResp.gateid)
}

// optional uint32 difficulty = 3;
inline bool EndOperaBattleResp::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndOperaBattleResp::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndOperaBattleResp::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndOperaBattleResp::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 EndOperaBattleResp::difficulty() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.EndOperaBattleResp.difficulty)
  return difficulty_;
}
inline void EndOperaBattleResp::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.EndOperaBattleResp.difficulty)
}

// -------------------------------------------------------------------

// ReceiveStarRewardReq

// required uint32 gateid = 1;
inline bool ReceiveStarRewardReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveStarRewardReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveStarRewardReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveStarRewardReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 ReceiveStarRewardReq::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardReq.gateid)
  return gateid_;
}
inline void ReceiveStarRewardReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.ReceiveStarRewardReq.gateid)
}

// required uint32 difficulty = 2;
inline bool ReceiveStarRewardReq::has_difficulty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveStarRewardReq::set_has_difficulty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveStarRewardReq::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveStarRewardReq::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 ReceiveStarRewardReq::difficulty() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardReq.difficulty)
  return difficulty_;
}
inline void ReceiveStarRewardReq::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.ReceiveStarRewardReq.difficulty)
}

// required uint32 star = 3;
inline bool ReceiveStarRewardReq::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiveStarRewardReq::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiveStarRewardReq::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiveStarRewardReq::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 ReceiveStarRewardReq::star() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardReq.star)
  return star_;
}
inline void ReceiveStarRewardReq::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.ReceiveStarRewardReq.star)
}

// required uint32 battle_star = 4;
inline bool ReceiveStarRewardReq::has_battle_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiveStarRewardReq::set_has_battle_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceiveStarRewardReq::clear_has_battle_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceiveStarRewardReq::clear_battle_star() {
  battle_star_ = 0u;
  clear_has_battle_star();
}
inline ::google::protobuf::uint32 ReceiveStarRewardReq::battle_star() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardReq.battle_star)
  return battle_star_;
}
inline void ReceiveStarRewardReq::set_battle_star(::google::protobuf::uint32 value) {
  set_has_battle_star();
  battle_star_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.ReceiveStarRewardReq.battle_star)
}

// -------------------------------------------------------------------

// ReceiveStarRewardResp

// required uint32 cash = 1;
inline bool ReceiveStarRewardResp::has_cash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveStarRewardResp::set_has_cash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveStarRewardResp::clear_has_cash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveStarRewardResp::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 ReceiveStarRewardResp::cash() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardResp.cash)
  return cash_;
}
inline void ReceiveStarRewardResp::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:ProtoOperaBattle.ReceiveStarRewardResp.cash)
}

// required .ProtoOperaBattle.OperaBattleCPP operabattle = 2;
inline bool ReceiveStarRewardResp::has_operabattle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveStarRewardResp::set_has_operabattle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveStarRewardResp::clear_has_operabattle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveStarRewardResp::clear_operabattle() {
  if (operabattle_ != NULL) operabattle_->::ProtoOperaBattle::OperaBattleCPP::Clear();
  clear_has_operabattle();
}
inline const ::ProtoOperaBattle::OperaBattleCPP& ReceiveStarRewardResp::operabattle() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardResp.operabattle)
  return operabattle_ != NULL ? *operabattle_ : *default_instance_->operabattle_;
}
inline ::ProtoOperaBattle::OperaBattleCPP* ReceiveStarRewardResp::mutable_operabattle() {
  set_has_operabattle();
  if (operabattle_ == NULL) operabattle_ = new ::ProtoOperaBattle::OperaBattleCPP;
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.ReceiveStarRewardResp.operabattle)
  return operabattle_;
}
inline ::ProtoOperaBattle::OperaBattleCPP* ReceiveStarRewardResp::release_operabattle() {
  clear_has_operabattle();
  ::ProtoOperaBattle::OperaBattleCPP* temp = operabattle_;
  operabattle_ = NULL;
  return temp;
}
inline void ReceiveStarRewardResp::set_allocated_operabattle(::ProtoOperaBattle::OperaBattleCPP* operabattle) {
  delete operabattle_;
  operabattle_ = operabattle;
  if (operabattle) {
    set_has_operabattle();
  } else {
    clear_has_operabattle();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoOperaBattle.ReceiveStarRewardResp.operabattle)
}

// required .User.RewardBagInfo reward = 3;
inline bool ReceiveStarRewardResp::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiveStarRewardResp::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiveStarRewardResp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiveStarRewardResp::clear_reward() {
  if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
  clear_has_reward();
}
inline const ::User::RewardBagInfo& ReceiveStarRewardResp::reward() const {
  // @@protoc_insertion_point(field_get:ProtoOperaBattle.ReceiveStarRewardResp.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::User::RewardBagInfo* ReceiveStarRewardResp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::User::RewardBagInfo;
  // @@protoc_insertion_point(field_mutable:ProtoOperaBattle.ReceiveStarRewardResp.reward)
  return reward_;
}
inline ::User::RewardBagInfo* ReceiveStarRewardResp::release_reward() {
  clear_has_reward();
  ::User::RewardBagInfo* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void ReceiveStarRewardResp::set_allocated_reward(::User::RewardBagInfo* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoOperaBattle.ReceiveStarRewardResp.reward)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoOperaBattle

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoOperaBattle_2eproto__INCLUDED
