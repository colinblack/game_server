// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCrossBusiness.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoCrossBusiness.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCrossBusiness {

namespace {

const ::google::protobuf::Descriptor* CrossBusinessCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossBusinessCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusinessOpenWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusinessOpenWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusinessOpenWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusinessOpenWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusinessRefreshReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusinessRefreshReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusinessRefreshResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusinessRefreshResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusinessPurchaseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusinessPurchaseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusinessPurchaseResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusinessPurchaseResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoCrossBusiness_2eproto() {
  protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoCrossBusiness.proto");
  GOOGLE_CHECK(file != NULL);
  CrossBusinessCPP_descriptor_ = file->message_type(0);
  static const int CrossBusinessCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, refreshts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, slot1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, slot2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, slot3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, slot4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, slot5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, slot6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, status_),
  };
  CrossBusinessCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossBusinessCPP_descriptor_,
      CrossBusinessCPP::default_instance_,
      CrossBusinessCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossBusinessCPP));
  BusinessOpenWindowReq_descriptor_ = file->message_type(1);
  static const int BusinessOpenWindowReq_offsets_[1] = {
  };
  BusinessOpenWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusinessOpenWindowReq_descriptor_,
      BusinessOpenWindowReq::default_instance_,
      BusinessOpenWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessOpenWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessOpenWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusinessOpenWindowReq));
  BusinessOpenWindowResp_descriptor_ = file->message_type(2);
  static const int BusinessOpenWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessOpenWindowResp, crossbusiness_),
  };
  BusinessOpenWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusinessOpenWindowResp_descriptor_,
      BusinessOpenWindowResp::default_instance_,
      BusinessOpenWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessOpenWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessOpenWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusinessOpenWindowResp));
  BusinessRefreshReq_descriptor_ = file->message_type(3);
  static const int BusinessRefreshReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshReq, iscash_),
  };
  BusinessRefreshReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusinessRefreshReq_descriptor_,
      BusinessRefreshReq::default_instance_,
      BusinessRefreshReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusinessRefreshReq));
  BusinessRefreshResp_descriptor_ = file->message_type(4);
  static const int BusinessRefreshResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshResp, crossbusiness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshResp, cash_),
  };
  BusinessRefreshResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusinessRefreshResp_descriptor_,
      BusinessRefreshResp::default_instance_,
      BusinessRefreshResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessRefreshResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusinessRefreshResp));
  BusinessPurchaseReq_descriptor_ = file->message_type(5);
  static const int BusinessPurchaseReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseReq, pos_),
  };
  BusinessPurchaseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusinessPurchaseReq_descriptor_,
      BusinessPurchaseReq::default_instance_,
      BusinessPurchaseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusinessPurchaseReq));
  BusinessPurchaseResp_descriptor_ = file->message_type(6);
  static const int BusinessPurchaseResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseResp, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseResp, crossbusiness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseResp, cash_),
  };
  BusinessPurchaseResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusinessPurchaseResp_descriptor_,
      BusinessPurchaseResp::default_instance_,
      BusinessPurchaseResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusinessPurchaseResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusinessPurchaseResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoCrossBusiness_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossBusinessCPP_descriptor_, &CrossBusinessCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusinessOpenWindowReq_descriptor_, &BusinessOpenWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusinessOpenWindowResp_descriptor_, &BusinessOpenWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusinessRefreshReq_descriptor_, &BusinessRefreshReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusinessRefreshResp_descriptor_, &BusinessRefreshResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusinessPurchaseReq_descriptor_, &BusinessPurchaseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusinessPurchaseResp_descriptor_, &BusinessPurchaseResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoCrossBusiness_2eproto() {
  delete CrossBusinessCPP::default_instance_;
  delete CrossBusinessCPP_reflection_;
  delete BusinessOpenWindowReq::default_instance_;
  delete BusinessOpenWindowReq_reflection_;
  delete BusinessOpenWindowResp::default_instance_;
  delete BusinessOpenWindowResp_reflection_;
  delete BusinessRefreshReq::default_instance_;
  delete BusinessRefreshReq_reflection_;
  delete BusinessRefreshResp::default_instance_;
  delete BusinessRefreshResp_reflection_;
  delete BusinessPurchaseReq::default_instance_;
  delete BusinessPurchaseReq_reflection_;
  delete BusinessPurchaseResp::default_instance_;
  delete BusinessPurchaseResp_reflection_;
}

void protobuf_AddDesc_ProtoCrossBusiness_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ProtoCrossBusiness.proto\022\022ProtoCrossBu"
    "siness\032\nUser.proto\"\217\001\n\020CrossBusinessCPP\022"
    "\021\n\trefreshts\030\001 \002(\r\022\r\n\005slot1\030\002 \002(\r\022\r\n\005slo"
    "t2\030\003 \002(\r\022\r\n\005slot3\030\004 \002(\r\022\r\n\005slot4\030\005 \002(\r\022\r"
    "\n\005slot5\030\006 \002(\r\022\r\n\005slot6\030\007 \002(\r\022\016\n\006status\030\010"
    " \002(\r\"\027\n\025BusinessOpenWindowReq\"U\n\026Busines"
    "sOpenWindowResp\022;\n\rcrossbusiness\030\001 \002(\0132$"
    ".ProtoCrossBusiness.CrossBusinessCPP\"$\n\022"
    "BusinessRefreshReq\022\016\n\006iscash\030\001 \002(\010\"`\n\023Bu"
    "sinessRefreshResp\022;\n\rcrossbusiness\030\001 \002(\013"
    "2$.ProtoCrossBusiness.CrossBusinessCPP\022\014"
    "\n\004cash\030\002 \002(\r\"\"\n\023BusinessPurchaseReq\022\013\n\003p"
    "os\030\001 \002(\r\"\205\001\n\024BusinessPurchaseResp\022\"\n\005goo"
    "ds\030\001 \002(\0132\023.User.RewardBagInfo\022;\n\rcrossbu"
    "siness\030\002 \002(\0132$.ProtoCrossBusiness.CrossB"
    "usinessCPP\022\014\n\004cash\030\003 \002(\r", 624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoCrossBusiness.proto", &protobuf_RegisterTypes);
  CrossBusinessCPP::default_instance_ = new CrossBusinessCPP();
  BusinessOpenWindowReq::default_instance_ = new BusinessOpenWindowReq();
  BusinessOpenWindowResp::default_instance_ = new BusinessOpenWindowResp();
  BusinessRefreshReq::default_instance_ = new BusinessRefreshReq();
  BusinessRefreshResp::default_instance_ = new BusinessRefreshResp();
  BusinessPurchaseReq::default_instance_ = new BusinessPurchaseReq();
  BusinessPurchaseResp::default_instance_ = new BusinessPurchaseResp();
  CrossBusinessCPP::default_instance_->InitAsDefaultInstance();
  BusinessOpenWindowReq::default_instance_->InitAsDefaultInstance();
  BusinessOpenWindowResp::default_instance_->InitAsDefaultInstance();
  BusinessRefreshReq::default_instance_->InitAsDefaultInstance();
  BusinessRefreshResp::default_instance_->InitAsDefaultInstance();
  BusinessPurchaseReq::default_instance_->InitAsDefaultInstance();
  BusinessPurchaseResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoCrossBusiness_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoCrossBusiness_2eproto {
  StaticDescriptorInitializer_ProtoCrossBusiness_2eproto() {
    protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  }
} static_descriptor_initializer_ProtoCrossBusiness_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CrossBusinessCPP::kRefreshtsFieldNumber;
const int CrossBusinessCPP::kSlot1FieldNumber;
const int CrossBusinessCPP::kSlot2FieldNumber;
const int CrossBusinessCPP::kSlot3FieldNumber;
const int CrossBusinessCPP::kSlot4FieldNumber;
const int CrossBusinessCPP::kSlot5FieldNumber;
const int CrossBusinessCPP::kSlot6FieldNumber;
const int CrossBusinessCPP::kStatusFieldNumber;
#endif  // !_MSC_VER

CrossBusinessCPP::CrossBusinessCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.CrossBusinessCPP)
}

void CrossBusinessCPP::InitAsDefaultInstance() {
}

CrossBusinessCPP::CrossBusinessCPP(const CrossBusinessCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.CrossBusinessCPP)
}

void CrossBusinessCPP::SharedCtor() {
  _cached_size_ = 0;
  refreshts_ = 0u;
  slot1_ = 0u;
  slot2_ = 0u;
  slot3_ = 0u;
  slot4_ = 0u;
  slot5_ = 0u;
  slot6_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossBusinessCPP::~CrossBusinessCPP() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.CrossBusinessCPP)
  SharedDtor();
}

void CrossBusinessCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrossBusinessCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossBusinessCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossBusinessCPP_descriptor_;
}

const CrossBusinessCPP& CrossBusinessCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

CrossBusinessCPP* CrossBusinessCPP::default_instance_ = NULL;

CrossBusinessCPP* CrossBusinessCPP::New() const {
  return new CrossBusinessCPP;
}

void CrossBusinessCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CrossBusinessCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(refreshts_, status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossBusinessCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.CrossBusinessCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 refreshts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshts_)));
          set_has_refreshts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot1;
        break;
      }

      // required uint32 slot1 = 2;
      case 2: {
        if (tag == 16) {
         parse_slot1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot1_)));
          set_has_slot1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot2;
        break;
      }

      // required uint32 slot2 = 3;
      case 3: {
        if (tag == 24) {
         parse_slot2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot2_)));
          set_has_slot2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_slot3;
        break;
      }

      // required uint32 slot3 = 4;
      case 4: {
        if (tag == 32) {
         parse_slot3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot3_)));
          set_has_slot3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_slot4;
        break;
      }

      // required uint32 slot4 = 5;
      case 5: {
        if (tag == 40) {
         parse_slot4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot4_)));
          set_has_slot4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_slot5;
        break;
      }

      // required uint32 slot5 = 6;
      case 6: {
        if (tag == 48) {
         parse_slot5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot5_)));
          set_has_slot5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_slot6;
        break;
      }

      // required uint32 slot6 = 7;
      case 7: {
        if (tag == 56) {
         parse_slot6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot6_)));
          set_has_slot6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // required uint32 status = 8;
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.CrossBusinessCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.CrossBusinessCPP)
  return false;
#undef DO_
}

void CrossBusinessCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.CrossBusinessCPP)
  // required uint32 refreshts = 1;
  if (has_refreshts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refreshts(), output);
  }

  // required uint32 slot1 = 2;
  if (has_slot1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot1(), output);
  }

  // required uint32 slot2 = 3;
  if (has_slot2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot2(), output);
  }

  // required uint32 slot3 = 4;
  if (has_slot3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot3(), output);
  }

  // required uint32 slot4 = 5;
  if (has_slot4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slot4(), output);
  }

  // required uint32 slot5 = 6;
  if (has_slot5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slot5(), output);
  }

  // required uint32 slot6 = 7;
  if (has_slot6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slot6(), output);
  }

  // required uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.CrossBusinessCPP)
}

::google::protobuf::uint8* CrossBusinessCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.CrossBusinessCPP)
  // required uint32 refreshts = 1;
  if (has_refreshts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refreshts(), target);
  }

  // required uint32 slot1 = 2;
  if (has_slot1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot1(), target);
  }

  // required uint32 slot2 = 3;
  if (has_slot2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot2(), target);
  }

  // required uint32 slot3 = 4;
  if (has_slot3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot3(), target);
  }

  // required uint32 slot4 = 5;
  if (has_slot4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slot4(), target);
  }

  // required uint32 slot5 = 6;
  if (has_slot5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->slot5(), target);
  }

  // required uint32 slot6 = 7;
  if (has_slot6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slot6(), target);
  }

  // required uint32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.CrossBusinessCPP)
  return target;
}

int CrossBusinessCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 refreshts = 1;
    if (has_refreshts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshts());
    }

    // required uint32 slot1 = 2;
    if (has_slot1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot1());
    }

    // required uint32 slot2 = 3;
    if (has_slot2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot2());
    }

    // required uint32 slot3 = 4;
    if (has_slot3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot3());
    }

    // required uint32 slot4 = 5;
    if (has_slot4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot4());
    }

    // required uint32 slot5 = 6;
    if (has_slot5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot5());
    }

    // required uint32 slot6 = 7;
    if (has_slot6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot6());
    }

    // required uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossBusinessCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossBusinessCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossBusinessCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossBusinessCPP::MergeFrom(const CrossBusinessCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshts()) {
      set_refreshts(from.refreshts());
    }
    if (from.has_slot1()) {
      set_slot1(from.slot1());
    }
    if (from.has_slot2()) {
      set_slot2(from.slot2());
    }
    if (from.has_slot3()) {
      set_slot3(from.slot3());
    }
    if (from.has_slot4()) {
      set_slot4(from.slot4());
    }
    if (from.has_slot5()) {
      set_slot5(from.slot5());
    }
    if (from.has_slot6()) {
      set_slot6(from.slot6());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossBusinessCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossBusinessCPP::CopyFrom(const CrossBusinessCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossBusinessCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CrossBusinessCPP::Swap(CrossBusinessCPP* other) {
  if (other != this) {
    std::swap(refreshts_, other->refreshts_);
    std::swap(slot1_, other->slot1_);
    std::swap(slot2_, other->slot2_);
    std::swap(slot3_, other->slot3_);
    std::swap(slot4_, other->slot4_);
    std::swap(slot5_, other->slot5_);
    std::swap(slot6_, other->slot6_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossBusinessCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossBusinessCPP_descriptor_;
  metadata.reflection = CrossBusinessCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BusinessOpenWindowReq::BusinessOpenWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.BusinessOpenWindowReq)
}

void BusinessOpenWindowReq::InitAsDefaultInstance() {
}

BusinessOpenWindowReq::BusinessOpenWindowReq(const BusinessOpenWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.BusinessOpenWindowReq)
}

void BusinessOpenWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusinessOpenWindowReq::~BusinessOpenWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.BusinessOpenWindowReq)
  SharedDtor();
}

void BusinessOpenWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BusinessOpenWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessOpenWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusinessOpenWindowReq_descriptor_;
}

const BusinessOpenWindowReq& BusinessOpenWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

BusinessOpenWindowReq* BusinessOpenWindowReq::default_instance_ = NULL;

BusinessOpenWindowReq* BusinessOpenWindowReq::New() const {
  return new BusinessOpenWindowReq;
}

void BusinessOpenWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusinessOpenWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.BusinessOpenWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.BusinessOpenWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.BusinessOpenWindowReq)
  return false;
#undef DO_
}

void BusinessOpenWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.BusinessOpenWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.BusinessOpenWindowReq)
}

::google::protobuf::uint8* BusinessOpenWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.BusinessOpenWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.BusinessOpenWindowReq)
  return target;
}

int BusinessOpenWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessOpenWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusinessOpenWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusinessOpenWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusinessOpenWindowReq::MergeFrom(const BusinessOpenWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusinessOpenWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessOpenWindowReq::CopyFrom(const BusinessOpenWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessOpenWindowReq::IsInitialized() const {

  return true;
}

void BusinessOpenWindowReq::Swap(BusinessOpenWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusinessOpenWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusinessOpenWindowReq_descriptor_;
  metadata.reflection = BusinessOpenWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusinessOpenWindowResp::kCrossbusinessFieldNumber;
#endif  // !_MSC_VER

BusinessOpenWindowResp::BusinessOpenWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.BusinessOpenWindowResp)
}

void BusinessOpenWindowResp::InitAsDefaultInstance() {
  crossbusiness_ = const_cast< ::ProtoCrossBusiness::CrossBusinessCPP*>(&::ProtoCrossBusiness::CrossBusinessCPP::default_instance());
}

BusinessOpenWindowResp::BusinessOpenWindowResp(const BusinessOpenWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.BusinessOpenWindowResp)
}

void BusinessOpenWindowResp::SharedCtor() {
  _cached_size_ = 0;
  crossbusiness_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusinessOpenWindowResp::~BusinessOpenWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.BusinessOpenWindowResp)
  SharedDtor();
}

void BusinessOpenWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete crossbusiness_;
  }
}

void BusinessOpenWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessOpenWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusinessOpenWindowResp_descriptor_;
}

const BusinessOpenWindowResp& BusinessOpenWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

BusinessOpenWindowResp* BusinessOpenWindowResp::default_instance_ = NULL;

BusinessOpenWindowResp* BusinessOpenWindowResp::New() const {
  return new BusinessOpenWindowResp;
}

void BusinessOpenWindowResp::Clear() {
  if (has_crossbusiness()) {
    if (crossbusiness_ != NULL) crossbusiness_->::ProtoCrossBusiness::CrossBusinessCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusinessOpenWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.BusinessOpenWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossbusiness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.BusinessOpenWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.BusinessOpenWindowResp)
  return false;
#undef DO_
}

void BusinessOpenWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.BusinessOpenWindowResp)
  // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
  if (has_crossbusiness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->crossbusiness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.BusinessOpenWindowResp)
}

::google::protobuf::uint8* BusinessOpenWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.BusinessOpenWindowResp)
  // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
  if (has_crossbusiness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->crossbusiness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.BusinessOpenWindowResp)
  return target;
}

int BusinessOpenWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
    if (has_crossbusiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossbusiness());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessOpenWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusinessOpenWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusinessOpenWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusinessOpenWindowResp::MergeFrom(const BusinessOpenWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crossbusiness()) {
      mutable_crossbusiness()->::ProtoCrossBusiness::CrossBusinessCPP::MergeFrom(from.crossbusiness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusinessOpenWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessOpenWindowResp::CopyFrom(const BusinessOpenWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessOpenWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_crossbusiness()) {
    if (!this->crossbusiness().IsInitialized()) return false;
  }
  return true;
}

void BusinessOpenWindowResp::Swap(BusinessOpenWindowResp* other) {
  if (other != this) {
    std::swap(crossbusiness_, other->crossbusiness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusinessOpenWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusinessOpenWindowResp_descriptor_;
  metadata.reflection = BusinessOpenWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusinessRefreshReq::kIscashFieldNumber;
#endif  // !_MSC_VER

BusinessRefreshReq::BusinessRefreshReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.BusinessRefreshReq)
}

void BusinessRefreshReq::InitAsDefaultInstance() {
}

BusinessRefreshReq::BusinessRefreshReq(const BusinessRefreshReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.BusinessRefreshReq)
}

void BusinessRefreshReq::SharedCtor() {
  _cached_size_ = 0;
  iscash_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusinessRefreshReq::~BusinessRefreshReq() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.BusinessRefreshReq)
  SharedDtor();
}

void BusinessRefreshReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BusinessRefreshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessRefreshReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusinessRefreshReq_descriptor_;
}

const BusinessRefreshReq& BusinessRefreshReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

BusinessRefreshReq* BusinessRefreshReq::default_instance_ = NULL;

BusinessRefreshReq* BusinessRefreshReq::New() const {
  return new BusinessRefreshReq;
}

void BusinessRefreshReq::Clear() {
  iscash_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusinessRefreshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.BusinessRefreshReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool iscash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscash_)));
          set_has_iscash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.BusinessRefreshReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.BusinessRefreshReq)
  return false;
#undef DO_
}

void BusinessRefreshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.BusinessRefreshReq)
  // required bool iscash = 1;
  if (has_iscash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iscash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.BusinessRefreshReq)
}

::google::protobuf::uint8* BusinessRefreshReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.BusinessRefreshReq)
  // required bool iscash = 1;
  if (has_iscash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iscash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.BusinessRefreshReq)
  return target;
}

int BusinessRefreshReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool iscash = 1;
    if (has_iscash()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessRefreshReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusinessRefreshReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusinessRefreshReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusinessRefreshReq::MergeFrom(const BusinessRefreshReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscash()) {
      set_iscash(from.iscash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusinessRefreshReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessRefreshReq::CopyFrom(const BusinessRefreshReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessRefreshReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BusinessRefreshReq::Swap(BusinessRefreshReq* other) {
  if (other != this) {
    std::swap(iscash_, other->iscash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusinessRefreshReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusinessRefreshReq_descriptor_;
  metadata.reflection = BusinessRefreshReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusinessRefreshResp::kCrossbusinessFieldNumber;
const int BusinessRefreshResp::kCashFieldNumber;
#endif  // !_MSC_VER

BusinessRefreshResp::BusinessRefreshResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.BusinessRefreshResp)
}

void BusinessRefreshResp::InitAsDefaultInstance() {
  crossbusiness_ = const_cast< ::ProtoCrossBusiness::CrossBusinessCPP*>(&::ProtoCrossBusiness::CrossBusinessCPP::default_instance());
}

BusinessRefreshResp::BusinessRefreshResp(const BusinessRefreshResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.BusinessRefreshResp)
}

void BusinessRefreshResp::SharedCtor() {
  _cached_size_ = 0;
  crossbusiness_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusinessRefreshResp::~BusinessRefreshResp() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.BusinessRefreshResp)
  SharedDtor();
}

void BusinessRefreshResp::SharedDtor() {
  if (this != default_instance_) {
    delete crossbusiness_;
  }
}

void BusinessRefreshResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessRefreshResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusinessRefreshResp_descriptor_;
}

const BusinessRefreshResp& BusinessRefreshResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

BusinessRefreshResp* BusinessRefreshResp::default_instance_ = NULL;

BusinessRefreshResp* BusinessRefreshResp::New() const {
  return new BusinessRefreshResp;
}

void BusinessRefreshResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_crossbusiness()) {
      if (crossbusiness_ != NULL) crossbusiness_->::ProtoCrossBusiness::CrossBusinessCPP::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusinessRefreshResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.BusinessRefreshResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossbusiness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.BusinessRefreshResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.BusinessRefreshResp)
  return false;
#undef DO_
}

void BusinessRefreshResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.BusinessRefreshResp)
  // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
  if (has_crossbusiness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->crossbusiness(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.BusinessRefreshResp)
}

::google::protobuf::uint8* BusinessRefreshResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.BusinessRefreshResp)
  // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
  if (has_crossbusiness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->crossbusiness(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.BusinessRefreshResp)
  return target;
}

int BusinessRefreshResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 1;
    if (has_crossbusiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossbusiness());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessRefreshResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusinessRefreshResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusinessRefreshResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusinessRefreshResp::MergeFrom(const BusinessRefreshResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crossbusiness()) {
      mutable_crossbusiness()->::ProtoCrossBusiness::CrossBusinessCPP::MergeFrom(from.crossbusiness());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusinessRefreshResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessRefreshResp::CopyFrom(const BusinessRefreshResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessRefreshResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_crossbusiness()) {
    if (!this->crossbusiness().IsInitialized()) return false;
  }
  return true;
}

void BusinessRefreshResp::Swap(BusinessRefreshResp* other) {
  if (other != this) {
    std::swap(crossbusiness_, other->crossbusiness_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusinessRefreshResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusinessRefreshResp_descriptor_;
  metadata.reflection = BusinessRefreshResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusinessPurchaseReq::kPosFieldNumber;
#endif  // !_MSC_VER

BusinessPurchaseReq::BusinessPurchaseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.BusinessPurchaseReq)
}

void BusinessPurchaseReq::InitAsDefaultInstance() {
}

BusinessPurchaseReq::BusinessPurchaseReq(const BusinessPurchaseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.BusinessPurchaseReq)
}

void BusinessPurchaseReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusinessPurchaseReq::~BusinessPurchaseReq() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.BusinessPurchaseReq)
  SharedDtor();
}

void BusinessPurchaseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BusinessPurchaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessPurchaseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusinessPurchaseReq_descriptor_;
}

const BusinessPurchaseReq& BusinessPurchaseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

BusinessPurchaseReq* BusinessPurchaseReq::default_instance_ = NULL;

BusinessPurchaseReq* BusinessPurchaseReq::New() const {
  return new BusinessPurchaseReq;
}

void BusinessPurchaseReq::Clear() {
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusinessPurchaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.BusinessPurchaseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.BusinessPurchaseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.BusinessPurchaseReq)
  return false;
#undef DO_
}

void BusinessPurchaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.BusinessPurchaseReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.BusinessPurchaseReq)
}

::google::protobuf::uint8* BusinessPurchaseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.BusinessPurchaseReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.BusinessPurchaseReq)
  return target;
}

int BusinessPurchaseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessPurchaseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusinessPurchaseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusinessPurchaseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusinessPurchaseReq::MergeFrom(const BusinessPurchaseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusinessPurchaseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessPurchaseReq::CopyFrom(const BusinessPurchaseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessPurchaseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BusinessPurchaseReq::Swap(BusinessPurchaseReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusinessPurchaseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusinessPurchaseReq_descriptor_;
  metadata.reflection = BusinessPurchaseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusinessPurchaseResp::kGoodsFieldNumber;
const int BusinessPurchaseResp::kCrossbusinessFieldNumber;
const int BusinessPurchaseResp::kCashFieldNumber;
#endif  // !_MSC_VER

BusinessPurchaseResp::BusinessPurchaseResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCrossBusiness.BusinessPurchaseResp)
}

void BusinessPurchaseResp::InitAsDefaultInstance() {
  goods_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
  crossbusiness_ = const_cast< ::ProtoCrossBusiness::CrossBusinessCPP*>(&::ProtoCrossBusiness::CrossBusinessCPP::default_instance());
}

BusinessPurchaseResp::BusinessPurchaseResp(const BusinessPurchaseResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCrossBusiness.BusinessPurchaseResp)
}

void BusinessPurchaseResp::SharedCtor() {
  _cached_size_ = 0;
  goods_ = NULL;
  crossbusiness_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusinessPurchaseResp::~BusinessPurchaseResp() {
  // @@protoc_insertion_point(destructor:ProtoCrossBusiness.BusinessPurchaseResp)
  SharedDtor();
}

void BusinessPurchaseResp::SharedDtor() {
  if (this != default_instance_) {
    delete goods_;
    delete crossbusiness_;
  }
}

void BusinessPurchaseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessPurchaseResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusinessPurchaseResp_descriptor_;
}

const BusinessPurchaseResp& BusinessPurchaseResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCrossBusiness_2eproto();
  return *default_instance_;
}

BusinessPurchaseResp* BusinessPurchaseResp::default_instance_ = NULL;

BusinessPurchaseResp* BusinessPurchaseResp::New() const {
  return new BusinessPurchaseResp;
}

void BusinessPurchaseResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_goods()) {
      if (goods_ != NULL) goods_->::User::RewardBagInfo::Clear();
    }
    if (has_crossbusiness()) {
      if (crossbusiness_ != NULL) crossbusiness_->::ProtoCrossBusiness::CrossBusinessCPP::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusinessPurchaseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCrossBusiness.BusinessPurchaseResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.RewardBagInfo goods = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_crossbusiness;
        break;
      }

      // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 2;
      case 2: {
        if (tag == 18) {
         parse_crossbusiness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossbusiness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }

      // required uint32 cash = 3;
      case 3: {
        if (tag == 24) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCrossBusiness.BusinessPurchaseResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCrossBusiness.BusinessPurchaseResp)
  return false;
#undef DO_
}

void BusinessPurchaseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCrossBusiness.BusinessPurchaseResp)
  // required .User.RewardBagInfo goods = 1;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods(), output);
  }

  // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 2;
  if (has_crossbusiness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crossbusiness(), output);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCrossBusiness.BusinessPurchaseResp)
}

::google::protobuf::uint8* BusinessPurchaseResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCrossBusiness.BusinessPurchaseResp)
  // required .User.RewardBagInfo goods = 1;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods(), target);
  }

  // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 2;
  if (has_crossbusiness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->crossbusiness(), target);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCrossBusiness.BusinessPurchaseResp)
  return target;
}

int BusinessPurchaseResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.RewardBagInfo goods = 1;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods());
    }

    // required .ProtoCrossBusiness.CrossBusinessCPP crossbusiness = 2;
    if (has_crossbusiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossbusiness());
    }

    // required uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessPurchaseResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusinessPurchaseResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusinessPurchaseResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusinessPurchaseResp::MergeFrom(const BusinessPurchaseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods()) {
      mutable_goods()->::User::RewardBagInfo::MergeFrom(from.goods());
    }
    if (from.has_crossbusiness()) {
      mutable_crossbusiness()->::ProtoCrossBusiness::CrossBusinessCPP::MergeFrom(from.crossbusiness());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusinessPurchaseResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessPurchaseResp::CopyFrom(const BusinessPurchaseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessPurchaseResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_goods()) {
    if (!this->goods().IsInitialized()) return false;
  }
  if (has_crossbusiness()) {
    if (!this->crossbusiness().IsInitialized()) return false;
  }
  return true;
}

void BusinessPurchaseResp::Swap(BusinessPurchaseResp* other) {
  if (other != this) {
    std::swap(goods_, other->goods_);
    std::swap(crossbusiness_, other->crossbusiness_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusinessPurchaseResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusinessPurchaseResp_descriptor_;
  metadata.reflection = BusinessPurchaseResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCrossBusiness

// @@protoc_insertion_point(global_scope)
