// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoModelTrial.proto

#ifndef PROTOBUF_ProtoModelTrial_2eproto__INCLUDED
#define PROTOBUF_ProtoModelTrial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoModelTrial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoModelTrial_2eproto();
void protobuf_AssignDesc_ProtoModelTrial_2eproto();
void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

class ModelTrialCPP;
class OpenModelWindowReq;
class OpenModelWindowResp;
class BuyFightTimesReq;
class BuyFightTimesResp;
class StartTrialGateReq;
class StartTrialGateResp;
class PushTrialRewardReq;

// ===================================================================

class ModelTrialCPP : public ::google::protobuf::Message {
 public:
  ModelTrialCPP();
  virtual ~ModelTrialCPP();

  ModelTrialCPP(const ModelTrialCPP& from);

  inline ModelTrialCPP& operator=(const ModelTrialCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelTrialCPP& default_instance();

  void Swap(ModelTrialCPP* other);

  // implements Message ----------------------------------------------

  ModelTrialCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelTrialCPP& from);
  void MergeFrom(const ModelTrialCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 curpos = 1;
  inline bool has_curpos() const;
  inline void clear_curpos();
  static const int kCurposFieldNumber = 1;
  inline ::google::protobuf::uint32 curpos() const;
  inline void set_curpos(::google::protobuf::uint32 value);

  // required uint32 fight_times = 2;
  inline bool has_fight_times() const;
  inline void clear_fight_times();
  static const int kFightTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 fight_times() const;
  inline void set_fight_times(::google::protobuf::uint32 value);

  // required uint32 buy_times = 3;
  inline bool has_buy_times() const;
  inline void clear_buy_times();
  static const int kBuyTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_times() const;
  inline void set_buy_times(::google::protobuf::uint32 value);

  // required uint32 resetts = 4;
  inline bool has_resetts() const;
  inline void clear_resetts();
  static const int kResettsFieldNumber = 4;
  inline ::google::protobuf::uint32 resetts() const;
  inline void set_resetts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.ModelTrialCPP)
 private:
  inline void set_has_curpos();
  inline void clear_has_curpos();
  inline void set_has_fight_times();
  inline void clear_has_fight_times();
  inline void set_has_buy_times();
  inline void clear_has_buy_times();
  inline void set_has_resetts();
  inline void clear_has_resetts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curpos_;
  ::google::protobuf::uint32 fight_times_;
  ::google::protobuf::uint32 buy_times_;
  ::google::protobuf::uint32 resetts_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static ModelTrialCPP* default_instance_;
};
// -------------------------------------------------------------------

class OpenModelWindowReq : public ::google::protobuf::Message {
 public:
  OpenModelWindowReq();
  virtual ~OpenModelWindowReq();

  OpenModelWindowReq(const OpenModelWindowReq& from);

  inline OpenModelWindowReq& operator=(const OpenModelWindowReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenModelWindowReq& default_instance();

  void Swap(OpenModelWindowReq* other);

  // implements Message ----------------------------------------------

  OpenModelWindowReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenModelWindowReq& from);
  void MergeFrom(const OpenModelWindowReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.OpenModelWindowReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static OpenModelWindowReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenModelWindowResp : public ::google::protobuf::Message {
 public:
  OpenModelWindowResp();
  virtual ~OpenModelWindowResp();

  OpenModelWindowResp(const OpenModelWindowResp& from);

  inline OpenModelWindowResp& operator=(const OpenModelWindowResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenModelWindowResp& default_instance();

  void Swap(OpenModelWindowResp* other);

  // implements Message ----------------------------------------------

  OpenModelWindowResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenModelWindowResp& from);
  void MergeFrom(const OpenModelWindowResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  inline bool has_modeltrial() const;
  inline void clear_modeltrial();
  static const int kModeltrialFieldNumber = 1;
  inline const ::ProtoModelTrial::ModelTrialCPP& modeltrial() const;
  inline ::ProtoModelTrial::ModelTrialCPP* mutable_modeltrial();
  inline ::ProtoModelTrial::ModelTrialCPP* release_modeltrial();
  inline void set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial);

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.OpenModelWindowResp)
 private:
  inline void set_has_modeltrial();
  inline void clear_has_modeltrial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoModelTrial::ModelTrialCPP* modeltrial_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static OpenModelWindowResp* default_instance_;
};
// -------------------------------------------------------------------

class BuyFightTimesReq : public ::google::protobuf::Message {
 public:
  BuyFightTimesReq();
  virtual ~BuyFightTimesReq();

  BuyFightTimesReq(const BuyFightTimesReq& from);

  inline BuyFightTimesReq& operator=(const BuyFightTimesReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyFightTimesReq& default_instance();

  void Swap(BuyFightTimesReq* other);

  // implements Message ----------------------------------------------

  BuyFightTimesReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyFightTimesReq& from);
  void MergeFrom(const BuyFightTimesReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.BuyFightTimesReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static BuyFightTimesReq* default_instance_;
};
// -------------------------------------------------------------------

class BuyFightTimesResp : public ::google::protobuf::Message {
 public:
  BuyFightTimesResp();
  virtual ~BuyFightTimesResp();

  BuyFightTimesResp(const BuyFightTimesResp& from);

  inline BuyFightTimesResp& operator=(const BuyFightTimesResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyFightTimesResp& default_instance();

  void Swap(BuyFightTimesResp* other);

  // implements Message ----------------------------------------------

  BuyFightTimesResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyFightTimesResp& from);
  void MergeFrom(const BuyFightTimesResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  inline bool has_modeltrial() const;
  inline void clear_modeltrial();
  static const int kModeltrialFieldNumber = 1;
  inline const ::ProtoModelTrial::ModelTrialCPP& modeltrial() const;
  inline ::ProtoModelTrial::ModelTrialCPP* mutable_modeltrial();
  inline ::ProtoModelTrial::ModelTrialCPP* release_modeltrial();
  inline void set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial);

  // required uint32 cash = 2;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 2;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.BuyFightTimesResp)
 private:
  inline void set_has_modeltrial();
  inline void clear_has_modeltrial();
  inline void set_has_cash();
  inline void clear_has_cash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoModelTrial::ModelTrialCPP* modeltrial_;
  ::google::protobuf::uint32 cash_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static BuyFightTimesResp* default_instance_;
};
// -------------------------------------------------------------------

class StartTrialGateReq : public ::google::protobuf::Message {
 public:
  StartTrialGateReq();
  virtual ~StartTrialGateReq();

  StartTrialGateReq(const StartTrialGateReq& from);

  inline StartTrialGateReq& operator=(const StartTrialGateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTrialGateReq& default_instance();

  void Swap(StartTrialGateReq* other);

  // implements Message ----------------------------------------------

  StartTrialGateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartTrialGateReq& from);
  void MergeFrom(const StartTrialGateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // repeated uint32 heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.StartTrialGateReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static StartTrialGateReq* default_instance_;
};
// -------------------------------------------------------------------

class StartTrialGateResp : public ::google::protobuf::Message {
 public:
  StartTrialGateResp();
  virtual ~StartTrialGateResp();

  StartTrialGateResp(const StartTrialGateResp& from);

  inline StartTrialGateResp& operator=(const StartTrialGateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTrialGateResp& default_instance();

  void Swap(StartTrialGateResp* other);

  // implements Message ----------------------------------------------

  StartTrialGateResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartTrialGateResp& from);
  void MergeFrom(const StartTrialGateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  inline bool has_modeltrial() const;
  inline void clear_modeltrial();
  static const int kModeltrialFieldNumber = 1;
  inline const ::ProtoModelTrial::ModelTrialCPP& modeltrial() const;
  inline ::ProtoModelTrial::ModelTrialCPP* mutable_modeltrial();
  inline ::ProtoModelTrial::ModelTrialCPP* release_modeltrial();
  inline void set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial);

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.StartTrialGateResp)
 private:
  inline void set_has_modeltrial();
  inline void clear_has_modeltrial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoModelTrial::ModelTrialCPP* modeltrial_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static StartTrialGateResp* default_instance_;
};
// -------------------------------------------------------------------

class PushTrialRewardReq : public ::google::protobuf::Message {
 public:
  PushTrialRewardReq();
  virtual ~PushTrialRewardReq();

  PushTrialRewardReq(const PushTrialRewardReq& from);

  inline PushTrialRewardReq& operator=(const PushTrialRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushTrialRewardReq& default_instance();

  void Swap(PushTrialRewardReq* other);

  // implements Message ----------------------------------------------

  PushTrialRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushTrialRewardReq& from);
  void MergeFrom(const PushTrialRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isfirst = 1;
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsfirstFieldNumber = 1;
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // required .User.RewardBagInfo reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::User::RewardBagInfo& reward() const;
  inline ::User::RewardBagInfo* mutable_reward();
  inline ::User::RewardBagInfo* release_reward();
  inline void set_allocated_reward(::User::RewardBagInfo* reward);

  // optional .ProtoModelTrial.ModelTrialCPP modeltrial = 3;
  inline bool has_modeltrial() const;
  inline void clear_modeltrial();
  static const int kModeltrialFieldNumber = 3;
  inline const ::ProtoModelTrial::ModelTrialCPP& modeltrial() const;
  inline ::ProtoModelTrial::ModelTrialCPP* mutable_modeltrial();
  inline ::ProtoModelTrial::ModelTrialCPP* release_modeltrial();
  inline void set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial);

  // @@protoc_insertion_point(class_scope:ProtoModelTrial.PushTrialRewardReq)
 private:
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_modeltrial();
  inline void clear_has_modeltrial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::User::RewardBagInfo* reward_;
  ::ProtoModelTrial::ModelTrialCPP* modeltrial_;
  bool isfirst_;
  friend void  protobuf_AddDesc_ProtoModelTrial_2eproto();
  friend void protobuf_AssignDesc_ProtoModelTrial_2eproto();
  friend void protobuf_ShutdownFile_ProtoModelTrial_2eproto();

  void InitAsDefaultInstance();
  static PushTrialRewardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// ModelTrialCPP

// required uint32 curpos = 1;
inline bool ModelTrialCPP::has_curpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelTrialCPP::set_has_curpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelTrialCPP::clear_has_curpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelTrialCPP::clear_curpos() {
  curpos_ = 0u;
  clear_has_curpos();
}
inline ::google::protobuf::uint32 ModelTrialCPP::curpos() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.ModelTrialCPP.curpos)
  return curpos_;
}
inline void ModelTrialCPP::set_curpos(::google::protobuf::uint32 value) {
  set_has_curpos();
  curpos_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.ModelTrialCPP.curpos)
}

// required uint32 fight_times = 2;
inline bool ModelTrialCPP::has_fight_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelTrialCPP::set_has_fight_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelTrialCPP::clear_has_fight_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelTrialCPP::clear_fight_times() {
  fight_times_ = 0u;
  clear_has_fight_times();
}
inline ::google::protobuf::uint32 ModelTrialCPP::fight_times() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.ModelTrialCPP.fight_times)
  return fight_times_;
}
inline void ModelTrialCPP::set_fight_times(::google::protobuf::uint32 value) {
  set_has_fight_times();
  fight_times_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.ModelTrialCPP.fight_times)
}

// required uint32 buy_times = 3;
inline bool ModelTrialCPP::has_buy_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelTrialCPP::set_has_buy_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelTrialCPP::clear_has_buy_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelTrialCPP::clear_buy_times() {
  buy_times_ = 0u;
  clear_has_buy_times();
}
inline ::google::protobuf::uint32 ModelTrialCPP::buy_times() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.ModelTrialCPP.buy_times)
  return buy_times_;
}
inline void ModelTrialCPP::set_buy_times(::google::protobuf::uint32 value) {
  set_has_buy_times();
  buy_times_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.ModelTrialCPP.buy_times)
}

// required uint32 resetts = 4;
inline bool ModelTrialCPP::has_resetts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelTrialCPP::set_has_resetts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelTrialCPP::clear_has_resetts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelTrialCPP::clear_resetts() {
  resetts_ = 0u;
  clear_has_resetts();
}
inline ::google::protobuf::uint32 ModelTrialCPP::resetts() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.ModelTrialCPP.resetts)
  return resetts_;
}
inline void ModelTrialCPP::set_resetts(::google::protobuf::uint32 value) {
  set_has_resetts();
  resetts_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.ModelTrialCPP.resetts)
}

// -------------------------------------------------------------------

// OpenModelWindowReq

// -------------------------------------------------------------------

// OpenModelWindowResp

// required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
inline bool OpenModelWindowResp::has_modeltrial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenModelWindowResp::set_has_modeltrial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenModelWindowResp::clear_has_modeltrial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenModelWindowResp::clear_modeltrial() {
  if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
  clear_has_modeltrial();
}
inline const ::ProtoModelTrial::ModelTrialCPP& OpenModelWindowResp::modeltrial() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.OpenModelWindowResp.modeltrial)
  return modeltrial_ != NULL ? *modeltrial_ : *default_instance_->modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* OpenModelWindowResp::mutable_modeltrial() {
  set_has_modeltrial();
  if (modeltrial_ == NULL) modeltrial_ = new ::ProtoModelTrial::ModelTrialCPP;
  // @@protoc_insertion_point(field_mutable:ProtoModelTrial.OpenModelWindowResp.modeltrial)
  return modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* OpenModelWindowResp::release_modeltrial() {
  clear_has_modeltrial();
  ::ProtoModelTrial::ModelTrialCPP* temp = modeltrial_;
  modeltrial_ = NULL;
  return temp;
}
inline void OpenModelWindowResp::set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial) {
  delete modeltrial_;
  modeltrial_ = modeltrial;
  if (modeltrial) {
    set_has_modeltrial();
  } else {
    clear_has_modeltrial();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoModelTrial.OpenModelWindowResp.modeltrial)
}

// -------------------------------------------------------------------

// BuyFightTimesReq

// -------------------------------------------------------------------

// BuyFightTimesResp

// required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
inline bool BuyFightTimesResp::has_modeltrial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyFightTimesResp::set_has_modeltrial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyFightTimesResp::clear_has_modeltrial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyFightTimesResp::clear_modeltrial() {
  if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
  clear_has_modeltrial();
}
inline const ::ProtoModelTrial::ModelTrialCPP& BuyFightTimesResp::modeltrial() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.BuyFightTimesResp.modeltrial)
  return modeltrial_ != NULL ? *modeltrial_ : *default_instance_->modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* BuyFightTimesResp::mutable_modeltrial() {
  set_has_modeltrial();
  if (modeltrial_ == NULL) modeltrial_ = new ::ProtoModelTrial::ModelTrialCPP;
  // @@protoc_insertion_point(field_mutable:ProtoModelTrial.BuyFightTimesResp.modeltrial)
  return modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* BuyFightTimesResp::release_modeltrial() {
  clear_has_modeltrial();
  ::ProtoModelTrial::ModelTrialCPP* temp = modeltrial_;
  modeltrial_ = NULL;
  return temp;
}
inline void BuyFightTimesResp::set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial) {
  delete modeltrial_;
  modeltrial_ = modeltrial;
  if (modeltrial) {
    set_has_modeltrial();
  } else {
    clear_has_modeltrial();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoModelTrial.BuyFightTimesResp.modeltrial)
}

// required uint32 cash = 2;
inline bool BuyFightTimesResp::has_cash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyFightTimesResp::set_has_cash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyFightTimesResp::clear_has_cash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyFightTimesResp::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 BuyFightTimesResp::cash() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.BuyFightTimesResp.cash)
  return cash_;
}
inline void BuyFightTimesResp::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.BuyFightTimesResp.cash)
}

// -------------------------------------------------------------------

// StartTrialGateReq

// required uint32 pos = 1;
inline bool StartTrialGateReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartTrialGateReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartTrialGateReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartTrialGateReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 StartTrialGateReq::pos() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.StartTrialGateReq.pos)
  return pos_;
}
inline void StartTrialGateReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.StartTrialGateReq.pos)
}

// required uint32 gateid = 2;
inline bool StartTrialGateReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartTrialGateReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartTrialGateReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartTrialGateReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 StartTrialGateReq::gateid() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.StartTrialGateReq.gateid)
  return gateid_;
}
inline void StartTrialGateReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.StartTrialGateReq.gateid)
}

// repeated uint32 heros = 3;
inline int StartTrialGateReq::heros_size() const {
  return heros_.size();
}
inline void StartTrialGateReq::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 StartTrialGateReq::heros(int index) const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.StartTrialGateReq.heros)
  return heros_.Get(index);
}
inline void StartTrialGateReq::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoModelTrial.StartTrialGateReq.heros)
}
inline void StartTrialGateReq::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoModelTrial.StartTrialGateReq.heros)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StartTrialGateReq::heros() const {
  // @@protoc_insertion_point(field_list:ProtoModelTrial.StartTrialGateReq.heros)
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StartTrialGateReq::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:ProtoModelTrial.StartTrialGateReq.heros)
  return &heros_;
}

// -------------------------------------------------------------------

// StartTrialGateResp

// required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
inline bool StartTrialGateResp::has_modeltrial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartTrialGateResp::set_has_modeltrial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartTrialGateResp::clear_has_modeltrial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartTrialGateResp::clear_modeltrial() {
  if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
  clear_has_modeltrial();
}
inline const ::ProtoModelTrial::ModelTrialCPP& StartTrialGateResp::modeltrial() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.StartTrialGateResp.modeltrial)
  return modeltrial_ != NULL ? *modeltrial_ : *default_instance_->modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* StartTrialGateResp::mutable_modeltrial() {
  set_has_modeltrial();
  if (modeltrial_ == NULL) modeltrial_ = new ::ProtoModelTrial::ModelTrialCPP;
  // @@protoc_insertion_point(field_mutable:ProtoModelTrial.StartTrialGateResp.modeltrial)
  return modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* StartTrialGateResp::release_modeltrial() {
  clear_has_modeltrial();
  ::ProtoModelTrial::ModelTrialCPP* temp = modeltrial_;
  modeltrial_ = NULL;
  return temp;
}
inline void StartTrialGateResp::set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial) {
  delete modeltrial_;
  modeltrial_ = modeltrial;
  if (modeltrial) {
    set_has_modeltrial();
  } else {
    clear_has_modeltrial();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoModelTrial.StartTrialGateResp.modeltrial)
}

// -------------------------------------------------------------------

// PushTrialRewardReq

// required bool isfirst = 1;
inline bool PushTrialRewardReq::has_isfirst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushTrialRewardReq::set_has_isfirst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushTrialRewardReq::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushTrialRewardReq::clear_isfirst() {
  isfirst_ = false;
  clear_has_isfirst();
}
inline bool PushTrialRewardReq::isfirst() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.PushTrialRewardReq.isfirst)
  return isfirst_;
}
inline void PushTrialRewardReq::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:ProtoModelTrial.PushTrialRewardReq.isfirst)
}

// required .User.RewardBagInfo reward = 2;
inline bool PushTrialRewardReq::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushTrialRewardReq::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushTrialRewardReq::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushTrialRewardReq::clear_reward() {
  if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
  clear_has_reward();
}
inline const ::User::RewardBagInfo& PushTrialRewardReq::reward() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.PushTrialRewardReq.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::User::RewardBagInfo* PushTrialRewardReq::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::User::RewardBagInfo;
  // @@protoc_insertion_point(field_mutable:ProtoModelTrial.PushTrialRewardReq.reward)
  return reward_;
}
inline ::User::RewardBagInfo* PushTrialRewardReq::release_reward() {
  clear_has_reward();
  ::User::RewardBagInfo* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void PushTrialRewardReq::set_allocated_reward(::User::RewardBagInfo* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoModelTrial.PushTrialRewardReq.reward)
}

// optional .ProtoModelTrial.ModelTrialCPP modeltrial = 3;
inline bool PushTrialRewardReq::has_modeltrial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushTrialRewardReq::set_has_modeltrial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushTrialRewardReq::clear_has_modeltrial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushTrialRewardReq::clear_modeltrial() {
  if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
  clear_has_modeltrial();
}
inline const ::ProtoModelTrial::ModelTrialCPP& PushTrialRewardReq::modeltrial() const {
  // @@protoc_insertion_point(field_get:ProtoModelTrial.PushTrialRewardReq.modeltrial)
  return modeltrial_ != NULL ? *modeltrial_ : *default_instance_->modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* PushTrialRewardReq::mutable_modeltrial() {
  set_has_modeltrial();
  if (modeltrial_ == NULL) modeltrial_ = new ::ProtoModelTrial::ModelTrialCPP;
  // @@protoc_insertion_point(field_mutable:ProtoModelTrial.PushTrialRewardReq.modeltrial)
  return modeltrial_;
}
inline ::ProtoModelTrial::ModelTrialCPP* PushTrialRewardReq::release_modeltrial() {
  clear_has_modeltrial();
  ::ProtoModelTrial::ModelTrialCPP* temp = modeltrial_;
  modeltrial_ = NULL;
  return temp;
}
inline void PushTrialRewardReq::set_allocated_modeltrial(::ProtoModelTrial::ModelTrialCPP* modeltrial) {
  delete modeltrial_;
  modeltrial_ = modeltrial;
  if (modeltrial) {
    set_has_modeltrial();
  } else {
    clear_has_modeltrial();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoModelTrial.PushTrialRewardReq.modeltrial)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoModelTrial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoModelTrial_2eproto__INCLUDED
