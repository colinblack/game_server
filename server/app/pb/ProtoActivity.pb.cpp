// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoActivity {

namespace {

const ::google::protobuf::Descriptor* LimitShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopBuyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopBuyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopUserInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopUserInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBackInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBackInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBackInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBackInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBackRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBackRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBackRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBackRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivityRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivityInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivityInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivityRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivityRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldTombItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldTombItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldOnceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldOnceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldAllReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldAllReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldResetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldResetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldSwitchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldSwitchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountBuyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountBuyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenLittleChargeWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenLittleChargeWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenLittleChargeWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenLittleChargeWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LittleChargeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LittleChargeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LittleChargeRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LittleChargeRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenEnlivenKillWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenEnlivenKillWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenEnlivenKillWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenEnlivenKillWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveDailyKillRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveDailyKillRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveDailyKillRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveDailyKillRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellComponentCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellComponentCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSellComponentWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSellComponentWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSellComponentWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSellComponentWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyComponentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyComponentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyComponentResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyComponentResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoActivity_2eproto() {
  protobuf_AddDesc_ProtoActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoActivity.proto");
  GOOGLE_CHECK(file != NULL);
  LimitShopItem_descriptor_ = file->message_type(0);
  static const int LimitShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopItem, buy_cnt_),
  };
  LimitShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopItem_descriptor_,
      LimitShopItem::default_instance_,
      LimitShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopItem));
  LimitShopBuyReq_descriptor_ = file->message_type(1);
  static const int LimitShopBuyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyReq, id_),
  };
  LimitShopBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopBuyReq_descriptor_,
      LimitShopBuyReq::default_instance_,
      LimitShopBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopBuyReq));
  LimitShopBuyResp_descriptor_ = file->message_type(2);
  static const int LimitShopBuyResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyResp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyResp, buy_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyResp, equip_),
  };
  LimitShopBuyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopBuyResp_descriptor_,
      LimitShopBuyResp::default_instance_,
      LimitShopBuyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopBuyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopBuyResp));
  LimitShopUserInfoReq_descriptor_ = file->message_type(3);
  static const int LimitShopUserInfoReq_offsets_[1] = {
  };
  LimitShopUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopUserInfoReq_descriptor_,
      LimitShopUserInfoReq::default_instance_,
      LimitShopUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopUserInfoReq));
  LimitShopUserInfoResp_descriptor_ = file->message_type(4);
  static const int LimitShopUserInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopUserInfoResp, items_),
  };
  LimitShopUserInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopUserInfoResp_descriptor_,
      LimitShopUserInfoResp::default_instance_,
      LimitShopUserInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopUserInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopUserInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopUserInfoResp));
  CashBackItem_descriptor_ = file->message_type(5);
  static const int CashBackItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, is_get_reward_),
  };
  CashBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBackItem_descriptor_,
      CashBackItem::default_instance_,
      CashBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBackItem));
  CashBackInfoReq_descriptor_ = file->message_type(6);
  static const int CashBackInfoReq_offsets_[1] = {
  };
  CashBackInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBackInfoReq_descriptor_,
      CashBackInfoReq::default_instance_,
      CashBackInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBackInfoReq));
  CashBackInfoResp_descriptor_ = file->message_type(7);
  static const int CashBackInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackInfoResp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackInfoResp, total_recharge_),
  };
  CashBackInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBackInfoResp_descriptor_,
      CashBackInfoResp::default_instance_,
      CashBackInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBackInfoResp));
  CashBackRewardReq_descriptor_ = file->message_type(8);
  static const int CashBackRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardReq, id_),
  };
  CashBackRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBackRewardReq_descriptor_,
      CashBackRewardReq::default_instance_,
      CashBackRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBackRewardReq));
  CashBackRewardResp_descriptor_ = file->message_type(9);
  static const int CashBackRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardResp, reward_),
  };
  CashBackRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBackRewardResp_descriptor_,
      CashBackRewardResp::default_instance_,
      CashBackRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBackRewardResp));
  PassActivityItem_descriptor_ = file->message_type(10);
  static const int PassActivityItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, is_get_reward_),
  };
  PassActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityItem_descriptor_,
      PassActivityItem::default_instance_,
      PassActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityItem));
  PassActivityRecord_descriptor_ = file->message_type(11);
  static const int PassActivityRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRecord, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRecord, cash_),
  };
  PassActivityRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityRecord_descriptor_,
      PassActivityRecord::default_instance_,
      PassActivityRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityRecord));
  PassActivityInfoReq_descriptor_ = file->message_type(12);
  static const int PassActivityInfoReq_offsets_[1] = {
  };
  PassActivityInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityInfoReq_descriptor_,
      PassActivityInfoReq::default_instance_,
      PassActivityInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityInfoReq));
  PassActivityInfoResp_descriptor_ = file->message_type(13);
  static const int PassActivityInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityInfoResp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityInfoResp, records_),
  };
  PassActivityInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityInfoResp_descriptor_,
      PassActivityInfoResp::default_instance_,
      PassActivityInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityInfoResp));
  PassActivityRewardReq_descriptor_ = file->message_type(14);
  static const int PassActivityRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardReq, id_),
  };
  PassActivityRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityRewardReq_descriptor_,
      PassActivityRewardReq::default_instance_,
      PassActivityRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityRewardReq));
  PassActivityRewardResp_descriptor_ = file->message_type(15);
  static const int PassActivityRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardResp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardResp, reward_),
  };
  PassActivityRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityRewardResp_descriptor_,
      PassActivityRewardResp::default_instance_,
      PassActivityRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityRewardResp));
  SmeltItem_descriptor_ = file->message_type(16);
  static const int SmeltItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, reward_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, yet_cnt_),
  };
  SmeltItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltItem_descriptor_,
      SmeltItem::default_instance_,
      SmeltItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltItem));
  SmeltInfoReq_descriptor_ = file->message_type(17);
  static const int SmeltInfoReq_offsets_[1] = {
  };
  SmeltInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltInfoReq_descriptor_,
      SmeltInfoReq::default_instance_,
      SmeltInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltInfoReq));
  SmeltInfoResp_descriptor_ = file->message_type(18);
  static const int SmeltInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltInfoResp, total_smelt_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltInfoResp, items_),
  };
  SmeltInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltInfoResp_descriptor_,
      SmeltInfoResp::default_instance_,
      SmeltInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltInfoResp));
  SmeltRewardReq_descriptor_ = file->message_type(19);
  static const int SmeltRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardReq, id_),
  };
  SmeltRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltRewardReq_descriptor_,
      SmeltRewardReq::default_instance_,
      SmeltRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltRewardReq));
  SmeltRewardResp_descriptor_ = file->message_type(20);
  static const int SmeltRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardResp, equip_),
  };
  SmeltRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltRewardResp_descriptor_,
      SmeltRewardResp::default_instance_,
      SmeltRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltRewardResp));
  TouchGoldTombItem_descriptor_ = file->message_type(21);
  static const int TouchGoldTombItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldTombItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldTombItem, is_locked_),
  };
  TouchGoldTombItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldTombItem_descriptor_,
      TouchGoldTombItem::default_instance_,
      TouchGoldTombItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldTombItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldTombItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldTombItem));
  TouchGoldInfo_descriptor_ = file->message_type(22);
  static const int TouchGoldInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, tombs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, total_touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, total_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, surplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, cur_tomb_id_),
  };
  TouchGoldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldInfo_descriptor_,
      TouchGoldInfo::default_instance_,
      TouchGoldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldInfo));
  TouchGoldInfoReq_descriptor_ = file->message_type(23);
  static const int TouchGoldInfoReq_offsets_[1] = {
  };
  TouchGoldInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldInfoReq_descriptor_,
      TouchGoldInfoReq::default_instance_,
      TouchGoldInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldInfoReq));
  TouchGoldOnceReq_descriptor_ = file->message_type(24);
  static const int TouchGoldOnceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOnceReq, index_),
  };
  TouchGoldOnceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldOnceReq_descriptor_,
      TouchGoldOnceReq::default_instance_,
      TouchGoldOnceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOnceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOnceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldOnceReq));
  TouchGoldAllReq_descriptor_ = file->message_type(25);
  static const int TouchGoldAllReq_offsets_[1] = {
  };
  TouchGoldAllReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldAllReq_descriptor_,
      TouchGoldAllReq::default_instance_,
      TouchGoldAllReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldAllReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldAllReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldAllReq));
  TouchGoldUnlockReq_descriptor_ = file->message_type(26);
  static const int TouchGoldUnlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldUnlockReq, id_),
  };
  TouchGoldUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldUnlockReq_descriptor_,
      TouchGoldUnlockReq::default_instance_,
      TouchGoldUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldUnlockReq));
  TouchGoldResp_descriptor_ = file->message_type(27);
  static const int TouchGoldResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldResp, cash_),
  };
  TouchGoldResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldResp_descriptor_,
      TouchGoldResp::default_instance_,
      TouchGoldResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldResp));
  TouchGoldResetReq_descriptor_ = file->message_type(28);
  static const int TouchGoldResetReq_offsets_[1] = {
  };
  TouchGoldResetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldResetReq_descriptor_,
      TouchGoldResetReq::default_instance_,
      TouchGoldResetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldResetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldResetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldResetReq));
  TouchGoldSwitchReq_descriptor_ = file->message_type(29);
  static const int TouchGoldSwitchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldSwitchReq, id_),
  };
  TouchGoldSwitchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldSwitchReq_descriptor_,
      TouchGoldSwitchReq::default_instance_,
      TouchGoldSwitchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldSwitchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldSwitchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldSwitchReq));
  HugeDiscountItem_descriptor_ = file->message_type(30);
  static const int HugeDiscountItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, buy_cnt_),
  };
  HugeDiscountItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountItem_descriptor_,
      HugeDiscountItem::default_instance_,
      HugeDiscountItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountItem));
  HugeDiscountPage_descriptor_ = file->message_type(31);
  static const int HugeDiscountPage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, goods_),
  };
  HugeDiscountPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountPage_descriptor_,
      HugeDiscountPage::default_instance_,
      HugeDiscountPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountPage));
  HugeDiscountInfoReq_descriptor_ = file->message_type(32);
  static const int HugeDiscountInfoReq_offsets_[1] = {
  };
  HugeDiscountInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountInfoReq_descriptor_,
      HugeDiscountInfoReq::default_instance_,
      HugeDiscountInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountInfoReq));
  HugeDiscountInfoResp_descriptor_ = file->message_type(33);
  static const int HugeDiscountInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountInfoResp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountInfoResp, recharge_),
  };
  HugeDiscountInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountInfoResp_descriptor_,
      HugeDiscountInfoResp::default_instance_,
      HugeDiscountInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountInfoResp));
  HugeDiscountBuyReq_descriptor_ = file->message_type(34);
  static const int HugeDiscountBuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyReq, page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyReq, id_),
  };
  HugeDiscountBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountBuyReq_descriptor_,
      HugeDiscountBuyReq::default_instance_,
      HugeDiscountBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountBuyReq));
  HugeDiscountBuyResp_descriptor_ = file->message_type(35);
  static const int HugeDiscountBuyResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyResp, page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyResp, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyResp, equip_),
  };
  HugeDiscountBuyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountBuyResp_descriptor_,
      HugeDiscountBuyResp::default_instance_,
      HugeDiscountBuyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountBuyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountBuyResp));
  OpenLittleChargeWindowReq_descriptor_ = file->message_type(36);
  static const int OpenLittleChargeWindowReq_offsets_[1] = {
  };
  OpenLittleChargeWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenLittleChargeWindowReq_descriptor_,
      OpenLittleChargeWindowReq::default_instance_,
      OpenLittleChargeWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLittleChargeWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLittleChargeWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenLittleChargeWindowReq));
  OpenLittleChargeWindowResp_descriptor_ = file->message_type(37);
  static const int OpenLittleChargeWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLittleChargeWindowResp, cash_),
  };
  OpenLittleChargeWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenLittleChargeWindowResp_descriptor_,
      OpenLittleChargeWindowResp::default_instance_,
      OpenLittleChargeWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLittleChargeWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLittleChargeWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenLittleChargeWindowResp));
  LittleChargeRewardReq_descriptor_ = file->message_type(38);
  static const int LittleChargeRewardReq_offsets_[1] = {
  };
  LittleChargeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LittleChargeRewardReq_descriptor_,
      LittleChargeRewardReq::default_instance_,
      LittleChargeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleChargeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleChargeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LittleChargeRewardReq));
  LittleChargeRewardResp_descriptor_ = file->message_type(39);
  static const int LittleChargeRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleChargeRewardResp, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleChargeRewardResp, equip_),
  };
  LittleChargeRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LittleChargeRewardResp_descriptor_,
      LittleChargeRewardResp::default_instance_,
      LittleChargeRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleChargeRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleChargeRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LittleChargeRewardResp));
  OpenEnlivenKillWindowReq_descriptor_ = file->message_type(40);
  static const int OpenEnlivenKillWindowReq_offsets_[1] = {
  };
  OpenEnlivenKillWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenEnlivenKillWindowReq_descriptor_,
      OpenEnlivenKillWindowReq::default_instance_,
      OpenEnlivenKillWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenEnlivenKillWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenEnlivenKillWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenEnlivenKillWindowReq));
  OpenEnlivenKillWindowResp_descriptor_ = file->message_type(41);
  static const int OpenEnlivenKillWindowResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenEnlivenKillWindowResp, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenEnlivenKillWindowResp, shadow_),
  };
  OpenEnlivenKillWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenEnlivenKillWindowResp_descriptor_,
      OpenEnlivenKillWindowResp::default_instance_,
      OpenEnlivenKillWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenEnlivenKillWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenEnlivenKillWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenEnlivenKillWindowResp));
  ReceiveDailyKillRewardReq_descriptor_ = file->message_type(42);
  static const int ReceiveDailyKillRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardReq, index_),
  };
  ReceiveDailyKillRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveDailyKillRewardReq_descriptor_,
      ReceiveDailyKillRewardReq::default_instance_,
      ReceiveDailyKillRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveDailyKillRewardReq));
  ReceiveDailyKillRewardResp_descriptor_ = file->message_type(43);
  static const int ReceiveDailyKillRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardResp, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardResp, reward_),
  };
  ReceiveDailyKillRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveDailyKillRewardResp_descriptor_,
      ReceiveDailyKillRewardResp::default_instance_,
      ReceiveDailyKillRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveDailyKillRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveDailyKillRewardResp));
  SellComponentCPP_descriptor_ = file->message_type(44);
  static const int SellComponentCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellComponentCPP, num1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellComponentCPP, num2_),
  };
  SellComponentCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellComponentCPP_descriptor_,
      SellComponentCPP::default_instance_,
      SellComponentCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellComponentCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellComponentCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellComponentCPP));
  OpenSellComponentWindowReq_descriptor_ = file->message_type(45);
  static const int OpenSellComponentWindowReq_offsets_[1] = {
  };
  OpenSellComponentWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSellComponentWindowReq_descriptor_,
      OpenSellComponentWindowReq::default_instance_,
      OpenSellComponentWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSellComponentWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSellComponentWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSellComponentWindowReq));
  OpenSellComponentWindowResp_descriptor_ = file->message_type(46);
  static const int OpenSellComponentWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSellComponentWindowResp, sellinfo_),
  };
  OpenSellComponentWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSellComponentWindowResp_descriptor_,
      OpenSellComponentWindowResp::default_instance_,
      OpenSellComponentWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSellComponentWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSellComponentWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSellComponentWindowResp));
  BuyComponentReq_descriptor_ = file->message_type(47);
  static const int BuyComponentReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentReq, index_),
  };
  BuyComponentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyComponentReq_descriptor_,
      BuyComponentReq::default_instance_,
      BuyComponentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyComponentReq));
  BuyComponentResp_descriptor_ = file->message_type(48);
  static const int BuyComponentResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentResp, sellinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentResp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentResp, index_),
  };
  BuyComponentResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyComponentResp_descriptor_,
      BuyComponentResp::default_instance_,
      BuyComponentResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyComponentResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyComponentResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopItem_descriptor_, &LimitShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopBuyReq_descriptor_, &LimitShopBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopBuyResp_descriptor_, &LimitShopBuyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopUserInfoReq_descriptor_, &LimitShopUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopUserInfoResp_descriptor_, &LimitShopUserInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBackItem_descriptor_, &CashBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBackInfoReq_descriptor_, &CashBackInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBackInfoResp_descriptor_, &CashBackInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBackRewardReq_descriptor_, &CashBackRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBackRewardResp_descriptor_, &CashBackRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityItem_descriptor_, &PassActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityRecord_descriptor_, &PassActivityRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityInfoReq_descriptor_, &PassActivityInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityInfoResp_descriptor_, &PassActivityInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityRewardReq_descriptor_, &PassActivityRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityRewardResp_descriptor_, &PassActivityRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltItem_descriptor_, &SmeltItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltInfoReq_descriptor_, &SmeltInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltInfoResp_descriptor_, &SmeltInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltRewardReq_descriptor_, &SmeltRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltRewardResp_descriptor_, &SmeltRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldTombItem_descriptor_, &TouchGoldTombItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldInfo_descriptor_, &TouchGoldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldInfoReq_descriptor_, &TouchGoldInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldOnceReq_descriptor_, &TouchGoldOnceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldAllReq_descriptor_, &TouchGoldAllReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldUnlockReq_descriptor_, &TouchGoldUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldResp_descriptor_, &TouchGoldResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldResetReq_descriptor_, &TouchGoldResetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldSwitchReq_descriptor_, &TouchGoldSwitchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountItem_descriptor_, &HugeDiscountItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountPage_descriptor_, &HugeDiscountPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountInfoReq_descriptor_, &HugeDiscountInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountInfoResp_descriptor_, &HugeDiscountInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountBuyReq_descriptor_, &HugeDiscountBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountBuyResp_descriptor_, &HugeDiscountBuyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenLittleChargeWindowReq_descriptor_, &OpenLittleChargeWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenLittleChargeWindowResp_descriptor_, &OpenLittleChargeWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LittleChargeRewardReq_descriptor_, &LittleChargeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LittleChargeRewardResp_descriptor_, &LittleChargeRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenEnlivenKillWindowReq_descriptor_, &OpenEnlivenKillWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenEnlivenKillWindowResp_descriptor_, &OpenEnlivenKillWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveDailyKillRewardReq_descriptor_, &ReceiveDailyKillRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveDailyKillRewardResp_descriptor_, &ReceiveDailyKillRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellComponentCPP_descriptor_, &SellComponentCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSellComponentWindowReq_descriptor_, &OpenSellComponentWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSellComponentWindowResp_descriptor_, &OpenSellComponentWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyComponentReq_descriptor_, &BuyComponentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyComponentResp_descriptor_, &BuyComponentResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoActivity_2eproto() {
  delete LimitShopItem::default_instance_;
  delete LimitShopItem_reflection_;
  delete LimitShopBuyReq::default_instance_;
  delete LimitShopBuyReq_reflection_;
  delete LimitShopBuyResp::default_instance_;
  delete LimitShopBuyResp_reflection_;
  delete LimitShopUserInfoReq::default_instance_;
  delete LimitShopUserInfoReq_reflection_;
  delete LimitShopUserInfoResp::default_instance_;
  delete LimitShopUserInfoResp_reflection_;
  delete CashBackItem::default_instance_;
  delete CashBackItem_reflection_;
  delete CashBackInfoReq::default_instance_;
  delete CashBackInfoReq_reflection_;
  delete CashBackInfoResp::default_instance_;
  delete CashBackInfoResp_reflection_;
  delete CashBackRewardReq::default_instance_;
  delete CashBackRewardReq_reflection_;
  delete CashBackRewardResp::default_instance_;
  delete CashBackRewardResp_reflection_;
  delete PassActivityItem::default_instance_;
  delete PassActivityItem_reflection_;
  delete PassActivityRecord::default_instance_;
  delete PassActivityRecord_reflection_;
  delete PassActivityInfoReq::default_instance_;
  delete PassActivityInfoReq_reflection_;
  delete PassActivityInfoResp::default_instance_;
  delete PassActivityInfoResp_reflection_;
  delete PassActivityRewardReq::default_instance_;
  delete PassActivityRewardReq_reflection_;
  delete PassActivityRewardResp::default_instance_;
  delete PassActivityRewardResp_reflection_;
  delete SmeltItem::default_instance_;
  delete SmeltItem_reflection_;
  delete SmeltInfoReq::default_instance_;
  delete SmeltInfoReq_reflection_;
  delete SmeltInfoResp::default_instance_;
  delete SmeltInfoResp_reflection_;
  delete SmeltRewardReq::default_instance_;
  delete SmeltRewardReq_reflection_;
  delete SmeltRewardResp::default_instance_;
  delete SmeltRewardResp_reflection_;
  delete TouchGoldTombItem::default_instance_;
  delete TouchGoldTombItem_reflection_;
  delete TouchGoldInfo::default_instance_;
  delete TouchGoldInfo_reflection_;
  delete TouchGoldInfoReq::default_instance_;
  delete TouchGoldInfoReq_reflection_;
  delete TouchGoldOnceReq::default_instance_;
  delete TouchGoldOnceReq_reflection_;
  delete TouchGoldAllReq::default_instance_;
  delete TouchGoldAllReq_reflection_;
  delete TouchGoldUnlockReq::default_instance_;
  delete TouchGoldUnlockReq_reflection_;
  delete TouchGoldResp::default_instance_;
  delete TouchGoldResp_reflection_;
  delete TouchGoldResetReq::default_instance_;
  delete TouchGoldResetReq_reflection_;
  delete TouchGoldSwitchReq::default_instance_;
  delete TouchGoldSwitchReq_reflection_;
  delete HugeDiscountItem::default_instance_;
  delete HugeDiscountItem_reflection_;
  delete HugeDiscountPage::default_instance_;
  delete HugeDiscountPage_reflection_;
  delete HugeDiscountInfoReq::default_instance_;
  delete HugeDiscountInfoReq_reflection_;
  delete HugeDiscountInfoResp::default_instance_;
  delete HugeDiscountInfoResp_reflection_;
  delete HugeDiscountBuyReq::default_instance_;
  delete HugeDiscountBuyReq_reflection_;
  delete HugeDiscountBuyResp::default_instance_;
  delete HugeDiscountBuyResp_reflection_;
  delete OpenLittleChargeWindowReq::default_instance_;
  delete OpenLittleChargeWindowReq_reflection_;
  delete OpenLittleChargeWindowResp::default_instance_;
  delete OpenLittleChargeWindowResp_reflection_;
  delete LittleChargeRewardReq::default_instance_;
  delete LittleChargeRewardReq_reflection_;
  delete LittleChargeRewardResp::default_instance_;
  delete LittleChargeRewardResp_reflection_;
  delete OpenEnlivenKillWindowReq::default_instance_;
  delete OpenEnlivenKillWindowReq_reflection_;
  delete OpenEnlivenKillWindowResp::default_instance_;
  delete OpenEnlivenKillWindowResp_reflection_;
  delete ReceiveDailyKillRewardReq::default_instance_;
  delete ReceiveDailyKillRewardReq_reflection_;
  delete ReceiveDailyKillRewardResp::default_instance_;
  delete ReceiveDailyKillRewardResp_reflection_;
  delete SellComponentCPP::default_instance_;
  delete SellComponentCPP_reflection_;
  delete OpenSellComponentWindowReq::default_instance_;
  delete OpenSellComponentWindowReq_reflection_;
  delete OpenSellComponentWindowResp::default_instance_;
  delete OpenSellComponentWindowResp_reflection_;
  delete BuyComponentReq::default_instance_;
  delete BuyComponentReq_reflection_;
  delete BuyComponentResp::default_instance_;
  delete BuyComponentResp_reflection_;
}

void protobuf_AddDesc_ProtoActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoActivity.proto\022\rProtoActivity\032\020Da"
    "taCommon.proto\032\nUser.proto\",\n\rLimitShopI"
    "tem\022\n\n\002id\030\001 \002(\r\022\017\n\007buy_cnt\030\002 \002(\r\"\035\n\017Limi"
    "tShopBuyReq\022\n\n\002id\030\001 \002(\r\"i\n\020LimitShopBuyR"
    "esp\022\n\n\002id\030\001 \002(\r\022\014\n\004cash\030\002 \002(\r\022\017\n\007buy_cnt"
    "\030\003 \002(\r\022*\n\005equip\030\004 \002(\0132\033.DataCommon.Equip"
    "mentAllCPP\"\026\n\024LimitShopUserInfoReq\"D\n\025Li"
    "mitShopUserInfoResp\022+\n\005items\030\001 \003(\0132\034.Pro"
    "toActivity.LimitShopItem\"1\n\014CashBackItem"
    "\022\n\n\002id\030\001 \002(\r\022\025\n\ris_get_reward\030\002 \002(\010\"\021\n\017C"
    "ashBackInfoReq\"V\n\020CashBackInfoResp\022*\n\005it"
    "ems\030\001 \003(\0132\033.ProtoActivity.CashBackItem\022\026"
    "\n\016total_recharge\030\002 \002(\r\"\037\n\021CashBackReward"
    "Req\022\n\n\002id\030\001 \002(\r\"p\n\022CashBackRewardResp\022)\n"
    "\004item\030\001 \002(\0132\033.ProtoActivity.CashBackItem"
    "\022/\n\006reward\030\002 \002(\0132\037.DataCommon.CommonBase"
    "RewardCPP\"5\n\020PassActivityItem\022\n\n\002id\030\001 \002("
    "\r\022\025\n\ris_get_reward\030\002 \002(\010\"A\n\022PassActivity"
    "Record\022\014\n\004name\030\001 \002(\014\022\017\n\007pass_id\030\002 \002(\r\022\014\n"
    "\004cash\030\003 \002(\r\"\025\n\023PassActivityInfoReq\"z\n\024Pa"
    "ssActivityInfoResp\022.\n\005items\030\001 \003(\0132\037.Prot"
    "oActivity.PassActivityItem\0222\n\007records\030\002 "
    "\003(\0132!.ProtoActivity.PassActivityRecord\"#"
    "\n\025PassActivityRewardReq\022\n\n\002id\030\001 \002(\r\"y\n\026P"
    "assActivityRewardResp\022.\n\005items\030\001 \002(\0132\037.P"
    "rotoActivity.PassActivityItem\022/\n\006reward\030"
    "\002 \002(\0132\037.DataCommon.CommonBaseRewardCPP\"<"
    "\n\tSmeltItem\022\n\n\002id\030\001 \002(\r\022\022\n\nreward_cnt\030\002 "
    "\002(\r\022\017\n\007yet_cnt\030\003 \002(\r\"\016\n\014SmeltInfoReq\"Q\n\r"
    "SmeltInfoResp\022\027\n\017total_smelt_cnt\030\001 \002(\r\022\'"
    "\n\005items\030\002 \003(\0132\030.ProtoActivity.SmeltItem\""
    "\034\n\016SmeltRewardReq\022\n\n\002id\030\001 \002(\r\"e\n\017SmeltRe"
    "wardResp\022&\n\004item\030\001 \002(\0132\030.ProtoActivity.S"
    "meltItem\022*\n\005equip\030\002 \002(\0132\033.DataCommon.Equ"
    "ipmentAllCPP\"2\n\021TouchGoldTombItem\022\n\n\002id\030"
    "\001 \002(\r\022\021\n\tis_locked\030\002 \002(\010\"\260\001\n\rTouchGoldIn"
    "fo\022/\n\005tombs\030\001 \003(\0132 .ProtoActivity.TouchG"
    "oldTombItem\022\023\n\013total_touch\030\002 \002(\r\022\023\n\013tota"
    "l_limit\030\003 \002(\r\022\017\n\007surplus\030\004 \002(\r\022\013\n\003out\030\005 "
    "\003(\r\022\021\n\tcomponent\030\006 \002(\r\022\023\n\013cur_tomb_id\030\007 "
    "\002(\r\"\022\n\020TouchGoldInfoReq\"!\n\020TouchGoldOnce"
    "Req\022\r\n\005index\030\001 \002(\r\"\021\n\017TouchGoldAllReq\" \n"
    "\022TouchGoldUnlockReq\022\n\n\002id\030\001 \002(\r\"I\n\rTouch"
    "GoldResp\022*\n\004info\030\001 \002(\0132\034.ProtoActivity.T"
    "ouchGoldInfo\022\014\n\004cash\030\002 \002(\r\"\023\n\021TouchGoldR"
    "esetReq\" \n\022TouchGoldSwitchReq\022\n\n\002id\030\001 \002("
    "\r\"/\n\020HugeDiscountItem\022\n\n\002id\030\001 \002(\r\022\017\n\007buy"
    "_cnt\030\002 \002(\r\"S\n\020HugeDiscountPage\022\017\n\007page_i"
    "d\030\001 \002(\r\022.\n\005goods\030\002 \003(\0132\037.ProtoActivity.H"
    "ugeDiscountItem\"\025\n\023HugeDiscountInfoReq\"X"
    "\n\024HugeDiscountInfoResp\022.\n\005items\030\001 \003(\0132\037."
    "ProtoActivity.HugeDiscountPage\022\020\n\010rechar"
    "ge\030\002 \002(\r\"1\n\022HugeDiscountBuyReq\022\017\n\007page_i"
    "d\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\"\224\001\n\023HugeDiscountBuyR"
    "esp\022\017\n\007page_id\030\001 \002(\r\0222\n\titem_info\030\002 \002(\0132"
    "\037.ProtoActivity.HugeDiscountItem\022\014\n\004cash"
    "\030\003 \002(\r\022*\n\005equip\030\004 \002(\0132\033.DataCommon.Equip"
    "mentAllCPP\"\033\n\031OpenLittleChargeWindowReq\""
    "*\n\032OpenLittleChargeWindowResp\022\014\n\004cash\030\001 "
    "\002(\r\"\027\n\025LittleChargeRewardReq\"T\n\026LittleCh"
    "argeRewardResp\022\016\n\006shadow\030\001 \002(\r\022*\n\005equip\030"
    "\002 \002(\0132\033.DataCommon.EquipmentAllCPP\"\032\n\030Op"
    "enEnlivenKillWindowReq\"9\n\031OpenEnlivenKil"
    "lWindowResp\022\014\n\004kill\030\001 \002(\r\022\016\n\006shadow\030\002 \002("
    "\r\"*\n\031ReceiveDailyKillRewardReq\022\r\n\005index\030"
    "\001 \002(\r\"Q\n\032ReceiveDailyKillRewardResp\022\016\n\006s"
    "hadow\030\001 \002(\r\022#\n\006reward\030\002 \002(\0132\023.User.Rewar"
    "dBagInfo\".\n\020SellComponentCPP\022\014\n\004num1\030\001 \002"
    "(\r\022\014\n\004num2\030\002 \002(\r\"\034\n\032OpenSellComponentWin"
    "dowReq\"P\n\033OpenSellComponentWindowResp\0221\n"
    "\010sellinfo\030\001 \002(\0132\037.ProtoActivity.SellComp"
    "onentCPP\" \n\017BuyComponentReq\022\r\n\005index\030\001 \002"
    "(\r\"\207\001\n\020BuyComponentResp\0221\n\010sellinfo\030\001 \002("
    "\0132\037.ProtoActivity.SellComponentCPP\022#\n\006re"
    "ward\030\002 \002(\0132\023.User.RewardBagInfo\022\014\n\004cash\030"
    "\003 \002(\r\022\r\n\005index\030\004 \002(\r", 3020);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoActivity.proto", &protobuf_RegisterTypes);
  LimitShopItem::default_instance_ = new LimitShopItem();
  LimitShopBuyReq::default_instance_ = new LimitShopBuyReq();
  LimitShopBuyResp::default_instance_ = new LimitShopBuyResp();
  LimitShopUserInfoReq::default_instance_ = new LimitShopUserInfoReq();
  LimitShopUserInfoResp::default_instance_ = new LimitShopUserInfoResp();
  CashBackItem::default_instance_ = new CashBackItem();
  CashBackInfoReq::default_instance_ = new CashBackInfoReq();
  CashBackInfoResp::default_instance_ = new CashBackInfoResp();
  CashBackRewardReq::default_instance_ = new CashBackRewardReq();
  CashBackRewardResp::default_instance_ = new CashBackRewardResp();
  PassActivityItem::default_instance_ = new PassActivityItem();
  PassActivityRecord::default_instance_ = new PassActivityRecord();
  PassActivityInfoReq::default_instance_ = new PassActivityInfoReq();
  PassActivityInfoResp::default_instance_ = new PassActivityInfoResp();
  PassActivityRewardReq::default_instance_ = new PassActivityRewardReq();
  PassActivityRewardResp::default_instance_ = new PassActivityRewardResp();
  SmeltItem::default_instance_ = new SmeltItem();
  SmeltInfoReq::default_instance_ = new SmeltInfoReq();
  SmeltInfoResp::default_instance_ = new SmeltInfoResp();
  SmeltRewardReq::default_instance_ = new SmeltRewardReq();
  SmeltRewardResp::default_instance_ = new SmeltRewardResp();
  TouchGoldTombItem::default_instance_ = new TouchGoldTombItem();
  TouchGoldInfo::default_instance_ = new TouchGoldInfo();
  TouchGoldInfoReq::default_instance_ = new TouchGoldInfoReq();
  TouchGoldOnceReq::default_instance_ = new TouchGoldOnceReq();
  TouchGoldAllReq::default_instance_ = new TouchGoldAllReq();
  TouchGoldUnlockReq::default_instance_ = new TouchGoldUnlockReq();
  TouchGoldResp::default_instance_ = new TouchGoldResp();
  TouchGoldResetReq::default_instance_ = new TouchGoldResetReq();
  TouchGoldSwitchReq::default_instance_ = new TouchGoldSwitchReq();
  HugeDiscountItem::default_instance_ = new HugeDiscountItem();
  HugeDiscountPage::default_instance_ = new HugeDiscountPage();
  HugeDiscountInfoReq::default_instance_ = new HugeDiscountInfoReq();
  HugeDiscountInfoResp::default_instance_ = new HugeDiscountInfoResp();
  HugeDiscountBuyReq::default_instance_ = new HugeDiscountBuyReq();
  HugeDiscountBuyResp::default_instance_ = new HugeDiscountBuyResp();
  OpenLittleChargeWindowReq::default_instance_ = new OpenLittleChargeWindowReq();
  OpenLittleChargeWindowResp::default_instance_ = new OpenLittleChargeWindowResp();
  LittleChargeRewardReq::default_instance_ = new LittleChargeRewardReq();
  LittleChargeRewardResp::default_instance_ = new LittleChargeRewardResp();
  OpenEnlivenKillWindowReq::default_instance_ = new OpenEnlivenKillWindowReq();
  OpenEnlivenKillWindowResp::default_instance_ = new OpenEnlivenKillWindowResp();
  ReceiveDailyKillRewardReq::default_instance_ = new ReceiveDailyKillRewardReq();
  ReceiveDailyKillRewardResp::default_instance_ = new ReceiveDailyKillRewardResp();
  SellComponentCPP::default_instance_ = new SellComponentCPP();
  OpenSellComponentWindowReq::default_instance_ = new OpenSellComponentWindowReq();
  OpenSellComponentWindowResp::default_instance_ = new OpenSellComponentWindowResp();
  BuyComponentReq::default_instance_ = new BuyComponentReq();
  BuyComponentResp::default_instance_ = new BuyComponentResp();
  LimitShopItem::default_instance_->InitAsDefaultInstance();
  LimitShopBuyReq::default_instance_->InitAsDefaultInstance();
  LimitShopBuyResp::default_instance_->InitAsDefaultInstance();
  LimitShopUserInfoReq::default_instance_->InitAsDefaultInstance();
  LimitShopUserInfoResp::default_instance_->InitAsDefaultInstance();
  CashBackItem::default_instance_->InitAsDefaultInstance();
  CashBackInfoReq::default_instance_->InitAsDefaultInstance();
  CashBackInfoResp::default_instance_->InitAsDefaultInstance();
  CashBackRewardReq::default_instance_->InitAsDefaultInstance();
  CashBackRewardResp::default_instance_->InitAsDefaultInstance();
  PassActivityItem::default_instance_->InitAsDefaultInstance();
  PassActivityRecord::default_instance_->InitAsDefaultInstance();
  PassActivityInfoReq::default_instance_->InitAsDefaultInstance();
  PassActivityInfoResp::default_instance_->InitAsDefaultInstance();
  PassActivityRewardReq::default_instance_->InitAsDefaultInstance();
  PassActivityRewardResp::default_instance_->InitAsDefaultInstance();
  SmeltItem::default_instance_->InitAsDefaultInstance();
  SmeltInfoReq::default_instance_->InitAsDefaultInstance();
  SmeltInfoResp::default_instance_->InitAsDefaultInstance();
  SmeltRewardReq::default_instance_->InitAsDefaultInstance();
  SmeltRewardResp::default_instance_->InitAsDefaultInstance();
  TouchGoldTombItem::default_instance_->InitAsDefaultInstance();
  TouchGoldInfo::default_instance_->InitAsDefaultInstance();
  TouchGoldInfoReq::default_instance_->InitAsDefaultInstance();
  TouchGoldOnceReq::default_instance_->InitAsDefaultInstance();
  TouchGoldAllReq::default_instance_->InitAsDefaultInstance();
  TouchGoldUnlockReq::default_instance_->InitAsDefaultInstance();
  TouchGoldResp::default_instance_->InitAsDefaultInstance();
  TouchGoldResetReq::default_instance_->InitAsDefaultInstance();
  TouchGoldSwitchReq::default_instance_->InitAsDefaultInstance();
  HugeDiscountItem::default_instance_->InitAsDefaultInstance();
  HugeDiscountPage::default_instance_->InitAsDefaultInstance();
  HugeDiscountInfoReq::default_instance_->InitAsDefaultInstance();
  HugeDiscountInfoResp::default_instance_->InitAsDefaultInstance();
  HugeDiscountBuyReq::default_instance_->InitAsDefaultInstance();
  HugeDiscountBuyResp::default_instance_->InitAsDefaultInstance();
  OpenLittleChargeWindowReq::default_instance_->InitAsDefaultInstance();
  OpenLittleChargeWindowResp::default_instance_->InitAsDefaultInstance();
  LittleChargeRewardReq::default_instance_->InitAsDefaultInstance();
  LittleChargeRewardResp::default_instance_->InitAsDefaultInstance();
  OpenEnlivenKillWindowReq::default_instance_->InitAsDefaultInstance();
  OpenEnlivenKillWindowResp::default_instance_->InitAsDefaultInstance();
  ReceiveDailyKillRewardReq::default_instance_->InitAsDefaultInstance();
  ReceiveDailyKillRewardResp::default_instance_->InitAsDefaultInstance();
  SellComponentCPP::default_instance_->InitAsDefaultInstance();
  OpenSellComponentWindowReq::default_instance_->InitAsDefaultInstance();
  OpenSellComponentWindowResp::default_instance_->InitAsDefaultInstance();
  BuyComponentReq::default_instance_->InitAsDefaultInstance();
  BuyComponentResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoActivity_2eproto {
  StaticDescriptorInitializer_ProtoActivity_2eproto() {
    protobuf_AddDesc_ProtoActivity_2eproto();
  }
} static_descriptor_initializer_ProtoActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LimitShopItem::kIdFieldNumber;
const int LimitShopItem::kBuyCntFieldNumber;
#endif  // !_MSC_VER

LimitShopItem::LimitShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LimitShopItem)
}

void LimitShopItem::InitAsDefaultInstance() {
}

LimitShopItem::LimitShopItem(const LimitShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LimitShopItem)
}

void LimitShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buy_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopItem::~LimitShopItem() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LimitShopItem)
  SharedDtor();
}

void LimitShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopItem_descriptor_;
}

const LimitShopItem& LimitShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LimitShopItem* LimitShopItem::default_instance_ = NULL;

LimitShopItem* LimitShopItem::New() const {
  return new LimitShopItem;
}

void LimitShopItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LimitShopItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buy_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LimitShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buy_cnt;
        break;
      }

      // required uint32 buy_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_buy_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cnt_)));
          set_has_buy_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LimitShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LimitShopItem)
  return false;
#undef DO_
}

void LimitShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LimitShopItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 buy_cnt = 2;
  if (has_buy_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LimitShopItem)
}

::google::protobuf::uint8* LimitShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LimitShopItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 buy_cnt = 2;
  if (has_buy_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LimitShopItem)
  return target;
}

int LimitShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 buy_cnt = 2;
    if (has_buy_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopItem::MergeFrom(const LimitShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_cnt()) {
      set_buy_cnt(from.buy_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopItem::CopyFrom(const LimitShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LimitShopItem::Swap(LimitShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_cnt_, other->buy_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopItem_descriptor_;
  metadata.reflection = LimitShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitShopBuyReq::kIdFieldNumber;
#endif  // !_MSC_VER

LimitShopBuyReq::LimitShopBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LimitShopBuyReq)
}

void LimitShopBuyReq::InitAsDefaultInstance() {
}

LimitShopBuyReq::LimitShopBuyReq(const LimitShopBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LimitShopBuyReq)
}

void LimitShopBuyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopBuyReq::~LimitShopBuyReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LimitShopBuyReq)
  SharedDtor();
}

void LimitShopBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitShopBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopBuyReq_descriptor_;
}

const LimitShopBuyReq& LimitShopBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LimitShopBuyReq* LimitShopBuyReq::default_instance_ = NULL;

LimitShopBuyReq* LimitShopBuyReq::New() const {
  return new LimitShopBuyReq;
}

void LimitShopBuyReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LimitShopBuyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LimitShopBuyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LimitShopBuyReq)
  return false;
#undef DO_
}

void LimitShopBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LimitShopBuyReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LimitShopBuyReq)
}

::google::protobuf::uint8* LimitShopBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LimitShopBuyReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LimitShopBuyReq)
  return target;
}

int LimitShopBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopBuyReq::MergeFrom(const LimitShopBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopBuyReq::CopyFrom(const LimitShopBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LimitShopBuyReq::Swap(LimitShopBuyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopBuyReq_descriptor_;
  metadata.reflection = LimitShopBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitShopBuyResp::kIdFieldNumber;
const int LimitShopBuyResp::kCashFieldNumber;
const int LimitShopBuyResp::kBuyCntFieldNumber;
const int LimitShopBuyResp::kEquipFieldNumber;
#endif  // !_MSC_VER

LimitShopBuyResp::LimitShopBuyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LimitShopBuyResp)
}

void LimitShopBuyResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
}

LimitShopBuyResp::LimitShopBuyResp(const LimitShopBuyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LimitShopBuyResp)
}

void LimitShopBuyResp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cash_ = 0u;
  buy_cnt_ = 0u;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopBuyResp::~LimitShopBuyResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LimitShopBuyResp)
  SharedDtor();
}

void LimitShopBuyResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void LimitShopBuyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopBuyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopBuyResp_descriptor_;
}

const LimitShopBuyResp& LimitShopBuyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LimitShopBuyResp* LimitShopBuyResp::default_instance_ = NULL;

LimitShopBuyResp* LimitShopBuyResp::New() const {
  return new LimitShopBuyResp;
}

void LimitShopBuyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LimitShopBuyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, cash_);
    buy_cnt_ = 0u;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentAllCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopBuyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LimitShopBuyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buy_cnt;
        break;
      }

      // required uint32 buy_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cnt_)));
          set_has_buy_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip;
        break;
      }

      // required .DataCommon.EquipmentAllCPP equip = 4;
      case 4: {
        if (tag == 34) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LimitShopBuyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LimitShopBuyResp)
  return false;
#undef DO_
}

void LimitShopBuyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LimitShopBuyResp)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  // required uint32 buy_cnt = 3;
  if (has_buy_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_cnt(), output);
  }

  // required .DataCommon.EquipmentAllCPP equip = 4;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LimitShopBuyResp)
}

::google::protobuf::uint8* LimitShopBuyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LimitShopBuyResp)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  // required uint32 buy_cnt = 3;
  if (has_buy_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_cnt(), target);
  }

  // required .DataCommon.EquipmentAllCPP equip = 4;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LimitShopBuyResp)
  return target;
}

int LimitShopBuyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 buy_cnt = 3;
    if (has_buy_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cnt());
    }

    // required .DataCommon.EquipmentAllCPP equip = 4;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopBuyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopBuyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopBuyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopBuyResp::MergeFrom(const LimitShopBuyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_buy_cnt()) {
      set_buy_cnt(from.buy_cnt());
    }
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopBuyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopBuyResp::CopyFrom(const LimitShopBuyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopBuyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void LimitShopBuyResp::Swap(LimitShopBuyResp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cash_, other->cash_);
    std::swap(buy_cnt_, other->buy_cnt_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopBuyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopBuyResp_descriptor_;
  metadata.reflection = LimitShopBuyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LimitShopUserInfoReq::LimitShopUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LimitShopUserInfoReq)
}

void LimitShopUserInfoReq::InitAsDefaultInstance() {
}

LimitShopUserInfoReq::LimitShopUserInfoReq(const LimitShopUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LimitShopUserInfoReq)
}

void LimitShopUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopUserInfoReq::~LimitShopUserInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LimitShopUserInfoReq)
  SharedDtor();
}

void LimitShopUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitShopUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopUserInfoReq_descriptor_;
}

const LimitShopUserInfoReq& LimitShopUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LimitShopUserInfoReq* LimitShopUserInfoReq::default_instance_ = NULL;

LimitShopUserInfoReq* LimitShopUserInfoReq::New() const {
  return new LimitShopUserInfoReq;
}

void LimitShopUserInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LimitShopUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LimitShopUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LimitShopUserInfoReq)
  return false;
#undef DO_
}

void LimitShopUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LimitShopUserInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LimitShopUserInfoReq)
}

::google::protobuf::uint8* LimitShopUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LimitShopUserInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LimitShopUserInfoReq)
  return target;
}

int LimitShopUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopUserInfoReq::MergeFrom(const LimitShopUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopUserInfoReq::CopyFrom(const LimitShopUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopUserInfoReq::IsInitialized() const {

  return true;
}

void LimitShopUserInfoReq::Swap(LimitShopUserInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopUserInfoReq_descriptor_;
  metadata.reflection = LimitShopUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitShopUserInfoResp::kItemsFieldNumber;
#endif  // !_MSC_VER

LimitShopUserInfoResp::LimitShopUserInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LimitShopUserInfoResp)
}

void LimitShopUserInfoResp::InitAsDefaultInstance() {
}

LimitShopUserInfoResp::LimitShopUserInfoResp(const LimitShopUserInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LimitShopUserInfoResp)
}

void LimitShopUserInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopUserInfoResp::~LimitShopUserInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LimitShopUserInfoResp)
  SharedDtor();
}

void LimitShopUserInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitShopUserInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopUserInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopUserInfoResp_descriptor_;
}

const LimitShopUserInfoResp& LimitShopUserInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LimitShopUserInfoResp* LimitShopUserInfoResp::default_instance_ = NULL;

LimitShopUserInfoResp* LimitShopUserInfoResp::New() const {
  return new LimitShopUserInfoResp;
}

void LimitShopUserInfoResp::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopUserInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LimitShopUserInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActivity.LimitShopItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LimitShopUserInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LimitShopUserInfoResp)
  return false;
#undef DO_
}

void LimitShopUserInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LimitShopUserInfoResp)
  // repeated .ProtoActivity.LimitShopItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LimitShopUserInfoResp)
}

::google::protobuf::uint8* LimitShopUserInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LimitShopUserInfoResp)
  // repeated .ProtoActivity.LimitShopItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LimitShopUserInfoResp)
  return target;
}

int LimitShopUserInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoActivity.LimitShopItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopUserInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopUserInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopUserInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopUserInfoResp::MergeFrom(const LimitShopUserInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopUserInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopUserInfoResp::CopyFrom(const LimitShopUserInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopUserInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void LimitShopUserInfoResp::Swap(LimitShopUserInfoResp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopUserInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopUserInfoResp_descriptor_;
  metadata.reflection = LimitShopUserInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashBackItem::kIdFieldNumber;
const int CashBackItem::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

CashBackItem::CashBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.CashBackItem)
}

void CashBackItem::InitAsDefaultInstance() {
}

CashBackItem::CashBackItem(const CashBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.CashBackItem)
}

void CashBackItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_get_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBackItem::~CashBackItem() {
  // @@protoc_insertion_point(destructor:ProtoActivity.CashBackItem)
  SharedDtor();
}

void CashBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBackItem_descriptor_;
}

const CashBackItem& CashBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

CashBackItem* CashBackItem::default_instance_ = NULL;

CashBackItem* CashBackItem::New() const {
  return new CashBackItem;
}

void CashBackItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CashBackItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, is_get_reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.CashBackItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_get_reward;
        break;
      }

      // required bool is_get_reward = 2;
      case 2: {
        if (tag == 16) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.CashBackItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.CashBackItem)
  return false;
#undef DO_
}

void CashBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.CashBackItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool is_get_reward = 2;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.CashBackItem)
}

::google::protobuf::uint8* CashBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.CashBackItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool is_get_reward = 2;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.CashBackItem)
  return target;
}

int CashBackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bool is_get_reward = 2;
    if (has_is_get_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBackItem::MergeFrom(const CashBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBackItem::CopyFrom(const CashBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CashBackItem::Swap(CashBackItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBackItem_descriptor_;
  metadata.reflection = CashBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CashBackInfoReq::CashBackInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.CashBackInfoReq)
}

void CashBackInfoReq::InitAsDefaultInstance() {
}

CashBackInfoReq::CashBackInfoReq(const CashBackInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.CashBackInfoReq)
}

void CashBackInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBackInfoReq::~CashBackInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.CashBackInfoReq)
  SharedDtor();
}

void CashBackInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashBackInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBackInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBackInfoReq_descriptor_;
}

const CashBackInfoReq& CashBackInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

CashBackInfoReq* CashBackInfoReq::default_instance_ = NULL;

CashBackInfoReq* CashBackInfoReq::New() const {
  return new CashBackInfoReq;
}

void CashBackInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBackInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.CashBackInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.CashBackInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.CashBackInfoReq)
  return false;
#undef DO_
}

void CashBackInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.CashBackInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.CashBackInfoReq)
}

::google::protobuf::uint8* CashBackInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.CashBackInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.CashBackInfoReq)
  return target;
}

int CashBackInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBackInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBackInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBackInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBackInfoReq::MergeFrom(const CashBackInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBackInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBackInfoReq::CopyFrom(const CashBackInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBackInfoReq::IsInitialized() const {

  return true;
}

void CashBackInfoReq::Swap(CashBackInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBackInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBackInfoReq_descriptor_;
  metadata.reflection = CashBackInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashBackInfoResp::kItemsFieldNumber;
const int CashBackInfoResp::kTotalRechargeFieldNumber;
#endif  // !_MSC_VER

CashBackInfoResp::CashBackInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.CashBackInfoResp)
}

void CashBackInfoResp::InitAsDefaultInstance() {
}

CashBackInfoResp::CashBackInfoResp(const CashBackInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.CashBackInfoResp)
}

void CashBackInfoResp::SharedCtor() {
  _cached_size_ = 0;
  total_recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBackInfoResp::~CashBackInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.CashBackInfoResp)
  SharedDtor();
}

void CashBackInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashBackInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBackInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBackInfoResp_descriptor_;
}

const CashBackInfoResp& CashBackInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

CashBackInfoResp* CashBackInfoResp::default_instance_ = NULL;

CashBackInfoResp* CashBackInfoResp::New() const {
  return new CashBackInfoResp;
}

void CashBackInfoResp::Clear() {
  total_recharge_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBackInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.CashBackInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActivity.CashBackItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_total_recharge;
        break;
      }

      // required uint32 total_recharge = 2;
      case 2: {
        if (tag == 16) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.CashBackInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.CashBackInfoResp)
  return false;
#undef DO_
}

void CashBackInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.CashBackInfoResp)
  // repeated .ProtoActivity.CashBackItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // required uint32 total_recharge = 2;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.CashBackInfoResp)
}

::google::protobuf::uint8* CashBackInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.CashBackInfoResp)
  // repeated .ProtoActivity.CashBackItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // required uint32 total_recharge = 2;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.CashBackInfoResp)
  return target;
}

int CashBackInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 total_recharge = 2;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

  }
  // repeated .ProtoActivity.CashBackItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBackInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBackInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBackInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBackInfoResp::MergeFrom(const CashBackInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBackInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBackInfoResp::CopyFrom(const CashBackInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBackInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void CashBackInfoResp::Swap(CashBackInfoResp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBackInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBackInfoResp_descriptor_;
  metadata.reflection = CashBackInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashBackRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

CashBackRewardReq::CashBackRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.CashBackRewardReq)
}

void CashBackRewardReq::InitAsDefaultInstance() {
}

CashBackRewardReq::CashBackRewardReq(const CashBackRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.CashBackRewardReq)
}

void CashBackRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBackRewardReq::~CashBackRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.CashBackRewardReq)
  SharedDtor();
}

void CashBackRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashBackRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBackRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBackRewardReq_descriptor_;
}

const CashBackRewardReq& CashBackRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

CashBackRewardReq* CashBackRewardReq::default_instance_ = NULL;

CashBackRewardReq* CashBackRewardReq::New() const {
  return new CashBackRewardReq;
}

void CashBackRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBackRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.CashBackRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.CashBackRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.CashBackRewardReq)
  return false;
#undef DO_
}

void CashBackRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.CashBackRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.CashBackRewardReq)
}

::google::protobuf::uint8* CashBackRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.CashBackRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.CashBackRewardReq)
  return target;
}

int CashBackRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBackRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBackRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBackRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBackRewardReq::MergeFrom(const CashBackRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBackRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBackRewardReq::CopyFrom(const CashBackRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBackRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CashBackRewardReq::Swap(CashBackRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBackRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBackRewardReq_descriptor_;
  metadata.reflection = CashBackRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashBackRewardResp::kItemFieldNumber;
const int CashBackRewardResp::kRewardFieldNumber;
#endif  // !_MSC_VER

CashBackRewardResp::CashBackRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.CashBackRewardResp)
}

void CashBackRewardResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoActivity::CashBackItem*>(&::ProtoActivity::CashBackItem::default_instance());
  reward_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

CashBackRewardResp::CashBackRewardResp(const CashBackRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.CashBackRewardResp)
}

void CashBackRewardResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBackRewardResp::~CashBackRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.CashBackRewardResp)
  SharedDtor();
}

void CashBackRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete reward_;
  }
}

void CashBackRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBackRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBackRewardResp_descriptor_;
}

const CashBackRewardResp& CashBackRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

CashBackRewardResp* CashBackRewardResp::default_instance_ = NULL;

CashBackRewardResp* CashBackRewardResp::New() const {
  return new CashBackRewardResp;
}

void CashBackRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoActivity::CashBackItem::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBackRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.CashBackRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoActivity.CashBackItem item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .DataCommon.CommonBaseRewardCPP reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.CashBackRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.CashBackRewardResp)
  return false;
#undef DO_
}

void CashBackRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.CashBackRewardResp)
  // required .ProtoActivity.CashBackItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required .DataCommon.CommonBaseRewardCPP reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.CashBackRewardResp)
}

::google::protobuf::uint8* CashBackRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.CashBackRewardResp)
  // required .ProtoActivity.CashBackItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required .DataCommon.CommonBaseRewardCPP reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.CashBackRewardResp)
  return target;
}

int CashBackRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoActivity.CashBackItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required .DataCommon.CommonBaseRewardCPP reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBackRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBackRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBackRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBackRewardResp::MergeFrom(const CashBackRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoActivity::CashBackItem::MergeFrom(from.item());
    }
    if (from.has_reward()) {
      mutable_reward()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBackRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBackRewardResp::CopyFrom(const CashBackRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBackRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void CashBackRewardResp::Swap(CashBackRewardResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBackRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBackRewardResp_descriptor_;
  metadata.reflection = CashBackRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassActivityItem::kIdFieldNumber;
const int PassActivityItem::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

PassActivityItem::PassActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.PassActivityItem)
}

void PassActivityItem::InitAsDefaultInstance() {
}

PassActivityItem::PassActivityItem(const PassActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.PassActivityItem)
}

void PassActivityItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_get_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityItem::~PassActivityItem() {
  // @@protoc_insertion_point(destructor:ProtoActivity.PassActivityItem)
  SharedDtor();
}

void PassActivityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassActivityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityItem_descriptor_;
}

const PassActivityItem& PassActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

PassActivityItem* PassActivityItem::default_instance_ = NULL;

PassActivityItem* PassActivityItem::New() const {
  return new PassActivityItem;
}

void PassActivityItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassActivityItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, is_get_reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.PassActivityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_get_reward;
        break;
      }

      // required bool is_get_reward = 2;
      case 2: {
        if (tag == 16) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.PassActivityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.PassActivityItem)
  return false;
#undef DO_
}

void PassActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.PassActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool is_get_reward = 2;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.PassActivityItem)
}

::google::protobuf::uint8* PassActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.PassActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool is_get_reward = 2;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.PassActivityItem)
  return target;
}

int PassActivityItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bool is_get_reward = 2;
    if (has_is_get_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityItem::MergeFrom(const PassActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityItem::CopyFrom(const PassActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PassActivityItem::Swap(PassActivityItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityItem_descriptor_;
  metadata.reflection = PassActivityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassActivityRecord::kNameFieldNumber;
const int PassActivityRecord::kPassIdFieldNumber;
const int PassActivityRecord::kCashFieldNumber;
#endif  // !_MSC_VER

PassActivityRecord::PassActivityRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.PassActivityRecord)
}

void PassActivityRecord::InitAsDefaultInstance() {
}

PassActivityRecord::PassActivityRecord(const PassActivityRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.PassActivityRecord)
}

void PassActivityRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_id_ = 0u;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityRecord::~PassActivityRecord() {
  // @@protoc_insertion_point(destructor:ProtoActivity.PassActivityRecord)
  SharedDtor();
}

void PassActivityRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PassActivityRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityRecord_descriptor_;
}

const PassActivityRecord& PassActivityRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

PassActivityRecord* PassActivityRecord::default_instance_ = NULL;

PassActivityRecord* PassActivityRecord::New() const {
  return new PassActivityRecord;
}

void PassActivityRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassActivityRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pass_id_, cash_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.PassActivityRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pass_id;
        break;
      }

      // required uint32 pass_id = 2;
      case 2: {
        if (tag == 16) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }

      // required uint32 cash = 3;
      case 3: {
        if (tag == 24) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.PassActivityRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.PassActivityRecord)
  return false;
#undef DO_
}

void PassActivityRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.PassActivityRecord)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 pass_id = 2;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_id(), output);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.PassActivityRecord)
}

::google::protobuf::uint8* PassActivityRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.PassActivityRecord)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required uint32 pass_id = 2;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_id(), target);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.PassActivityRecord)
  return target;
}

int PassActivityRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 pass_id = 2;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_id());
    }

    // required uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityRecord::MergeFrom(const PassActivityRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityRecord::CopyFrom(const PassActivityRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PassActivityRecord::Swap(PassActivityRecord* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityRecord_descriptor_;
  metadata.reflection = PassActivityRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PassActivityInfoReq::PassActivityInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.PassActivityInfoReq)
}

void PassActivityInfoReq::InitAsDefaultInstance() {
}

PassActivityInfoReq::PassActivityInfoReq(const PassActivityInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.PassActivityInfoReq)
}

void PassActivityInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityInfoReq::~PassActivityInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.PassActivityInfoReq)
  SharedDtor();
}

void PassActivityInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassActivityInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityInfoReq_descriptor_;
}

const PassActivityInfoReq& PassActivityInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

PassActivityInfoReq* PassActivityInfoReq::default_instance_ = NULL;

PassActivityInfoReq* PassActivityInfoReq::New() const {
  return new PassActivityInfoReq;
}

void PassActivityInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.PassActivityInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.PassActivityInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.PassActivityInfoReq)
  return false;
#undef DO_
}

void PassActivityInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.PassActivityInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.PassActivityInfoReq)
}

::google::protobuf::uint8* PassActivityInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.PassActivityInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.PassActivityInfoReq)
  return target;
}

int PassActivityInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityInfoReq::MergeFrom(const PassActivityInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityInfoReq::CopyFrom(const PassActivityInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityInfoReq::IsInitialized() const {

  return true;
}

void PassActivityInfoReq::Swap(PassActivityInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityInfoReq_descriptor_;
  metadata.reflection = PassActivityInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassActivityInfoResp::kItemsFieldNumber;
const int PassActivityInfoResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

PassActivityInfoResp::PassActivityInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.PassActivityInfoResp)
}

void PassActivityInfoResp::InitAsDefaultInstance() {
}

PassActivityInfoResp::PassActivityInfoResp(const PassActivityInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.PassActivityInfoResp)
}

void PassActivityInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityInfoResp::~PassActivityInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.PassActivityInfoResp)
  SharedDtor();
}

void PassActivityInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassActivityInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityInfoResp_descriptor_;
}

const PassActivityInfoResp& PassActivityInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

PassActivityInfoResp* PassActivityInfoResp::default_instance_ = NULL;

PassActivityInfoResp* PassActivityInfoResp::New() const {
  return new PassActivityInfoResp;
}

void PassActivityInfoResp::Clear() {
  items_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.PassActivityInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActivity.PassActivityItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_records;
        break;
      }

      // repeated .ProtoActivity.PassActivityRecord records = 2;
      case 2: {
        if (tag == 18) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.PassActivityInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.PassActivityInfoResp)
  return false;
#undef DO_
}

void PassActivityInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.PassActivityInfoResp)
  // repeated .ProtoActivity.PassActivityItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated .ProtoActivity.PassActivityRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.PassActivityInfoResp)
}

::google::protobuf::uint8* PassActivityInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.PassActivityInfoResp)
  // repeated .ProtoActivity.PassActivityItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated .ProtoActivity.PassActivityRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.PassActivityInfoResp)
  return target;
}

int PassActivityInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoActivity.PassActivityItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .ProtoActivity.PassActivityRecord records = 2;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityInfoResp::MergeFrom(const PassActivityInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityInfoResp::CopyFrom(const PassActivityInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void PassActivityInfoResp::Swap(PassActivityInfoResp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityInfoResp_descriptor_;
  metadata.reflection = PassActivityInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassActivityRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

PassActivityRewardReq::PassActivityRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.PassActivityRewardReq)
}

void PassActivityRewardReq::InitAsDefaultInstance() {
}

PassActivityRewardReq::PassActivityRewardReq(const PassActivityRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.PassActivityRewardReq)
}

void PassActivityRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityRewardReq::~PassActivityRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.PassActivityRewardReq)
  SharedDtor();
}

void PassActivityRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassActivityRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityRewardReq_descriptor_;
}

const PassActivityRewardReq& PassActivityRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

PassActivityRewardReq* PassActivityRewardReq::default_instance_ = NULL;

PassActivityRewardReq* PassActivityRewardReq::New() const {
  return new PassActivityRewardReq;
}

void PassActivityRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.PassActivityRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.PassActivityRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.PassActivityRewardReq)
  return false;
#undef DO_
}

void PassActivityRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.PassActivityRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.PassActivityRewardReq)
}

::google::protobuf::uint8* PassActivityRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.PassActivityRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.PassActivityRewardReq)
  return target;
}

int PassActivityRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityRewardReq::MergeFrom(const PassActivityRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityRewardReq::CopyFrom(const PassActivityRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PassActivityRewardReq::Swap(PassActivityRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityRewardReq_descriptor_;
  metadata.reflection = PassActivityRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassActivityRewardResp::kItemsFieldNumber;
const int PassActivityRewardResp::kRewardFieldNumber;
#endif  // !_MSC_VER

PassActivityRewardResp::PassActivityRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.PassActivityRewardResp)
}

void PassActivityRewardResp::InitAsDefaultInstance() {
  items_ = const_cast< ::ProtoActivity::PassActivityItem*>(&::ProtoActivity::PassActivityItem::default_instance());
  reward_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

PassActivityRewardResp::PassActivityRewardResp(const PassActivityRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.PassActivityRewardResp)
}

void PassActivityRewardResp::SharedCtor() {
  _cached_size_ = 0;
  items_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityRewardResp::~PassActivityRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.PassActivityRewardResp)
  SharedDtor();
}

void PassActivityRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete items_;
    delete reward_;
  }
}

void PassActivityRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityRewardResp_descriptor_;
}

const PassActivityRewardResp& PassActivityRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

PassActivityRewardResp* PassActivityRewardResp::default_instance_ = NULL;

PassActivityRewardResp* PassActivityRewardResp::New() const {
  return new PassActivityRewardResp;
}

void PassActivityRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_items()) {
      if (items_ != NULL) items_->::ProtoActivity::PassActivityItem::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.PassActivityRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoActivity.PassActivityItem items = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .DataCommon.CommonBaseRewardCPP reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.PassActivityRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.PassActivityRewardResp)
  return false;
#undef DO_
}

void PassActivityRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.PassActivityRewardResp)
  // required .ProtoActivity.PassActivityItem items = 1;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(), output);
  }

  // required .DataCommon.CommonBaseRewardCPP reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.PassActivityRewardResp)
}

::google::protobuf::uint8* PassActivityRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.PassActivityRewardResp)
  // required .ProtoActivity.PassActivityItem items = 1;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(), target);
  }

  // required .DataCommon.CommonBaseRewardCPP reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.PassActivityRewardResp)
  return target;
}

int PassActivityRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoActivity.PassActivityItem items = 1;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }

    // required .DataCommon.CommonBaseRewardCPP reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityRewardResp::MergeFrom(const PassActivityRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_items()) {
      mutable_items()->::ProtoActivity::PassActivityItem::MergeFrom(from.items());
    }
    if (from.has_reward()) {
      mutable_reward()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityRewardResp::CopyFrom(const PassActivityRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_items()) {
    if (!this->items().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void PassActivityRewardResp::Swap(PassActivityRewardResp* other) {
  if (other != this) {
    std::swap(items_, other->items_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityRewardResp_descriptor_;
  metadata.reflection = PassActivityRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltItem::kIdFieldNumber;
const int SmeltItem::kRewardCntFieldNumber;
const int SmeltItem::kYetCntFieldNumber;
#endif  // !_MSC_VER

SmeltItem::SmeltItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.SmeltItem)
}

void SmeltItem::InitAsDefaultInstance() {
}

SmeltItem::SmeltItem(const SmeltItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.SmeltItem)
}

void SmeltItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  reward_cnt_ = 0u;
  yet_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltItem::~SmeltItem() {
  // @@protoc_insertion_point(destructor:ProtoActivity.SmeltItem)
  SharedDtor();
}

void SmeltItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltItem_descriptor_;
}

const SmeltItem& SmeltItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

SmeltItem* SmeltItem::default_instance_ = NULL;

SmeltItem* SmeltItem::New() const {
  return new SmeltItem;
}

void SmeltItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SmeltItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, yet_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.SmeltItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_cnt;
        break;
      }

      // required uint32 reward_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_cnt_)));
          set_has_reward_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yet_cnt;
        break;
      }

      // required uint32 yet_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_yet_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yet_cnt_)));
          set_has_yet_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.SmeltItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.SmeltItem)
  return false;
#undef DO_
}

void SmeltItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.SmeltItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 reward_cnt = 2;
  if (has_reward_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_cnt(), output);
  }

  // required uint32 yet_cnt = 3;
  if (has_yet_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->yet_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.SmeltItem)
}

::google::protobuf::uint8* SmeltItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.SmeltItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 reward_cnt = 2;
  if (has_reward_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_cnt(), target);
  }

  // required uint32 yet_cnt = 3;
  if (has_yet_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->yet_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.SmeltItem)
  return target;
}

int SmeltItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 reward_cnt = 2;
    if (has_reward_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_cnt());
    }

    // required uint32 yet_cnt = 3;
    if (has_yet_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yet_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltItem::MergeFrom(const SmeltItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reward_cnt()) {
      set_reward_cnt(from.reward_cnt());
    }
    if (from.has_yet_cnt()) {
      set_yet_cnt(from.yet_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltItem::CopyFrom(const SmeltItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SmeltItem::Swap(SmeltItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reward_cnt_, other->reward_cnt_);
    std::swap(yet_cnt_, other->yet_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltItem_descriptor_;
  metadata.reflection = SmeltItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SmeltInfoReq::SmeltInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.SmeltInfoReq)
}

void SmeltInfoReq::InitAsDefaultInstance() {
}

SmeltInfoReq::SmeltInfoReq(const SmeltInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.SmeltInfoReq)
}

void SmeltInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltInfoReq::~SmeltInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.SmeltInfoReq)
  SharedDtor();
}

void SmeltInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltInfoReq_descriptor_;
}

const SmeltInfoReq& SmeltInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

SmeltInfoReq* SmeltInfoReq::default_instance_ = NULL;

SmeltInfoReq* SmeltInfoReq::New() const {
  return new SmeltInfoReq;
}

void SmeltInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.SmeltInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.SmeltInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.SmeltInfoReq)
  return false;
#undef DO_
}

void SmeltInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.SmeltInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.SmeltInfoReq)
}

::google::protobuf::uint8* SmeltInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.SmeltInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.SmeltInfoReq)
  return target;
}

int SmeltInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltInfoReq::MergeFrom(const SmeltInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltInfoReq::CopyFrom(const SmeltInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltInfoReq::IsInitialized() const {

  return true;
}

void SmeltInfoReq::Swap(SmeltInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltInfoReq_descriptor_;
  metadata.reflection = SmeltInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltInfoResp::kTotalSmeltCntFieldNumber;
const int SmeltInfoResp::kItemsFieldNumber;
#endif  // !_MSC_VER

SmeltInfoResp::SmeltInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.SmeltInfoResp)
}

void SmeltInfoResp::InitAsDefaultInstance() {
}

SmeltInfoResp::SmeltInfoResp(const SmeltInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.SmeltInfoResp)
}

void SmeltInfoResp::SharedCtor() {
  _cached_size_ = 0;
  total_smelt_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltInfoResp::~SmeltInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.SmeltInfoResp)
  SharedDtor();
}

void SmeltInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltInfoResp_descriptor_;
}

const SmeltInfoResp& SmeltInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

SmeltInfoResp* SmeltInfoResp::default_instance_ = NULL;

SmeltInfoResp* SmeltInfoResp::New() const {
  return new SmeltInfoResp;
}

void SmeltInfoResp::Clear() {
  total_smelt_cnt_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.SmeltInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_smelt_cnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_smelt_cnt_)));
          set_has_total_smelt_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ProtoActivity.SmeltItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.SmeltInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.SmeltInfoResp)
  return false;
#undef DO_
}

void SmeltInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.SmeltInfoResp)
  // required uint32 total_smelt_cnt = 1;
  if (has_total_smelt_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_smelt_cnt(), output);
  }

  // repeated .ProtoActivity.SmeltItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.SmeltInfoResp)
}

::google::protobuf::uint8* SmeltInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.SmeltInfoResp)
  // required uint32 total_smelt_cnt = 1;
  if (has_total_smelt_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_smelt_cnt(), target);
  }

  // repeated .ProtoActivity.SmeltItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.SmeltInfoResp)
  return target;
}

int SmeltInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total_smelt_cnt = 1;
    if (has_total_smelt_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_smelt_cnt());
    }

  }
  // repeated .ProtoActivity.SmeltItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltInfoResp::MergeFrom(const SmeltInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_smelt_cnt()) {
      set_total_smelt_cnt(from.total_smelt_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltInfoResp::CopyFrom(const SmeltInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void SmeltInfoResp::Swap(SmeltInfoResp* other) {
  if (other != this) {
    std::swap(total_smelt_cnt_, other->total_smelt_cnt_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltInfoResp_descriptor_;
  metadata.reflection = SmeltInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

SmeltRewardReq::SmeltRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.SmeltRewardReq)
}

void SmeltRewardReq::InitAsDefaultInstance() {
}

SmeltRewardReq::SmeltRewardReq(const SmeltRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.SmeltRewardReq)
}

void SmeltRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltRewardReq::~SmeltRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.SmeltRewardReq)
  SharedDtor();
}

void SmeltRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltRewardReq_descriptor_;
}

const SmeltRewardReq& SmeltRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

SmeltRewardReq* SmeltRewardReq::default_instance_ = NULL;

SmeltRewardReq* SmeltRewardReq::New() const {
  return new SmeltRewardReq;
}

void SmeltRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.SmeltRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.SmeltRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.SmeltRewardReq)
  return false;
#undef DO_
}

void SmeltRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.SmeltRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.SmeltRewardReq)
}

::google::protobuf::uint8* SmeltRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.SmeltRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.SmeltRewardReq)
  return target;
}

int SmeltRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltRewardReq::MergeFrom(const SmeltRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltRewardReq::CopyFrom(const SmeltRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmeltRewardReq::Swap(SmeltRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltRewardReq_descriptor_;
  metadata.reflection = SmeltRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltRewardResp::kItemFieldNumber;
const int SmeltRewardResp::kEquipFieldNumber;
#endif  // !_MSC_VER

SmeltRewardResp::SmeltRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.SmeltRewardResp)
}

void SmeltRewardResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoActivity::SmeltItem*>(&::ProtoActivity::SmeltItem::default_instance());
  equip_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
}

SmeltRewardResp::SmeltRewardResp(const SmeltRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.SmeltRewardResp)
}

void SmeltRewardResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltRewardResp::~SmeltRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.SmeltRewardResp)
  SharedDtor();
}

void SmeltRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete equip_;
  }
}

void SmeltRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltRewardResp_descriptor_;
}

const SmeltRewardResp& SmeltRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

SmeltRewardResp* SmeltRewardResp::default_instance_ = NULL;

SmeltRewardResp* SmeltRewardResp::New() const {
  return new SmeltRewardResp;
}

void SmeltRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoActivity::SmeltItem::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentAllCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.SmeltRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoActivity.SmeltItem item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // required .DataCommon.EquipmentAllCPP equip = 2;
      case 2: {
        if (tag == 18) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.SmeltRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.SmeltRewardResp)
  return false;
#undef DO_
}

void SmeltRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.SmeltRewardResp)
  // required .ProtoActivity.SmeltItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required .DataCommon.EquipmentAllCPP equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.SmeltRewardResp)
}

::google::protobuf::uint8* SmeltRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.SmeltRewardResp)
  // required .ProtoActivity.SmeltItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required .DataCommon.EquipmentAllCPP equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.SmeltRewardResp)
  return target;
}

int SmeltRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoActivity.SmeltItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required .DataCommon.EquipmentAllCPP equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltRewardResp::MergeFrom(const SmeltRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoActivity::SmeltItem::MergeFrom(from.item());
    }
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltRewardResp::CopyFrom(const SmeltRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void SmeltRewardResp::Swap(SmeltRewardResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltRewardResp_descriptor_;
  metadata.reflection = SmeltRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldTombItem::kIdFieldNumber;
const int TouchGoldTombItem::kIsLockedFieldNumber;
#endif  // !_MSC_VER

TouchGoldTombItem::TouchGoldTombItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldTombItem)
}

void TouchGoldTombItem::InitAsDefaultInstance() {
}

TouchGoldTombItem::TouchGoldTombItem(const TouchGoldTombItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldTombItem)
}

void TouchGoldTombItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldTombItem::~TouchGoldTombItem() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldTombItem)
  SharedDtor();
}

void TouchGoldTombItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldTombItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldTombItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldTombItem_descriptor_;
}

const TouchGoldTombItem& TouchGoldTombItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldTombItem* TouchGoldTombItem::default_instance_ = NULL;

TouchGoldTombItem* TouchGoldTombItem::New() const {
  return new TouchGoldTombItem;
}

void TouchGoldTombItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TouchGoldTombItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, is_locked_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldTombItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldTombItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_locked;
        break;
      }

      // required bool is_locked = 2;
      case 2: {
        if (tag == 16) {
         parse_is_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locked_)));
          set_has_is_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldTombItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldTombItem)
  return false;
#undef DO_
}

void TouchGoldTombItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldTombItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool is_locked = 2;
  if (has_is_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldTombItem)
}

::google::protobuf::uint8* TouchGoldTombItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldTombItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool is_locked = 2;
  if (has_is_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldTombItem)
  return target;
}

int TouchGoldTombItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bool is_locked = 2;
    if (has_is_locked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldTombItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldTombItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldTombItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldTombItem::MergeFrom(const TouchGoldTombItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_locked()) {
      set_is_locked(from.is_locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldTombItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldTombItem::CopyFrom(const TouchGoldTombItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldTombItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TouchGoldTombItem::Swap(TouchGoldTombItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_locked_, other->is_locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldTombItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldTombItem_descriptor_;
  metadata.reflection = TouchGoldTombItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldInfo::kTombsFieldNumber;
const int TouchGoldInfo::kTotalTouchFieldNumber;
const int TouchGoldInfo::kTotalLimitFieldNumber;
const int TouchGoldInfo::kSurplusFieldNumber;
const int TouchGoldInfo::kOutFieldNumber;
const int TouchGoldInfo::kComponentFieldNumber;
const int TouchGoldInfo::kCurTombIdFieldNumber;
#endif  // !_MSC_VER

TouchGoldInfo::TouchGoldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldInfo)
}

void TouchGoldInfo::InitAsDefaultInstance() {
}

TouchGoldInfo::TouchGoldInfo(const TouchGoldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldInfo)
}

void TouchGoldInfo::SharedCtor() {
  _cached_size_ = 0;
  total_touch_ = 0u;
  total_limit_ = 0u;
  surplus_ = 0u;
  component_ = 0u;
  cur_tomb_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldInfo::~TouchGoldInfo() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldInfo)
  SharedDtor();
}

void TouchGoldInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldInfo_descriptor_;
}

const TouchGoldInfo& TouchGoldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldInfo* TouchGoldInfo::default_instance_ = NULL;

TouchGoldInfo* TouchGoldInfo::New() const {
  return new TouchGoldInfo;
}

void TouchGoldInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TouchGoldInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 110) {
    ZR_(total_touch_, total_limit_);
    ZR_(surplus_, cur_tomb_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tombs_.Clear();
  out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActivity.TouchGoldTombItem tombs = 1;
      case 1: {
        if (tag == 10) {
         parse_tombs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tombs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tombs;
        if (input->ExpectTag(16)) goto parse_total_touch;
        break;
      }

      // required uint32 total_touch = 2;
      case 2: {
        if (tag == 16) {
         parse_total_touch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_touch_)));
          set_has_total_touch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_limit;
        break;
      }

      // required uint32 total_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_total_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_limit_)));
          set_has_total_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_surplus;
        break;
      }

      // required uint32 surplus = 4;
      case 4: {
        if (tag == 32) {
         parse_surplus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_)));
          set_has_surplus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_out;
        break;
      }

      // repeated uint32 out = 5;
      case 5: {
        if (tag == 40) {
         parse_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_out())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_out())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_out;
        if (input->ExpectTag(48)) goto parse_component;
        break;
      }

      // required uint32 component = 6;
      case 6: {
        if (tag == 48) {
         parse_component:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_)));
          set_has_component();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_tomb_id;
        break;
      }

      // required uint32 cur_tomb_id = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_tomb_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_tomb_id_)));
          set_has_cur_tomb_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldInfo)
  return false;
#undef DO_
}

void TouchGoldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldInfo)
  // repeated .ProtoActivity.TouchGoldTombItem tombs = 1;
  for (int i = 0; i < this->tombs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tombs(i), output);
  }

  // required uint32 total_touch = 2;
  if (has_total_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_touch(), output);
  }

  // required uint32 total_limit = 3;
  if (has_total_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_limit(), output);
  }

  // required uint32 surplus = 4;
  if (has_surplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->surplus(), output);
  }

  // repeated uint32 out = 5;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->out(i), output);
  }

  // required uint32 component = 6;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->component(), output);
  }

  // required uint32 cur_tomb_id = 7;
  if (has_cur_tomb_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_tomb_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldInfo)
}

::google::protobuf::uint8* TouchGoldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldInfo)
  // repeated .ProtoActivity.TouchGoldTombItem tombs = 1;
  for (int i = 0; i < this->tombs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tombs(i), target);
  }

  // required uint32 total_touch = 2;
  if (has_total_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_touch(), target);
  }

  // required uint32 total_limit = 3;
  if (has_total_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_limit(), target);
  }

  // required uint32 surplus = 4;
  if (has_surplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->surplus(), target);
  }

  // repeated uint32 out = 5;
  for (int i = 0; i < this->out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->out(i), target);
  }

  // required uint32 component = 6;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->component(), target);
  }

  // required uint32 cur_tomb_id = 7;
  if (has_cur_tomb_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_tomb_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldInfo)
  return target;
}

int TouchGoldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 total_touch = 2;
    if (has_total_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_touch());
    }

    // required uint32 total_limit = 3;
    if (has_total_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_limit());
    }

    // required uint32 surplus = 4;
    if (has_surplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus());
    }

    // required uint32 component = 6;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component());
    }

    // required uint32 cur_tomb_id = 7;
    if (has_cur_tomb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_tomb_id());
    }

  }
  // repeated .ProtoActivity.TouchGoldTombItem tombs = 1;
  total_size += 1 * this->tombs_size();
  for (int i = 0; i < this->tombs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tombs(i));
  }

  // repeated uint32 out = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->out(i));
    }
    total_size += 1 * this->out_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldInfo::MergeFrom(const TouchGoldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tombs_.MergeFrom(from.tombs_);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_touch()) {
      set_total_touch(from.total_touch());
    }
    if (from.has_total_limit()) {
      set_total_limit(from.total_limit());
    }
    if (from.has_surplus()) {
      set_surplus(from.surplus());
    }
    if (from.has_component()) {
      set_component(from.component());
    }
    if (from.has_cur_tomb_id()) {
      set_cur_tomb_id(from.cur_tomb_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldInfo::CopyFrom(const TouchGoldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006e) != 0x0000006e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tombs())) return false;
  return true;
}

void TouchGoldInfo::Swap(TouchGoldInfo* other) {
  if (other != this) {
    tombs_.Swap(&other->tombs_);
    std::swap(total_touch_, other->total_touch_);
    std::swap(total_limit_, other->total_limit_);
    std::swap(surplus_, other->surplus_);
    out_.Swap(&other->out_);
    std::swap(component_, other->component_);
    std::swap(cur_tomb_id_, other->cur_tomb_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldInfo_descriptor_;
  metadata.reflection = TouchGoldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TouchGoldInfoReq::TouchGoldInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldInfoReq)
}

void TouchGoldInfoReq::InitAsDefaultInstance() {
}

TouchGoldInfoReq::TouchGoldInfoReq(const TouchGoldInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldInfoReq)
}

void TouchGoldInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldInfoReq::~TouchGoldInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldInfoReq)
  SharedDtor();
}

void TouchGoldInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldInfoReq_descriptor_;
}

const TouchGoldInfoReq& TouchGoldInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldInfoReq* TouchGoldInfoReq::default_instance_ = NULL;

TouchGoldInfoReq* TouchGoldInfoReq::New() const {
  return new TouchGoldInfoReq;
}

void TouchGoldInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldInfoReq)
  return false;
#undef DO_
}

void TouchGoldInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldInfoReq)
}

::google::protobuf::uint8* TouchGoldInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldInfoReq)
  return target;
}

int TouchGoldInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldInfoReq::MergeFrom(const TouchGoldInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldInfoReq::CopyFrom(const TouchGoldInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldInfoReq::IsInitialized() const {

  return true;
}

void TouchGoldInfoReq::Swap(TouchGoldInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldInfoReq_descriptor_;
  metadata.reflection = TouchGoldInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldOnceReq::kIndexFieldNumber;
#endif  // !_MSC_VER

TouchGoldOnceReq::TouchGoldOnceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldOnceReq)
}

void TouchGoldOnceReq::InitAsDefaultInstance() {
}

TouchGoldOnceReq::TouchGoldOnceReq(const TouchGoldOnceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldOnceReq)
}

void TouchGoldOnceReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldOnceReq::~TouchGoldOnceReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldOnceReq)
  SharedDtor();
}

void TouchGoldOnceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldOnceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldOnceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldOnceReq_descriptor_;
}

const TouchGoldOnceReq& TouchGoldOnceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldOnceReq* TouchGoldOnceReq::default_instance_ = NULL;

TouchGoldOnceReq* TouchGoldOnceReq::New() const {
  return new TouchGoldOnceReq;
}

void TouchGoldOnceReq::Clear() {
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldOnceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldOnceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldOnceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldOnceReq)
  return false;
#undef DO_
}

void TouchGoldOnceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldOnceReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldOnceReq)
}

::google::protobuf::uint8* TouchGoldOnceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldOnceReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldOnceReq)
  return target;
}

int TouchGoldOnceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldOnceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldOnceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldOnceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldOnceReq::MergeFrom(const TouchGoldOnceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldOnceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldOnceReq::CopyFrom(const TouchGoldOnceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldOnceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TouchGoldOnceReq::Swap(TouchGoldOnceReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldOnceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldOnceReq_descriptor_;
  metadata.reflection = TouchGoldOnceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TouchGoldAllReq::TouchGoldAllReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldAllReq)
}

void TouchGoldAllReq::InitAsDefaultInstance() {
}

TouchGoldAllReq::TouchGoldAllReq(const TouchGoldAllReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldAllReq)
}

void TouchGoldAllReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldAllReq::~TouchGoldAllReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldAllReq)
  SharedDtor();
}

void TouchGoldAllReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldAllReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldAllReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldAllReq_descriptor_;
}

const TouchGoldAllReq& TouchGoldAllReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldAllReq* TouchGoldAllReq::default_instance_ = NULL;

TouchGoldAllReq* TouchGoldAllReq::New() const {
  return new TouchGoldAllReq;
}

void TouchGoldAllReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldAllReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldAllReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldAllReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldAllReq)
  return false;
#undef DO_
}

void TouchGoldAllReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldAllReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldAllReq)
}

::google::protobuf::uint8* TouchGoldAllReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldAllReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldAllReq)
  return target;
}

int TouchGoldAllReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldAllReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldAllReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldAllReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldAllReq::MergeFrom(const TouchGoldAllReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldAllReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldAllReq::CopyFrom(const TouchGoldAllReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldAllReq::IsInitialized() const {

  return true;
}

void TouchGoldAllReq::Swap(TouchGoldAllReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldAllReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldAllReq_descriptor_;
  metadata.reflection = TouchGoldAllReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldUnlockReq::kIdFieldNumber;
#endif  // !_MSC_VER

TouchGoldUnlockReq::TouchGoldUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldUnlockReq)
}

void TouchGoldUnlockReq::InitAsDefaultInstance() {
}

TouchGoldUnlockReq::TouchGoldUnlockReq(const TouchGoldUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldUnlockReq)
}

void TouchGoldUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldUnlockReq::~TouchGoldUnlockReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldUnlockReq)
  SharedDtor();
}

void TouchGoldUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldUnlockReq_descriptor_;
}

const TouchGoldUnlockReq& TouchGoldUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldUnlockReq* TouchGoldUnlockReq::default_instance_ = NULL;

TouchGoldUnlockReq* TouchGoldUnlockReq::New() const {
  return new TouchGoldUnlockReq;
}

void TouchGoldUnlockReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldUnlockReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldUnlockReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldUnlockReq)
  return false;
#undef DO_
}

void TouchGoldUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldUnlockReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldUnlockReq)
}

::google::protobuf::uint8* TouchGoldUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldUnlockReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldUnlockReq)
  return target;
}

int TouchGoldUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldUnlockReq::MergeFrom(const TouchGoldUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldUnlockReq::CopyFrom(const TouchGoldUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldUnlockReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TouchGoldUnlockReq::Swap(TouchGoldUnlockReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldUnlockReq_descriptor_;
  metadata.reflection = TouchGoldUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldResp::kInfoFieldNumber;
const int TouchGoldResp::kCashFieldNumber;
#endif  // !_MSC_VER

TouchGoldResp::TouchGoldResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldResp)
}

void TouchGoldResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoActivity::TouchGoldInfo*>(&::ProtoActivity::TouchGoldInfo::default_instance());
}

TouchGoldResp::TouchGoldResp(const TouchGoldResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldResp)
}

void TouchGoldResp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldResp::~TouchGoldResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldResp)
  SharedDtor();
}

void TouchGoldResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TouchGoldResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldResp_descriptor_;
}

const TouchGoldResp& TouchGoldResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldResp* TouchGoldResp::default_instance_ = NULL;

TouchGoldResp* TouchGoldResp::New() const {
  return new TouchGoldResp;
}

void TouchGoldResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoActivity::TouchGoldInfo::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoActivity.TouchGoldInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldResp)
  return false;
#undef DO_
}

void TouchGoldResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldResp)
  // required .ProtoActivity.TouchGoldInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldResp)
}

::google::protobuf::uint8* TouchGoldResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldResp)
  // required .ProtoActivity.TouchGoldInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldResp)
  return target;
}

int TouchGoldResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoActivity.TouchGoldInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldResp::MergeFrom(const TouchGoldResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoActivity::TouchGoldInfo::MergeFrom(from.info());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldResp::CopyFrom(const TouchGoldResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TouchGoldResp::Swap(TouchGoldResp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldResp_descriptor_;
  metadata.reflection = TouchGoldResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TouchGoldResetReq::TouchGoldResetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldResetReq)
}

void TouchGoldResetReq::InitAsDefaultInstance() {
}

TouchGoldResetReq::TouchGoldResetReq(const TouchGoldResetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldResetReq)
}

void TouchGoldResetReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldResetReq::~TouchGoldResetReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldResetReq)
  SharedDtor();
}

void TouchGoldResetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldResetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldResetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldResetReq_descriptor_;
}

const TouchGoldResetReq& TouchGoldResetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldResetReq* TouchGoldResetReq::default_instance_ = NULL;

TouchGoldResetReq* TouchGoldResetReq::New() const {
  return new TouchGoldResetReq;
}

void TouchGoldResetReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldResetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldResetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldResetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldResetReq)
  return false;
#undef DO_
}

void TouchGoldResetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldResetReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldResetReq)
}

::google::protobuf::uint8* TouchGoldResetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldResetReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldResetReq)
  return target;
}

int TouchGoldResetReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldResetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldResetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldResetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldResetReq::MergeFrom(const TouchGoldResetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldResetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldResetReq::CopyFrom(const TouchGoldResetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldResetReq::IsInitialized() const {

  return true;
}

void TouchGoldResetReq::Swap(TouchGoldResetReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldResetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldResetReq_descriptor_;
  metadata.reflection = TouchGoldResetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldSwitchReq::kIdFieldNumber;
#endif  // !_MSC_VER

TouchGoldSwitchReq::TouchGoldSwitchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.TouchGoldSwitchReq)
}

void TouchGoldSwitchReq::InitAsDefaultInstance() {
}

TouchGoldSwitchReq::TouchGoldSwitchReq(const TouchGoldSwitchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.TouchGoldSwitchReq)
}

void TouchGoldSwitchReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldSwitchReq::~TouchGoldSwitchReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.TouchGoldSwitchReq)
  SharedDtor();
}

void TouchGoldSwitchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldSwitchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldSwitchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldSwitchReq_descriptor_;
}

const TouchGoldSwitchReq& TouchGoldSwitchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

TouchGoldSwitchReq* TouchGoldSwitchReq::default_instance_ = NULL;

TouchGoldSwitchReq* TouchGoldSwitchReq::New() const {
  return new TouchGoldSwitchReq;
}

void TouchGoldSwitchReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldSwitchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.TouchGoldSwitchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.TouchGoldSwitchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.TouchGoldSwitchReq)
  return false;
#undef DO_
}

void TouchGoldSwitchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.TouchGoldSwitchReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.TouchGoldSwitchReq)
}

::google::protobuf::uint8* TouchGoldSwitchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.TouchGoldSwitchReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.TouchGoldSwitchReq)
  return target;
}

int TouchGoldSwitchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldSwitchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldSwitchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldSwitchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldSwitchReq::MergeFrom(const TouchGoldSwitchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldSwitchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldSwitchReq::CopyFrom(const TouchGoldSwitchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldSwitchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TouchGoldSwitchReq::Swap(TouchGoldSwitchReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldSwitchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldSwitchReq_descriptor_;
  metadata.reflection = TouchGoldSwitchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountItem::kIdFieldNumber;
const int HugeDiscountItem::kBuyCntFieldNumber;
#endif  // !_MSC_VER

HugeDiscountItem::HugeDiscountItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.HugeDiscountItem)
}

void HugeDiscountItem::InitAsDefaultInstance() {
}

HugeDiscountItem::HugeDiscountItem(const HugeDiscountItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.HugeDiscountItem)
}

void HugeDiscountItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buy_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountItem::~HugeDiscountItem() {
  // @@protoc_insertion_point(destructor:ProtoActivity.HugeDiscountItem)
  SharedDtor();
}

void HugeDiscountItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountItem_descriptor_;
}

const HugeDiscountItem& HugeDiscountItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

HugeDiscountItem* HugeDiscountItem::default_instance_ = NULL;

HugeDiscountItem* HugeDiscountItem::New() const {
  return new HugeDiscountItem;
}

void HugeDiscountItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HugeDiscountItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buy_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.HugeDiscountItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buy_cnt;
        break;
      }

      // required uint32 buy_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_buy_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cnt_)));
          set_has_buy_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.HugeDiscountItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.HugeDiscountItem)
  return false;
#undef DO_
}

void HugeDiscountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.HugeDiscountItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 buy_cnt = 2;
  if (has_buy_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.HugeDiscountItem)
}

::google::protobuf::uint8* HugeDiscountItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.HugeDiscountItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 buy_cnt = 2;
  if (has_buy_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.HugeDiscountItem)
  return target;
}

int HugeDiscountItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 buy_cnt = 2;
    if (has_buy_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountItem::MergeFrom(const HugeDiscountItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_cnt()) {
      set_buy_cnt(from.buy_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountItem::CopyFrom(const HugeDiscountItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HugeDiscountItem::Swap(HugeDiscountItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_cnt_, other->buy_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountItem_descriptor_;
  metadata.reflection = HugeDiscountItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountPage::kPageIdFieldNumber;
const int HugeDiscountPage::kGoodsFieldNumber;
#endif  // !_MSC_VER

HugeDiscountPage::HugeDiscountPage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.HugeDiscountPage)
}

void HugeDiscountPage::InitAsDefaultInstance() {
}

HugeDiscountPage::HugeDiscountPage(const HugeDiscountPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.HugeDiscountPage)
}

void HugeDiscountPage::SharedCtor() {
  _cached_size_ = 0;
  page_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountPage::~HugeDiscountPage() {
  // @@protoc_insertion_point(destructor:ProtoActivity.HugeDiscountPage)
  SharedDtor();
}

void HugeDiscountPage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountPage_descriptor_;
}

const HugeDiscountPage& HugeDiscountPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

HugeDiscountPage* HugeDiscountPage::default_instance_ = NULL;

HugeDiscountPage* HugeDiscountPage::New() const {
  return new HugeDiscountPage;
}

void HugeDiscountPage::Clear() {
  page_id_ = 0u;
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.HugeDiscountPage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_id_)));
          set_has_page_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        break;
      }

      // repeated .ProtoActivity.HugeDiscountItem goods = 2;
      case 2: {
        if (tag == 18) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.HugeDiscountPage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.HugeDiscountPage)
  return false;
#undef DO_
}

void HugeDiscountPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.HugeDiscountPage)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_id(), output);
  }

  // repeated .ProtoActivity.HugeDiscountItem goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.HugeDiscountPage)
}

::google::protobuf::uint8* HugeDiscountPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.HugeDiscountPage)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_id(), target);
  }

  // repeated .ProtoActivity.HugeDiscountItem goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.HugeDiscountPage)
  return target;
}

int HugeDiscountPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_id = 1;
    if (has_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_id());
    }

  }
  // repeated .ProtoActivity.HugeDiscountItem goods = 2;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountPage::MergeFrom(const HugeDiscountPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_id()) {
      set_page_id(from.page_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountPage::CopyFrom(const HugeDiscountPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->goods())) return false;
  return true;
}

void HugeDiscountPage::Swap(HugeDiscountPage* other) {
  if (other != this) {
    std::swap(page_id_, other->page_id_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountPage_descriptor_;
  metadata.reflection = HugeDiscountPage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HugeDiscountInfoReq::HugeDiscountInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.HugeDiscountInfoReq)
}

void HugeDiscountInfoReq::InitAsDefaultInstance() {
}

HugeDiscountInfoReq::HugeDiscountInfoReq(const HugeDiscountInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.HugeDiscountInfoReq)
}

void HugeDiscountInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountInfoReq::~HugeDiscountInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.HugeDiscountInfoReq)
  SharedDtor();
}

void HugeDiscountInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountInfoReq_descriptor_;
}

const HugeDiscountInfoReq& HugeDiscountInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

HugeDiscountInfoReq* HugeDiscountInfoReq::default_instance_ = NULL;

HugeDiscountInfoReq* HugeDiscountInfoReq::New() const {
  return new HugeDiscountInfoReq;
}

void HugeDiscountInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.HugeDiscountInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.HugeDiscountInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.HugeDiscountInfoReq)
  return false;
#undef DO_
}

void HugeDiscountInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.HugeDiscountInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.HugeDiscountInfoReq)
}

::google::protobuf::uint8* HugeDiscountInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.HugeDiscountInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.HugeDiscountInfoReq)
  return target;
}

int HugeDiscountInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountInfoReq::MergeFrom(const HugeDiscountInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountInfoReq::CopyFrom(const HugeDiscountInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountInfoReq::IsInitialized() const {

  return true;
}

void HugeDiscountInfoReq::Swap(HugeDiscountInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountInfoReq_descriptor_;
  metadata.reflection = HugeDiscountInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountInfoResp::kItemsFieldNumber;
const int HugeDiscountInfoResp::kRechargeFieldNumber;
#endif  // !_MSC_VER

HugeDiscountInfoResp::HugeDiscountInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.HugeDiscountInfoResp)
}

void HugeDiscountInfoResp::InitAsDefaultInstance() {
}

HugeDiscountInfoResp::HugeDiscountInfoResp(const HugeDiscountInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.HugeDiscountInfoResp)
}

void HugeDiscountInfoResp::SharedCtor() {
  _cached_size_ = 0;
  recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountInfoResp::~HugeDiscountInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.HugeDiscountInfoResp)
  SharedDtor();
}

void HugeDiscountInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountInfoResp_descriptor_;
}

const HugeDiscountInfoResp& HugeDiscountInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

HugeDiscountInfoResp* HugeDiscountInfoResp::default_instance_ = NULL;

HugeDiscountInfoResp* HugeDiscountInfoResp::New() const {
  return new HugeDiscountInfoResp;
}

void HugeDiscountInfoResp::Clear() {
  recharge_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.HugeDiscountInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActivity.HugeDiscountPage items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // required uint32 recharge = 2;
      case 2: {
        if (tag == 16) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.HugeDiscountInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.HugeDiscountInfoResp)
  return false;
#undef DO_
}

void HugeDiscountInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.HugeDiscountInfoResp)
  // repeated .ProtoActivity.HugeDiscountPage items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // required uint32 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.HugeDiscountInfoResp)
}

::google::protobuf::uint8* HugeDiscountInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.HugeDiscountInfoResp)
  // repeated .ProtoActivity.HugeDiscountPage items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // required uint32 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.HugeDiscountInfoResp)
  return target;
}

int HugeDiscountInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

  }
  // repeated .ProtoActivity.HugeDiscountPage items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountInfoResp::MergeFrom(const HugeDiscountInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountInfoResp::CopyFrom(const HugeDiscountInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void HugeDiscountInfoResp::Swap(HugeDiscountInfoResp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(recharge_, other->recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountInfoResp_descriptor_;
  metadata.reflection = HugeDiscountInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountBuyReq::kPageIdFieldNumber;
const int HugeDiscountBuyReq::kIdFieldNumber;
#endif  // !_MSC_VER

HugeDiscountBuyReq::HugeDiscountBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.HugeDiscountBuyReq)
}

void HugeDiscountBuyReq::InitAsDefaultInstance() {
}

HugeDiscountBuyReq::HugeDiscountBuyReq(const HugeDiscountBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.HugeDiscountBuyReq)
}

void HugeDiscountBuyReq::SharedCtor() {
  _cached_size_ = 0;
  page_id_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountBuyReq::~HugeDiscountBuyReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.HugeDiscountBuyReq)
  SharedDtor();
}

void HugeDiscountBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountBuyReq_descriptor_;
}

const HugeDiscountBuyReq& HugeDiscountBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

HugeDiscountBuyReq* HugeDiscountBuyReq::default_instance_ = NULL;

HugeDiscountBuyReq* HugeDiscountBuyReq::New() const {
  return new HugeDiscountBuyReq;
}

void HugeDiscountBuyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HugeDiscountBuyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(page_id_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.HugeDiscountBuyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_id_)));
          set_has_page_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.HugeDiscountBuyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.HugeDiscountBuyReq)
  return false;
#undef DO_
}

void HugeDiscountBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.HugeDiscountBuyReq)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_id(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.HugeDiscountBuyReq)
}

::google::protobuf::uint8* HugeDiscountBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.HugeDiscountBuyReq)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_id(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.HugeDiscountBuyReq)
  return target;
}

int HugeDiscountBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_id = 1;
    if (has_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_id());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountBuyReq::MergeFrom(const HugeDiscountBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_id()) {
      set_page_id(from.page_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountBuyReq::CopyFrom(const HugeDiscountBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HugeDiscountBuyReq::Swap(HugeDiscountBuyReq* other) {
  if (other != this) {
    std::swap(page_id_, other->page_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountBuyReq_descriptor_;
  metadata.reflection = HugeDiscountBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountBuyResp::kPageIdFieldNumber;
const int HugeDiscountBuyResp::kItemInfoFieldNumber;
const int HugeDiscountBuyResp::kCashFieldNumber;
const int HugeDiscountBuyResp::kEquipFieldNumber;
#endif  // !_MSC_VER

HugeDiscountBuyResp::HugeDiscountBuyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.HugeDiscountBuyResp)
}

void HugeDiscountBuyResp::InitAsDefaultInstance() {
  item_info_ = const_cast< ::ProtoActivity::HugeDiscountItem*>(&::ProtoActivity::HugeDiscountItem::default_instance());
  equip_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
}

HugeDiscountBuyResp::HugeDiscountBuyResp(const HugeDiscountBuyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.HugeDiscountBuyResp)
}

void HugeDiscountBuyResp::SharedCtor() {
  _cached_size_ = 0;
  page_id_ = 0u;
  item_info_ = NULL;
  cash_ = 0u;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountBuyResp::~HugeDiscountBuyResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.HugeDiscountBuyResp)
  SharedDtor();
}

void HugeDiscountBuyResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
    delete equip_;
  }
}

void HugeDiscountBuyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountBuyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountBuyResp_descriptor_;
}

const HugeDiscountBuyResp& HugeDiscountBuyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

HugeDiscountBuyResp* HugeDiscountBuyResp::default_instance_ = NULL;

HugeDiscountBuyResp* HugeDiscountBuyResp::New() const {
  return new HugeDiscountBuyResp;
}

void HugeDiscountBuyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HugeDiscountBuyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(page_id_, cash_);
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::ProtoActivity::HugeDiscountItem::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentAllCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountBuyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.HugeDiscountBuyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_id_)));
          set_has_page_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // required .ProtoActivity.HugeDiscountItem item_info = 2;
      case 2: {
        if (tag == 18) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }

      // required uint32 cash = 3;
      case 3: {
        if (tag == 24) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip;
        break;
      }

      // required .DataCommon.EquipmentAllCPP equip = 4;
      case 4: {
        if (tag == 34) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.HugeDiscountBuyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.HugeDiscountBuyResp)
  return false;
#undef DO_
}

void HugeDiscountBuyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.HugeDiscountBuyResp)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_id(), output);
  }

  // required .ProtoActivity.HugeDiscountItem item_info = 2;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(), output);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }

  // required .DataCommon.EquipmentAllCPP equip = 4;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.HugeDiscountBuyResp)
}

::google::protobuf::uint8* HugeDiscountBuyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.HugeDiscountBuyResp)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_id(), target);
  }

  // required .ProtoActivity.HugeDiscountItem item_info = 2;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(), target);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }

  // required .DataCommon.EquipmentAllCPP equip = 4;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.HugeDiscountBuyResp)
  return target;
}

int HugeDiscountBuyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_id = 1;
    if (has_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_id());
    }

    // required .ProtoActivity.HugeDiscountItem item_info = 2;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // required uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required .DataCommon.EquipmentAllCPP equip = 4;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountBuyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountBuyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountBuyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountBuyResp::MergeFrom(const HugeDiscountBuyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_id()) {
      set_page_id(from.page_id());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::ProtoActivity::HugeDiscountItem::MergeFrom(from.item_info());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountBuyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountBuyResp::CopyFrom(const HugeDiscountBuyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountBuyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_item_info()) {
    if (!this->item_info().IsInitialized()) return false;
  }
  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void HugeDiscountBuyResp::Swap(HugeDiscountBuyResp* other) {
  if (other != this) {
    std::swap(page_id_, other->page_id_);
    std::swap(item_info_, other->item_info_);
    std::swap(cash_, other->cash_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountBuyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountBuyResp_descriptor_;
  metadata.reflection = HugeDiscountBuyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenLittleChargeWindowReq::OpenLittleChargeWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.OpenLittleChargeWindowReq)
}

void OpenLittleChargeWindowReq::InitAsDefaultInstance() {
}

OpenLittleChargeWindowReq::OpenLittleChargeWindowReq(const OpenLittleChargeWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.OpenLittleChargeWindowReq)
}

void OpenLittleChargeWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenLittleChargeWindowReq::~OpenLittleChargeWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.OpenLittleChargeWindowReq)
  SharedDtor();
}

void OpenLittleChargeWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenLittleChargeWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenLittleChargeWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenLittleChargeWindowReq_descriptor_;
}

const OpenLittleChargeWindowReq& OpenLittleChargeWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

OpenLittleChargeWindowReq* OpenLittleChargeWindowReq::default_instance_ = NULL;

OpenLittleChargeWindowReq* OpenLittleChargeWindowReq::New() const {
  return new OpenLittleChargeWindowReq;
}

void OpenLittleChargeWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenLittleChargeWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.OpenLittleChargeWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.OpenLittleChargeWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.OpenLittleChargeWindowReq)
  return false;
#undef DO_
}

void OpenLittleChargeWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.OpenLittleChargeWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.OpenLittleChargeWindowReq)
}

::google::protobuf::uint8* OpenLittleChargeWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.OpenLittleChargeWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.OpenLittleChargeWindowReq)
  return target;
}

int OpenLittleChargeWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenLittleChargeWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenLittleChargeWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenLittleChargeWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenLittleChargeWindowReq::MergeFrom(const OpenLittleChargeWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenLittleChargeWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenLittleChargeWindowReq::CopyFrom(const OpenLittleChargeWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenLittleChargeWindowReq::IsInitialized() const {

  return true;
}

void OpenLittleChargeWindowReq::Swap(OpenLittleChargeWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenLittleChargeWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenLittleChargeWindowReq_descriptor_;
  metadata.reflection = OpenLittleChargeWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenLittleChargeWindowResp::kCashFieldNumber;
#endif  // !_MSC_VER

OpenLittleChargeWindowResp::OpenLittleChargeWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.OpenLittleChargeWindowResp)
}

void OpenLittleChargeWindowResp::InitAsDefaultInstance() {
}

OpenLittleChargeWindowResp::OpenLittleChargeWindowResp(const OpenLittleChargeWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.OpenLittleChargeWindowResp)
}

void OpenLittleChargeWindowResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenLittleChargeWindowResp::~OpenLittleChargeWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.OpenLittleChargeWindowResp)
  SharedDtor();
}

void OpenLittleChargeWindowResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenLittleChargeWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenLittleChargeWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenLittleChargeWindowResp_descriptor_;
}

const OpenLittleChargeWindowResp& OpenLittleChargeWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

OpenLittleChargeWindowResp* OpenLittleChargeWindowResp::default_instance_ = NULL;

OpenLittleChargeWindowResp* OpenLittleChargeWindowResp::New() const {
  return new OpenLittleChargeWindowResp;
}

void OpenLittleChargeWindowResp::Clear() {
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenLittleChargeWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.OpenLittleChargeWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.OpenLittleChargeWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.OpenLittleChargeWindowResp)
  return false;
#undef DO_
}

void OpenLittleChargeWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.OpenLittleChargeWindowResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.OpenLittleChargeWindowResp)
}

::google::protobuf::uint8* OpenLittleChargeWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.OpenLittleChargeWindowResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.OpenLittleChargeWindowResp)
  return target;
}

int OpenLittleChargeWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenLittleChargeWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenLittleChargeWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenLittleChargeWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenLittleChargeWindowResp::MergeFrom(const OpenLittleChargeWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenLittleChargeWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenLittleChargeWindowResp::CopyFrom(const OpenLittleChargeWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenLittleChargeWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenLittleChargeWindowResp::Swap(OpenLittleChargeWindowResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenLittleChargeWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenLittleChargeWindowResp_descriptor_;
  metadata.reflection = OpenLittleChargeWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LittleChargeRewardReq::LittleChargeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LittleChargeRewardReq)
}

void LittleChargeRewardReq::InitAsDefaultInstance() {
}

LittleChargeRewardReq::LittleChargeRewardReq(const LittleChargeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LittleChargeRewardReq)
}

void LittleChargeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LittleChargeRewardReq::~LittleChargeRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LittleChargeRewardReq)
  SharedDtor();
}

void LittleChargeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LittleChargeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LittleChargeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LittleChargeRewardReq_descriptor_;
}

const LittleChargeRewardReq& LittleChargeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LittleChargeRewardReq* LittleChargeRewardReq::default_instance_ = NULL;

LittleChargeRewardReq* LittleChargeRewardReq::New() const {
  return new LittleChargeRewardReq;
}

void LittleChargeRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LittleChargeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LittleChargeRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LittleChargeRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LittleChargeRewardReq)
  return false;
#undef DO_
}

void LittleChargeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LittleChargeRewardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LittleChargeRewardReq)
}

::google::protobuf::uint8* LittleChargeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LittleChargeRewardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LittleChargeRewardReq)
  return target;
}

int LittleChargeRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LittleChargeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LittleChargeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LittleChargeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LittleChargeRewardReq::MergeFrom(const LittleChargeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LittleChargeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LittleChargeRewardReq::CopyFrom(const LittleChargeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LittleChargeRewardReq::IsInitialized() const {

  return true;
}

void LittleChargeRewardReq::Swap(LittleChargeRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LittleChargeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LittleChargeRewardReq_descriptor_;
  metadata.reflection = LittleChargeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LittleChargeRewardResp::kShadowFieldNumber;
const int LittleChargeRewardResp::kEquipFieldNumber;
#endif  // !_MSC_VER

LittleChargeRewardResp::LittleChargeRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.LittleChargeRewardResp)
}

void LittleChargeRewardResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
}

LittleChargeRewardResp::LittleChargeRewardResp(const LittleChargeRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.LittleChargeRewardResp)
}

void LittleChargeRewardResp::SharedCtor() {
  _cached_size_ = 0;
  shadow_ = 0u;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LittleChargeRewardResp::~LittleChargeRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.LittleChargeRewardResp)
  SharedDtor();
}

void LittleChargeRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void LittleChargeRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LittleChargeRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LittleChargeRewardResp_descriptor_;
}

const LittleChargeRewardResp& LittleChargeRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

LittleChargeRewardResp* LittleChargeRewardResp::default_instance_ = NULL;

LittleChargeRewardResp* LittleChargeRewardResp::New() const {
  return new LittleChargeRewardResp;
}

void LittleChargeRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    shadow_ = 0u;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::DataCommon::EquipmentAllCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LittleChargeRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.LittleChargeRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shadow = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadow_)));
          set_has_shadow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // required .DataCommon.EquipmentAllCPP equip = 2;
      case 2: {
        if (tag == 18) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.LittleChargeRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.LittleChargeRewardResp)
  return false;
#undef DO_
}

void LittleChargeRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.LittleChargeRewardResp)
  // required uint32 shadow = 1;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shadow(), output);
  }

  // required .DataCommon.EquipmentAllCPP equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.LittleChargeRewardResp)
}

::google::protobuf::uint8* LittleChargeRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.LittleChargeRewardResp)
  // required uint32 shadow = 1;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shadow(), target);
  }

  // required .DataCommon.EquipmentAllCPP equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.LittleChargeRewardResp)
  return target;
}

int LittleChargeRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shadow = 1;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadow());
    }

    // required .DataCommon.EquipmentAllCPP equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LittleChargeRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LittleChargeRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LittleChargeRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LittleChargeRewardResp::MergeFrom(const LittleChargeRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shadow()) {
      set_shadow(from.shadow());
    }
    if (from.has_equip()) {
      mutable_equip()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LittleChargeRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LittleChargeRewardResp::CopyFrom(const LittleChargeRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LittleChargeRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void LittleChargeRewardResp::Swap(LittleChargeRewardResp* other) {
  if (other != this) {
    std::swap(shadow_, other->shadow_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LittleChargeRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LittleChargeRewardResp_descriptor_;
  metadata.reflection = LittleChargeRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenEnlivenKillWindowReq::OpenEnlivenKillWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.OpenEnlivenKillWindowReq)
}

void OpenEnlivenKillWindowReq::InitAsDefaultInstance() {
}

OpenEnlivenKillWindowReq::OpenEnlivenKillWindowReq(const OpenEnlivenKillWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.OpenEnlivenKillWindowReq)
}

void OpenEnlivenKillWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenEnlivenKillWindowReq::~OpenEnlivenKillWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.OpenEnlivenKillWindowReq)
  SharedDtor();
}

void OpenEnlivenKillWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenEnlivenKillWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenEnlivenKillWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenEnlivenKillWindowReq_descriptor_;
}

const OpenEnlivenKillWindowReq& OpenEnlivenKillWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

OpenEnlivenKillWindowReq* OpenEnlivenKillWindowReq::default_instance_ = NULL;

OpenEnlivenKillWindowReq* OpenEnlivenKillWindowReq::New() const {
  return new OpenEnlivenKillWindowReq;
}

void OpenEnlivenKillWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenEnlivenKillWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.OpenEnlivenKillWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.OpenEnlivenKillWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.OpenEnlivenKillWindowReq)
  return false;
#undef DO_
}

void OpenEnlivenKillWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.OpenEnlivenKillWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.OpenEnlivenKillWindowReq)
}

::google::protobuf::uint8* OpenEnlivenKillWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.OpenEnlivenKillWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.OpenEnlivenKillWindowReq)
  return target;
}

int OpenEnlivenKillWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenEnlivenKillWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenEnlivenKillWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenEnlivenKillWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenEnlivenKillWindowReq::MergeFrom(const OpenEnlivenKillWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenEnlivenKillWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenEnlivenKillWindowReq::CopyFrom(const OpenEnlivenKillWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenEnlivenKillWindowReq::IsInitialized() const {

  return true;
}

void OpenEnlivenKillWindowReq::Swap(OpenEnlivenKillWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenEnlivenKillWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenEnlivenKillWindowReq_descriptor_;
  metadata.reflection = OpenEnlivenKillWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenEnlivenKillWindowResp::kKillFieldNumber;
const int OpenEnlivenKillWindowResp::kShadowFieldNumber;
#endif  // !_MSC_VER

OpenEnlivenKillWindowResp::OpenEnlivenKillWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.OpenEnlivenKillWindowResp)
}

void OpenEnlivenKillWindowResp::InitAsDefaultInstance() {
}

OpenEnlivenKillWindowResp::OpenEnlivenKillWindowResp(const OpenEnlivenKillWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.OpenEnlivenKillWindowResp)
}

void OpenEnlivenKillWindowResp::SharedCtor() {
  _cached_size_ = 0;
  kill_ = 0u;
  shadow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenEnlivenKillWindowResp::~OpenEnlivenKillWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.OpenEnlivenKillWindowResp)
  SharedDtor();
}

void OpenEnlivenKillWindowResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenEnlivenKillWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenEnlivenKillWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenEnlivenKillWindowResp_descriptor_;
}

const OpenEnlivenKillWindowResp& OpenEnlivenKillWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

OpenEnlivenKillWindowResp* OpenEnlivenKillWindowResp::default_instance_ = NULL;

OpenEnlivenKillWindowResp* OpenEnlivenKillWindowResp::New() const {
  return new OpenEnlivenKillWindowResp;
}

void OpenEnlivenKillWindowResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenEnlivenKillWindowResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kill_, shadow_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenEnlivenKillWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.OpenEnlivenKillWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shadow;
        break;
      }

      // required uint32 shadow = 2;
      case 2: {
        if (tag == 16) {
         parse_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadow_)));
          set_has_shadow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.OpenEnlivenKillWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.OpenEnlivenKillWindowResp)
  return false;
#undef DO_
}

void OpenEnlivenKillWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.OpenEnlivenKillWindowResp)
  // required uint32 kill = 1;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kill(), output);
  }

  // required uint32 shadow = 2;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.OpenEnlivenKillWindowResp)
}

::google::protobuf::uint8* OpenEnlivenKillWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.OpenEnlivenKillWindowResp)
  // required uint32 kill = 1;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kill(), target);
  }

  // required uint32 shadow = 2;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.OpenEnlivenKillWindowResp)
  return target;
}

int OpenEnlivenKillWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kill = 1;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

    // required uint32 shadow = 2;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenEnlivenKillWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenEnlivenKillWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenEnlivenKillWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenEnlivenKillWindowResp::MergeFrom(const OpenEnlivenKillWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_shadow()) {
      set_shadow(from.shadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenEnlivenKillWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenEnlivenKillWindowResp::CopyFrom(const OpenEnlivenKillWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenEnlivenKillWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OpenEnlivenKillWindowResp::Swap(OpenEnlivenKillWindowResp* other) {
  if (other != this) {
    std::swap(kill_, other->kill_);
    std::swap(shadow_, other->shadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenEnlivenKillWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenEnlivenKillWindowResp_descriptor_;
  metadata.reflection = OpenEnlivenKillWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveDailyKillRewardReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ReceiveDailyKillRewardReq::ReceiveDailyKillRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.ReceiveDailyKillRewardReq)
}

void ReceiveDailyKillRewardReq::InitAsDefaultInstance() {
}

ReceiveDailyKillRewardReq::ReceiveDailyKillRewardReq(const ReceiveDailyKillRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.ReceiveDailyKillRewardReq)
}

void ReceiveDailyKillRewardReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveDailyKillRewardReq::~ReceiveDailyKillRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.ReceiveDailyKillRewardReq)
  SharedDtor();
}

void ReceiveDailyKillRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveDailyKillRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveDailyKillRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveDailyKillRewardReq_descriptor_;
}

const ReceiveDailyKillRewardReq& ReceiveDailyKillRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

ReceiveDailyKillRewardReq* ReceiveDailyKillRewardReq::default_instance_ = NULL;

ReceiveDailyKillRewardReq* ReceiveDailyKillRewardReq::New() const {
  return new ReceiveDailyKillRewardReq;
}

void ReceiveDailyKillRewardReq::Clear() {
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveDailyKillRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.ReceiveDailyKillRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.ReceiveDailyKillRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.ReceiveDailyKillRewardReq)
  return false;
#undef DO_
}

void ReceiveDailyKillRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.ReceiveDailyKillRewardReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.ReceiveDailyKillRewardReq)
}

::google::protobuf::uint8* ReceiveDailyKillRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.ReceiveDailyKillRewardReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.ReceiveDailyKillRewardReq)
  return target;
}

int ReceiveDailyKillRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveDailyKillRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveDailyKillRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveDailyKillRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveDailyKillRewardReq::MergeFrom(const ReceiveDailyKillRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveDailyKillRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveDailyKillRewardReq::CopyFrom(const ReceiveDailyKillRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveDailyKillRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReceiveDailyKillRewardReq::Swap(ReceiveDailyKillRewardReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveDailyKillRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveDailyKillRewardReq_descriptor_;
  metadata.reflection = ReceiveDailyKillRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveDailyKillRewardResp::kShadowFieldNumber;
const int ReceiveDailyKillRewardResp::kRewardFieldNumber;
#endif  // !_MSC_VER

ReceiveDailyKillRewardResp::ReceiveDailyKillRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.ReceiveDailyKillRewardResp)
}

void ReceiveDailyKillRewardResp::InitAsDefaultInstance() {
  reward_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
}

ReceiveDailyKillRewardResp::ReceiveDailyKillRewardResp(const ReceiveDailyKillRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.ReceiveDailyKillRewardResp)
}

void ReceiveDailyKillRewardResp::SharedCtor() {
  _cached_size_ = 0;
  shadow_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveDailyKillRewardResp::~ReceiveDailyKillRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.ReceiveDailyKillRewardResp)
  SharedDtor();
}

void ReceiveDailyKillRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ReceiveDailyKillRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveDailyKillRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveDailyKillRewardResp_descriptor_;
}

const ReceiveDailyKillRewardResp& ReceiveDailyKillRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

ReceiveDailyKillRewardResp* ReceiveDailyKillRewardResp::default_instance_ = NULL;

ReceiveDailyKillRewardResp* ReceiveDailyKillRewardResp::New() const {
  return new ReceiveDailyKillRewardResp;
}

void ReceiveDailyKillRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    shadow_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveDailyKillRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.ReceiveDailyKillRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shadow = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadow_)));
          set_has_shadow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .User.RewardBagInfo reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.ReceiveDailyKillRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.ReceiveDailyKillRewardResp)
  return false;
#undef DO_
}

void ReceiveDailyKillRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.ReceiveDailyKillRewardResp)
  // required uint32 shadow = 1;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shadow(), output);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.ReceiveDailyKillRewardResp)
}

::google::protobuf::uint8* ReceiveDailyKillRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.ReceiveDailyKillRewardResp)
  // required uint32 shadow = 1;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shadow(), target);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.ReceiveDailyKillRewardResp)
  return target;
}

int ReceiveDailyKillRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shadow = 1;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadow());
    }

    // required .User.RewardBagInfo reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveDailyKillRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveDailyKillRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveDailyKillRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveDailyKillRewardResp::MergeFrom(const ReceiveDailyKillRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shadow()) {
      set_shadow(from.shadow());
    }
    if (from.has_reward()) {
      mutable_reward()->::User::RewardBagInfo::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveDailyKillRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveDailyKillRewardResp::CopyFrom(const ReceiveDailyKillRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveDailyKillRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ReceiveDailyKillRewardResp::Swap(ReceiveDailyKillRewardResp* other) {
  if (other != this) {
    std::swap(shadow_, other->shadow_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveDailyKillRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveDailyKillRewardResp_descriptor_;
  metadata.reflection = ReceiveDailyKillRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellComponentCPP::kNum1FieldNumber;
const int SellComponentCPP::kNum2FieldNumber;
#endif  // !_MSC_VER

SellComponentCPP::SellComponentCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.SellComponentCPP)
}

void SellComponentCPP::InitAsDefaultInstance() {
}

SellComponentCPP::SellComponentCPP(const SellComponentCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.SellComponentCPP)
}

void SellComponentCPP::SharedCtor() {
  _cached_size_ = 0;
  num1_ = 0u;
  num2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellComponentCPP::~SellComponentCPP() {
  // @@protoc_insertion_point(destructor:ProtoActivity.SellComponentCPP)
  SharedDtor();
}

void SellComponentCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellComponentCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellComponentCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellComponentCPP_descriptor_;
}

const SellComponentCPP& SellComponentCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

SellComponentCPP* SellComponentCPP::default_instance_ = NULL;

SellComponentCPP* SellComponentCPP::New() const {
  return new SellComponentCPP;
}

void SellComponentCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SellComponentCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num1_, num2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellComponentCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.SellComponentCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num1_)));
          set_has_num1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num2;
        break;
      }

      // required uint32 num2 = 2;
      case 2: {
        if (tag == 16) {
         parse_num2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num2_)));
          set_has_num2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.SellComponentCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.SellComponentCPP)
  return false;
#undef DO_
}

void SellComponentCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.SellComponentCPP)
  // required uint32 num1 = 1;
  if (has_num1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num1(), output);
  }

  // required uint32 num2 = 2;
  if (has_num2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.SellComponentCPP)
}

::google::protobuf::uint8* SellComponentCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.SellComponentCPP)
  // required uint32 num1 = 1;
  if (has_num1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num1(), target);
  }

  // required uint32 num2 = 2;
  if (has_num2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.SellComponentCPP)
  return target;
}

int SellComponentCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num1 = 1;
    if (has_num1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num1());
    }

    // required uint32 num2 = 2;
    if (has_num2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellComponentCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellComponentCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellComponentCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellComponentCPP::MergeFrom(const SellComponentCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num1()) {
      set_num1(from.num1());
    }
    if (from.has_num2()) {
      set_num2(from.num2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellComponentCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellComponentCPP::CopyFrom(const SellComponentCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellComponentCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SellComponentCPP::Swap(SellComponentCPP* other) {
  if (other != this) {
    std::swap(num1_, other->num1_);
    std::swap(num2_, other->num2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellComponentCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellComponentCPP_descriptor_;
  metadata.reflection = SellComponentCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenSellComponentWindowReq::OpenSellComponentWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.OpenSellComponentWindowReq)
}

void OpenSellComponentWindowReq::InitAsDefaultInstance() {
}

OpenSellComponentWindowReq::OpenSellComponentWindowReq(const OpenSellComponentWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.OpenSellComponentWindowReq)
}

void OpenSellComponentWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSellComponentWindowReq::~OpenSellComponentWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.OpenSellComponentWindowReq)
  SharedDtor();
}

void OpenSellComponentWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSellComponentWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSellComponentWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSellComponentWindowReq_descriptor_;
}

const OpenSellComponentWindowReq& OpenSellComponentWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

OpenSellComponentWindowReq* OpenSellComponentWindowReq::default_instance_ = NULL;

OpenSellComponentWindowReq* OpenSellComponentWindowReq::New() const {
  return new OpenSellComponentWindowReq;
}

void OpenSellComponentWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSellComponentWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.OpenSellComponentWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.OpenSellComponentWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.OpenSellComponentWindowReq)
  return false;
#undef DO_
}

void OpenSellComponentWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.OpenSellComponentWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.OpenSellComponentWindowReq)
}

::google::protobuf::uint8* OpenSellComponentWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.OpenSellComponentWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.OpenSellComponentWindowReq)
  return target;
}

int OpenSellComponentWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSellComponentWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSellComponentWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSellComponentWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSellComponentWindowReq::MergeFrom(const OpenSellComponentWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSellComponentWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSellComponentWindowReq::CopyFrom(const OpenSellComponentWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSellComponentWindowReq::IsInitialized() const {

  return true;
}

void OpenSellComponentWindowReq::Swap(OpenSellComponentWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSellComponentWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSellComponentWindowReq_descriptor_;
  metadata.reflection = OpenSellComponentWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenSellComponentWindowResp::kSellinfoFieldNumber;
#endif  // !_MSC_VER

OpenSellComponentWindowResp::OpenSellComponentWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.OpenSellComponentWindowResp)
}

void OpenSellComponentWindowResp::InitAsDefaultInstance() {
  sellinfo_ = const_cast< ::ProtoActivity::SellComponentCPP*>(&::ProtoActivity::SellComponentCPP::default_instance());
}

OpenSellComponentWindowResp::OpenSellComponentWindowResp(const OpenSellComponentWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.OpenSellComponentWindowResp)
}

void OpenSellComponentWindowResp::SharedCtor() {
  _cached_size_ = 0;
  sellinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSellComponentWindowResp::~OpenSellComponentWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.OpenSellComponentWindowResp)
  SharedDtor();
}

void OpenSellComponentWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete sellinfo_;
  }
}

void OpenSellComponentWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSellComponentWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSellComponentWindowResp_descriptor_;
}

const OpenSellComponentWindowResp& OpenSellComponentWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

OpenSellComponentWindowResp* OpenSellComponentWindowResp::default_instance_ = NULL;

OpenSellComponentWindowResp* OpenSellComponentWindowResp::New() const {
  return new OpenSellComponentWindowResp;
}

void OpenSellComponentWindowResp::Clear() {
  if (has_sellinfo()) {
    if (sellinfo_ != NULL) sellinfo_->::ProtoActivity::SellComponentCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSellComponentWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.OpenSellComponentWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoActivity.SellComponentCPP sellinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sellinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.OpenSellComponentWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.OpenSellComponentWindowResp)
  return false;
#undef DO_
}

void OpenSellComponentWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.OpenSellComponentWindowResp)
  // required .ProtoActivity.SellComponentCPP sellinfo = 1;
  if (has_sellinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sellinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.OpenSellComponentWindowResp)
}

::google::protobuf::uint8* OpenSellComponentWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.OpenSellComponentWindowResp)
  // required .ProtoActivity.SellComponentCPP sellinfo = 1;
  if (has_sellinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sellinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.OpenSellComponentWindowResp)
  return target;
}

int OpenSellComponentWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoActivity.SellComponentCPP sellinfo = 1;
    if (has_sellinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sellinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSellComponentWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSellComponentWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSellComponentWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSellComponentWindowResp::MergeFrom(const OpenSellComponentWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sellinfo()) {
      mutable_sellinfo()->::ProtoActivity::SellComponentCPP::MergeFrom(from.sellinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSellComponentWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSellComponentWindowResp::CopyFrom(const OpenSellComponentWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSellComponentWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_sellinfo()) {
    if (!this->sellinfo().IsInitialized()) return false;
  }
  return true;
}

void OpenSellComponentWindowResp::Swap(OpenSellComponentWindowResp* other) {
  if (other != this) {
    std::swap(sellinfo_, other->sellinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSellComponentWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSellComponentWindowResp_descriptor_;
  metadata.reflection = OpenSellComponentWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyComponentReq::kIndexFieldNumber;
#endif  // !_MSC_VER

BuyComponentReq::BuyComponentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.BuyComponentReq)
}

void BuyComponentReq::InitAsDefaultInstance() {
}

BuyComponentReq::BuyComponentReq(const BuyComponentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.BuyComponentReq)
}

void BuyComponentReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyComponentReq::~BuyComponentReq() {
  // @@protoc_insertion_point(destructor:ProtoActivity.BuyComponentReq)
  SharedDtor();
}

void BuyComponentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyComponentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyComponentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyComponentReq_descriptor_;
}

const BuyComponentReq& BuyComponentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

BuyComponentReq* BuyComponentReq::default_instance_ = NULL;

BuyComponentReq* BuyComponentReq::New() const {
  return new BuyComponentReq;
}

void BuyComponentReq::Clear() {
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyComponentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.BuyComponentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.BuyComponentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.BuyComponentReq)
  return false;
#undef DO_
}

void BuyComponentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.BuyComponentReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.BuyComponentReq)
}

::google::protobuf::uint8* BuyComponentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.BuyComponentReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.BuyComponentReq)
  return target;
}

int BuyComponentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyComponentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyComponentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyComponentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyComponentReq::MergeFrom(const BuyComponentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyComponentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyComponentReq::CopyFrom(const BuyComponentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyComponentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyComponentReq::Swap(BuyComponentReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyComponentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyComponentReq_descriptor_;
  metadata.reflection = BuyComponentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyComponentResp::kSellinfoFieldNumber;
const int BuyComponentResp::kRewardFieldNumber;
const int BuyComponentResp::kCashFieldNumber;
const int BuyComponentResp::kIndexFieldNumber;
#endif  // !_MSC_VER

BuyComponentResp::BuyComponentResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivity.BuyComponentResp)
}

void BuyComponentResp::InitAsDefaultInstance() {
  sellinfo_ = const_cast< ::ProtoActivity::SellComponentCPP*>(&::ProtoActivity::SellComponentCPP::default_instance());
  reward_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
}

BuyComponentResp::BuyComponentResp(const BuyComponentResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivity.BuyComponentResp)
}

void BuyComponentResp::SharedCtor() {
  _cached_size_ = 0;
  sellinfo_ = NULL;
  reward_ = NULL;
  cash_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyComponentResp::~BuyComponentResp() {
  // @@protoc_insertion_point(destructor:ProtoActivity.BuyComponentResp)
  SharedDtor();
}

void BuyComponentResp::SharedDtor() {
  if (this != default_instance_) {
    delete sellinfo_;
    delete reward_;
  }
}

void BuyComponentResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyComponentResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyComponentResp_descriptor_;
}

const BuyComponentResp& BuyComponentResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
  return *default_instance_;
}

BuyComponentResp* BuyComponentResp::default_instance_ = NULL;

BuyComponentResp* BuyComponentResp::New() const {
  return new BuyComponentResp;
}

void BuyComponentResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyComponentResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(cash_, index_);
    if (has_sellinfo()) {
      if (sellinfo_ != NULL) sellinfo_->::ProtoActivity::SellComponentCPP::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyComponentResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivity.BuyComponentResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoActivity.SellComponentCPP sellinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sellinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .User.RewardBagInfo reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }

      // required uint32 cash = 3;
      case 3: {
        if (tag == 24) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivity.BuyComponentResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivity.BuyComponentResp)
  return false;
#undef DO_
}

void BuyComponentResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivity.BuyComponentResp)
  // required .ProtoActivity.SellComponentCPP sellinfo = 1;
  if (has_sellinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sellinfo(), output);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivity.BuyComponentResp)
}

::google::protobuf::uint8* BuyComponentResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivity.BuyComponentResp)
  // required .ProtoActivity.SellComponentCPP sellinfo = 1;
  if (has_sellinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sellinfo(), target);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivity.BuyComponentResp)
  return target;
}

int BuyComponentResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoActivity.SellComponentCPP sellinfo = 1;
    if (has_sellinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sellinfo());
    }

    // required .User.RewardBagInfo reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyComponentResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyComponentResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyComponentResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyComponentResp::MergeFrom(const BuyComponentResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sellinfo()) {
      mutable_sellinfo()->::ProtoActivity::SellComponentCPP::MergeFrom(from.sellinfo());
    }
    if (from.has_reward()) {
      mutable_reward()->::User::RewardBagInfo::MergeFrom(from.reward());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyComponentResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyComponentResp::CopyFrom(const BuyComponentResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyComponentResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sellinfo()) {
    if (!this->sellinfo().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void BuyComponentResp::Swap(BuyComponentResp* other) {
  if (other != this) {
    std::swap(sellinfo_, other->sellinfo_);
    std::swap(reward_, other->reward_);
    std::swap(cash_, other->cash_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyComponentResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyComponentResp_descriptor_;
  metadata.reflection = BuyComponentResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoActivity

// @@protoc_insertion_point(global_scope)
