// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef PROTOBUF_User_2eproto__INCLUDED
#define PROTOBUF_User_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBuilding.pb.h"
#include "ProtoBattleField.pb.h"
#include "DataCommon.pb.h"
#include "ProtoHero.pb.h"
#include "ProtoMission.pb.h"
#include "ProtoScience.pb.h"
#include "ProtoYellowVip.pb.h"
#include "ProtoMarket.pb.h"
#include "ProtoWeapon.pb.h"
#include "ProtoPass.pb.h"
#include "ProtoCumulation.pb.h"
#include "ProtoOfficial.pb.h"
#include "ProtoFogGate.pb.h"
#include "ProtoDailyMission.pb.h"
#include "ProtoComponent.pb.h"
#include "ProtoAchievement.pb.h"
// @@protoc_insertion_point(includes)

namespace User {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_User_2eproto();
void protobuf_AssignDesc_User_2eproto();
void protobuf_ShutdownFile_User_2eproto();

class Base;
class Building;
class Hero;
class Science;
class Weapon;
class NPCPass;
class ActivityItem;
class Activity;
class MineItem;
class TimeLimtPropItem;
class EliteNPCInfo;
class EliteNPCInfoAll;
class User;
class Tutorial_stage;
class ServerTime;
class CostCashReq;
class CostCashResp;
class OpenNormalGifgBagReq;
class OpenLuckGifgBagReq;
class OpenGifgBagResp;
class RewardBagInfo;
class UseTimeLimitPropReq;
class UseTimeLimitPropResp;
class UseUpdateSmeltPropReq;
class UseUpdateSmeltPropResp;
class UseSpecificSmeltPropReq;
class UseSpecificSmeltPropResp;
class EliteNPCPushReq;

// ===================================================================

class Base : public ::google::protobuf::Message {
 public:
  Base();
  virtual ~Base();

  Base(const Base& from);

  inline Base& operator=(const Base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Base& default_instance();

  void Swap(Base* other);

  // implements Message ----------------------------------------------

  Base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Base& from);
  void MergeFrom(const Base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 register_platform = 1;
  inline bool has_register_platform() const;
  inline void clear_register_platform();
  static const int kRegisterPlatformFieldNumber = 1;
  inline ::google::protobuf::uint32 register_platform() const;
  inline void set_register_platform(::google::protobuf::uint32 value);

  // required uint32 register_time = 2;
  inline bool has_register_time() const;
  inline void clear_register_time();
  static const int kRegisterTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 register_time() const;
  inline void set_register_time(::google::protobuf::uint32 value);

  // required uint32 invite_uid = 3;
  inline bool has_invite_uid() const;
  inline void clear_invite_uid();
  static const int kInviteUidFieldNumber = 3;
  inline ::google::protobuf::uint32 invite_uid() const;
  inline void set_invite_uid(::google::protobuf::uint32 value);

  // required uint32 last_login_platform = 4;
  inline bool has_last_login_platform() const;
  inline void clear_last_login_platform();
  static const int kLastLoginPlatformFieldNumber = 4;
  inline ::google::protobuf::uint32 last_login_platform() const;
  inline void set_last_login_platform(::google::protobuf::uint32 value);

  // required uint32 last_login_time = 5;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint32 value);

  // required uint32 login_times = 6;
  inline bool has_login_times() const;
  inline void clear_login_times();
  static const int kLoginTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 login_times() const;
  inline void set_login_times(::google::protobuf::uint32 value);

  // required uint32 login_days = 7;
  inline bool has_login_days() const;
  inline void clear_login_days();
  static const int kLoginDaysFieldNumber = 7;
  inline ::google::protobuf::uint32 login_days() const;
  inline void set_login_days(::google::protobuf::uint32 value);

  // required uint32 last_active_time = 8;
  inline bool has_last_active_time() const;
  inline void clear_last_active_time();
  static const int kLastActiveTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 last_active_time() const;
  inline void set_last_active_time(::google::protobuf::uint32 value);

  // required uint32 last_off_time = 9;
  inline bool has_last_off_time() const;
  inline void clear_last_off_time();
  static const int kLastOffTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 last_off_time() const;
  inline void set_last_off_time(::google::protobuf::uint32 value);

  // required uint32 forbid_ts = 10;
  inline bool has_forbid_ts() const;
  inline void clear_forbid_ts();
  static const int kForbidTsFieldNumber = 10;
  inline ::google::protobuf::uint32 forbid_ts() const;
  inline void set_forbid_ts(::google::protobuf::uint32 value);

  // required bytes forbid_reason = 11;
  inline bool has_forbid_reason() const;
  inline void clear_forbid_reason();
  static const int kForbidReasonFieldNumber = 11;
  inline const ::std::string& forbid_reason() const;
  inline void set_forbid_reason(const ::std::string& value);
  inline void set_forbid_reason(const char* value);
  inline void set_forbid_reason(const void* value, size_t size);
  inline ::std::string* mutable_forbid_reason();
  inline ::std::string* release_forbid_reason();
  inline void set_allocated_forbid_reason(::std::string* forbid_reason);

  // required uint32 invite_count = 12;
  inline bool has_invite_count() const;
  inline void clear_invite_count();
  static const int kInviteCountFieldNumber = 12;
  inline ::google::protobuf::uint32 invite_count() const;
  inline void set_invite_count(::google::protobuf::uint32 value);

  // required uint32 today_invite_count = 13;
  inline bool has_today_invite_count() const;
  inline void clear_today_invite_count();
  static const int kTodayInviteCountFieldNumber = 13;
  inline ::google::protobuf::uint32 today_invite_count() const;
  inline void set_today_invite_count(::google::protobuf::uint32 value);

  // required uint32 tutorial_stage = 14;
  inline bool has_tutorial_stage() const;
  inline void clear_tutorial_stage();
  static const int kTutorialStageFieldNumber = 14;
  inline ::google::protobuf::uint32 tutorial_stage() const;
  inline void set_tutorial_stage(::google::protobuf::uint32 value);

  // required bytes name = 15;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 15;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes fig = 16;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 16;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // required uint32 kingdom = 17;
  inline bool has_kingdom() const;
  inline void clear_kingdom();
  static const int kKingdomFieldNumber = 17;
  inline ::google::protobuf::uint32 kingdom() const;
  inline void set_kingdom(::google::protobuf::uint32 value);

  // required uint64 exp = 18;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 18;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // required uint32 level = 19;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 19;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 acccharge = 20;
  inline bool has_acccharge() const;
  inline void clear_acccharge();
  static const int kAccchargeFieldNumber = 20;
  inline ::google::protobuf::uint32 acccharge() const;
  inline void set_acccharge(::google::protobuf::uint32 value);

  // required uint32 viplevel = 21;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 21;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // required uint32 cash = 22;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 22;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // required uint32 coin = 23;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 23;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // required uint32 wood = 24;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 24;
  inline ::google::protobuf::uint32 wood() const;
  inline void set_wood(::google::protobuf::uint32 value);

  // required uint32 food = 25;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 25;
  inline ::google::protobuf::uint32 food() const;
  inline void set_food(::google::protobuf::uint32 value);

  // required uint32 iron = 26;
  inline bool has_iron() const;
  inline void clear_iron();
  static const int kIronFieldNumber = 26;
  inline ::google::protobuf::uint32 iron() const;
  inline void set_iron(::google::protobuf::uint32 value);

  // required uint32 ticket = 27;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 27;
  inline ::google::protobuf::uint32 ticket() const;
  inline void set_ticket(::google::protobuf::uint32 value);

  // required uint32 silk = 28;
  inline bool has_silk() const;
  inline void clear_silk();
  static const int kSilkFieldNumber = 28;
  inline ::google::protobuf::uint32 silk() const;
  inline void set_silk(::google::protobuf::uint32 value);

  // required uint32 order = 29;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 29;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // required uint32 bag = 30;
  inline bool has_bag() const;
  inline void clear_bag();
  static const int kBagFieldNumber = 30;
  inline ::google::protobuf::uint32 bag() const;
  inline void set_bag(::google::protobuf::uint32 value);

  // required uint32 preward = 31;
  inline bool has_preward() const;
  inline void clear_preward();
  static const int kPrewardFieldNumber = 31;
  inline ::google::protobuf::uint32 preward() const;
  inline void set_preward(::google::protobuf::uint32 value);

  // required uint32 loyal = 32;
  inline bool has_loyal() const;
  inline void clear_loyal();
  static const int kLoyalFieldNumber = 32;
  inline ::google::protobuf::uint32 loyal() const;
  inline void set_loyal(::google::protobuf::uint32 value);

  // required uint32 sacrifice = 33;
  inline bool has_sacrifice() const;
  inline void clear_sacrifice();
  static const int kSacrificeFieldNumber = 33;
  inline ::google::protobuf::uint32 sacrifice() const;
  inline void set_sacrifice(::google::protobuf::uint32 value);

  // required uint32 market = 34;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 34;
  inline ::google::protobuf::uint32 market() const;
  inline void set_market(::google::protobuf::uint32 value);

  // required uint32 bmarketcd = 35;
  inline bool has_bmarketcd() const;
  inline void clear_bmarketcd();
  static const int kBmarketcdFieldNumber = 35;
  inline ::google::protobuf::uint32 bmarketcd() const;
  inline void set_bmarketcd(::google::protobuf::uint32 value);

  // required uint32 banquet = 36;
  inline bool has_banquet() const;
  inline void clear_banquet();
  static const int kBanquetFieldNumber = 36;
  inline ::google::protobuf::uint32 banquet() const;
  inline void set_banquet(::google::protobuf::uint32 value);

  // required uint32 eshopintimacy = 37;
  inline bool has_eshopintimacy() const;
  inline void clear_eshopintimacy();
  static const int kEshopintimacyFieldNumber = 37;
  inline ::google::protobuf::uint32 eshopintimacy() const;
  inline void set_eshopintimacy(::google::protobuf::uint32 value);

  // required uint32 eshopcd = 38;
  inline bool has_eshopcd() const;
  inline void clear_eshopcd();
  static const int kEshopcdFieldNumber = 38;
  inline ::google::protobuf::uint32 eshopcd() const;
  inline void set_eshopcd(::google::protobuf::uint32 value);

  // required uint32 refresh = 39;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 39;
  inline ::google::protobuf::uint32 refresh() const;
  inline void set_refresh(::google::protobuf::uint32 value);

  // required uint32 arefresh = 40;
  inline bool has_arefresh() const;
  inline void clear_arefresh();
  static const int kArefreshFieldNumber = 40;
  inline ::google::protobuf::uint32 arefresh() const;
  inline void set_arefresh(::google::protobuf::uint32 value);

  // required uint32 harmmer = 41;
  inline bool has_harmmer() const;
  inline void clear_harmmer();
  static const int kHarmmerFieldNumber = 41;
  inline ::google::protobuf::uint32 harmmer() const;
  inline void set_harmmer(::google::protobuf::uint32 value);

  // required uint32 shadow = 42;
  inline bool has_shadow() const;
  inline void clear_shadow();
  static const int kShadowFieldNumber = 42;
  inline ::google::protobuf::uint32 shadow() const;
  inline void set_shadow(::google::protobuf::uint32 value);

  // required uint32 up_res_time = 43;
  inline bool has_up_res_time() const;
  inline void clear_up_res_time();
  static const int kUpResTimeFieldNumber = 43;
  inline ::google::protobuf::uint32 up_res_time() const;
  inline void set_up_res_time(::google::protobuf::uint32 value);

  // required uint32 rests = 44;
  inline bool has_rests() const;
  inline void clear_rests();
  static const int kRestsFieldNumber = 44;
  inline ::google::protobuf::uint32 rests() const;
  inline void set_rests(::google::protobuf::uint32 value);

  // required uint32 mp1 = 45;
  inline bool has_mp1() const;
  inline void clear_mp1();
  static const int kMp1FieldNumber = 45;
  inline ::google::protobuf::uint32 mp1() const;
  inline void set_mp1(::google::protobuf::uint32 value);

  // required uint32 mp2 = 46;
  inline bool has_mp2() const;
  inline void clear_mp2();
  static const int kMp2FieldNumber = 46;
  inline ::google::protobuf::uint32 mp2() const;
  inline void set_mp2(::google::protobuf::uint32 value);

  // required uint32 mk1 = 47;
  inline bool has_mk1() const;
  inline void clear_mk1();
  static const int kMk1FieldNumber = 47;
  inline ::google::protobuf::uint32 mk1() const;
  inline void set_mk1(::google::protobuf::uint32 value);

  // required uint32 mk2 = 48;
  inline bool has_mk2() const;
  inline void clear_mk2();
  static const int kMk2FieldNumber = 48;
  inline ::google::protobuf::uint32 mk2() const;
  inline void set_mk2(::google::protobuf::uint32 value);

  // required uint32 rewardb = 49;
  inline bool has_rewardb() const;
  inline void clear_rewardb();
  static const int kRewardbFieldNumber = 49;
  inline ::google::protobuf::uint32 rewardb() const;
  inline void set_rewardb(::google::protobuf::uint32 value);

  // required uint32 mp3 = 50;
  inline bool has_mp3() const;
  inline void clear_mp3();
  static const int kMp3FieldNumber = 50;
  inline ::google::protobuf::uint32 mp3() const;
  inline void set_mp3(::google::protobuf::uint32 value);

  // required uint32 npc_pass = 51;
  inline bool has_npc_pass() const;
  inline void clear_npc_pass();
  static const int kNpcPassFieldNumber = 51;
  inline ::google::protobuf::uint32 npc_pass() const;
  inline void set_npc_pass(::google::protobuf::uint32 value);

  // required uint32 flamen_coins_cnt = 52;
  inline bool has_flamen_coins_cnt() const;
  inline void clear_flamen_coins_cnt();
  static const int kFlamenCoinsCntFieldNumber = 52;
  inline ::google::protobuf::uint32 flamen_coins_cnt() const;
  inline void set_flamen_coins_cnt(::google::protobuf::uint32 value);

  // required uint32 flamem_wood_cnt = 53;
  inline bool has_flamem_wood_cnt() const;
  inline void clear_flamem_wood_cnt();
  static const int kFlamemWoodCntFieldNumber = 53;
  inline ::google::protobuf::uint32 flamem_wood_cnt() const;
  inline void set_flamem_wood_cnt(::google::protobuf::uint32 value);

  // required uint32 flamem_food_cnt = 54;
  inline bool has_flamem_food_cnt() const;
  inline void clear_flamem_food_cnt();
  static const int kFlamemFoodCntFieldNumber = 54;
  inline ::google::protobuf::uint32 flamem_food_cnt() const;
  inline void set_flamem_food_cnt(::google::protobuf::uint32 value);

  // required uint32 flamem_iron_cnt = 55;
  inline bool has_flamem_iron_cnt() const;
  inline void clear_flamem_iron_cnt();
  static const int kFlamemIronCntFieldNumber = 55;
  inline ::google::protobuf::uint32 flamem_iron_cnt() const;
  inline void set_flamem_iron_cnt(::google::protobuf::uint32 value);

  // required uint32 first_recharge = 56;
  inline bool has_first_recharge() const;
  inline void clear_first_recharge();
  static const int kFirstRechargeFieldNumber = 56;
  inline ::google::protobuf::uint32 first_recharge() const;
  inline void set_first_recharge(::google::protobuf::uint32 value);

  // required uint32 auto_build_flag = 57;
  inline bool has_auto_build_flag() const;
  inline void clear_auto_build_flag();
  static const int kAutoBuildFlagFieldNumber = 57;
  inline ::google::protobuf::uint32 auto_build_flag() const;
  inline void set_auto_build_flag(::google::protobuf::uint32 value);

  // required uint32 integral_time_cnt = 58;
  inline bool has_integral_time_cnt() const;
  inline void clear_integral_time_cnt();
  static const int kIntegralTimeCntFieldNumber = 58;
  inline ::google::protobuf::uint32 integral_time_cnt() const;
  inline void set_integral_time_cnt(::google::protobuf::uint32 value);

  // required uint32 mission_time = 59;
  inline bool has_mission_time() const;
  inline void clear_mission_time();
  static const int kMissionTimeFieldNumber = 59;
  inline ::google::protobuf::uint32 mission_time() const;
  inline void set_mission_time(::google::protobuf::uint32 value);

  // required uint32 mission_id = 60;
  inline bool has_mission_id() const;
  inline void clear_mission_id();
  static const int kMissionIdFieldNumber = 60;
  inline ::google::protobuf::uint32 mission_id() const;
  inline void set_mission_id(::google::protobuf::uint32 value);

  // required uint32 vip_reward = 61;
  inline bool has_vip_reward() const;
  inline void clear_vip_reward();
  static const int kVipRewardFieldNumber = 61;
  inline ::google::protobuf::uint32 vip_reward() const;
  inline void set_vip_reward(::google::protobuf::uint32 value);

  // required uint32 ladder = 62;
  inline bool has_ladder() const;
  inline void clear_ladder();
  static const int kLadderFieldNumber = 62;
  inline ::google::protobuf::uint32 ladder() const;
  inline void set_ladder(::google::protobuf::uint32 value);

  // required uint32 ladder_ts = 63;
  inline bool has_ladder_ts() const;
  inline void clear_ladder_ts();
  static const int kLadderTsFieldNumber = 63;
  inline ::google::protobuf::uint32 ladder_ts() const;
  inline void set_ladder_ts(::google::protobuf::uint32 value);

  // required uint32 job_reward_ts = 64;
  inline bool has_job_reward_ts() const;
  inline void clear_job_reward_ts();
  static const int kJobRewardTsFieldNumber = 64;
  inline ::google::protobuf::uint32 job_reward_ts() const;
  inline void set_job_reward_ts(::google::protobuf::uint32 value);

  // required uint32 department = 65;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 65;
  inline ::google::protobuf::uint32 department() const;
  inline void set_department(::google::protobuf::uint32 value);

  // required uint32 official = 66;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 66;
  inline ::google::protobuf::uint32 official() const;
  inline void set_official(::google::protobuf::uint32 value);

  // optional uint32 prestige = 67;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 67;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);

  // required uint32 token_ts = 68;
  inline bool has_token_ts() const;
  inline void clear_token_ts();
  static const int kTokenTsFieldNumber = 68;
  inline ::google::protobuf::uint32 token_ts() const;
  inline void set_token_ts(::google::protobuf::uint32 value);

  // required uint32 daily_refresh_ts = 69;
  inline bool has_daily_refresh_ts() const;
  inline void clear_daily_refresh_ts();
  static const int kDailyRefreshTsFieldNumber = 69;
  inline ::google::protobuf::uint32 daily_refresh_ts() const;
  inline void set_daily_refresh_ts(::google::protobuf::uint32 value);

  // required uint32 daily_reward_times = 70;
  inline bool has_daily_reward_times() const;
  inline void clear_daily_reward_times();
  static const int kDailyRewardTimesFieldNumber = 70;
  inline ::google::protobuf::uint32 daily_reward_times() const;
  inline void set_daily_reward_times(::google::protobuf::uint32 value);

  // required uint32 daily_free_times = 71;
  inline bool has_daily_free_times() const;
  inline void clear_daily_free_times();
  static const int kDailyFreeTimesFieldNumber = 71;
  inline ::google::protobuf::uint32 daily_free_times() const;
  inline void set_daily_free_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.Base)
 private:
  inline void set_has_register_platform();
  inline void clear_has_register_platform();
  inline void set_has_register_time();
  inline void clear_has_register_time();
  inline void set_has_invite_uid();
  inline void clear_has_invite_uid();
  inline void set_has_last_login_platform();
  inline void clear_has_last_login_platform();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_login_times();
  inline void clear_has_login_times();
  inline void set_has_login_days();
  inline void clear_has_login_days();
  inline void set_has_last_active_time();
  inline void clear_has_last_active_time();
  inline void set_has_last_off_time();
  inline void clear_has_last_off_time();
  inline void set_has_forbid_ts();
  inline void clear_has_forbid_ts();
  inline void set_has_forbid_reason();
  inline void clear_has_forbid_reason();
  inline void set_has_invite_count();
  inline void clear_has_invite_count();
  inline void set_has_today_invite_count();
  inline void clear_has_today_invite_count();
  inline void set_has_tutorial_stage();
  inline void clear_has_tutorial_stage();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_kingdom();
  inline void clear_has_kingdom();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_acccharge();
  inline void clear_has_acccharge();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_iron();
  inline void clear_has_iron();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_silk();
  inline void clear_has_silk();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_bag();
  inline void clear_has_bag();
  inline void set_has_preward();
  inline void clear_has_preward();
  inline void set_has_loyal();
  inline void clear_has_loyal();
  inline void set_has_sacrifice();
  inline void clear_has_sacrifice();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_bmarketcd();
  inline void clear_has_bmarketcd();
  inline void set_has_banquet();
  inline void clear_has_banquet();
  inline void set_has_eshopintimacy();
  inline void clear_has_eshopintimacy();
  inline void set_has_eshopcd();
  inline void clear_has_eshopcd();
  inline void set_has_refresh();
  inline void clear_has_refresh();
  inline void set_has_arefresh();
  inline void clear_has_arefresh();
  inline void set_has_harmmer();
  inline void clear_has_harmmer();
  inline void set_has_shadow();
  inline void clear_has_shadow();
  inline void set_has_up_res_time();
  inline void clear_has_up_res_time();
  inline void set_has_rests();
  inline void clear_has_rests();
  inline void set_has_mp1();
  inline void clear_has_mp1();
  inline void set_has_mp2();
  inline void clear_has_mp2();
  inline void set_has_mk1();
  inline void clear_has_mk1();
  inline void set_has_mk2();
  inline void clear_has_mk2();
  inline void set_has_rewardb();
  inline void clear_has_rewardb();
  inline void set_has_mp3();
  inline void clear_has_mp3();
  inline void set_has_npc_pass();
  inline void clear_has_npc_pass();
  inline void set_has_flamen_coins_cnt();
  inline void clear_has_flamen_coins_cnt();
  inline void set_has_flamem_wood_cnt();
  inline void clear_has_flamem_wood_cnt();
  inline void set_has_flamem_food_cnt();
  inline void clear_has_flamem_food_cnt();
  inline void set_has_flamem_iron_cnt();
  inline void clear_has_flamem_iron_cnt();
  inline void set_has_first_recharge();
  inline void clear_has_first_recharge();
  inline void set_has_auto_build_flag();
  inline void clear_has_auto_build_flag();
  inline void set_has_integral_time_cnt();
  inline void clear_has_integral_time_cnt();
  inline void set_has_mission_time();
  inline void clear_has_mission_time();
  inline void set_has_mission_id();
  inline void clear_has_mission_id();
  inline void set_has_vip_reward();
  inline void clear_has_vip_reward();
  inline void set_has_ladder();
  inline void clear_has_ladder();
  inline void set_has_ladder_ts();
  inline void clear_has_ladder_ts();
  inline void set_has_job_reward_ts();
  inline void clear_has_job_reward_ts();
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_token_ts();
  inline void clear_has_token_ts();
  inline void set_has_daily_refresh_ts();
  inline void clear_has_daily_refresh_ts();
  inline void set_has_daily_reward_times();
  inline void clear_has_daily_reward_times();
  inline void set_has_daily_free_times();
  inline void clear_has_daily_free_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::google::protobuf::uint32 register_platform_;
  ::google::protobuf::uint32 register_time_;
  ::google::protobuf::uint32 invite_uid_;
  ::google::protobuf::uint32 last_login_platform_;
  ::google::protobuf::uint32 last_login_time_;
  ::google::protobuf::uint32 login_times_;
  ::google::protobuf::uint32 login_days_;
  ::google::protobuf::uint32 last_active_time_;
  ::google::protobuf::uint32 last_off_time_;
  ::google::protobuf::uint32 forbid_ts_;
  ::std::string* forbid_reason_;
  ::google::protobuf::uint32 invite_count_;
  ::google::protobuf::uint32 today_invite_count_;
  ::std::string* name_;
  ::google::protobuf::uint32 tutorial_stage_;
  ::google::protobuf::uint32 kingdom_;
  ::std::string* fig_;
  ::google::protobuf::uint64 exp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 acccharge_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 wood_;
  ::google::protobuf::uint32 food_;
  ::google::protobuf::uint32 iron_;
  ::google::protobuf::uint32 ticket_;
  ::google::protobuf::uint32 silk_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::uint32 bag_;
  ::google::protobuf::uint32 preward_;
  ::google::protobuf::uint32 loyal_;
  ::google::protobuf::uint32 sacrifice_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 bmarketcd_;
  ::google::protobuf::uint32 banquet_;
  ::google::protobuf::uint32 eshopintimacy_;
  ::google::protobuf::uint32 eshopcd_;
  ::google::protobuf::uint32 refresh_;
  ::google::protobuf::uint32 arefresh_;
  ::google::protobuf::uint32 harmmer_;
  ::google::protobuf::uint32 shadow_;
  ::google::protobuf::uint32 up_res_time_;
  ::google::protobuf::uint32 rests_;
  ::google::protobuf::uint32 mp1_;
  ::google::protobuf::uint32 mp2_;
  ::google::protobuf::uint32 mk1_;
  ::google::protobuf::uint32 mk2_;
  ::google::protobuf::uint32 rewardb_;
  ::google::protobuf::uint32 mp3_;
  ::google::protobuf::uint32 npc_pass_;
  ::google::protobuf::uint32 flamen_coins_cnt_;
  ::google::protobuf::uint32 flamem_wood_cnt_;
  ::google::protobuf::uint32 flamem_food_cnt_;
  ::google::protobuf::uint32 flamem_iron_cnt_;
  ::google::protobuf::uint32 first_recharge_;
  ::google::protobuf::uint32 auto_build_flag_;
  ::google::protobuf::uint32 integral_time_cnt_;
  ::google::protobuf::uint32 mission_time_;
  ::google::protobuf::uint32 mission_id_;
  ::google::protobuf::uint32 vip_reward_;
  ::google::protobuf::uint32 ladder_;
  ::google::protobuf::uint32 ladder_ts_;
  ::google::protobuf::uint32 job_reward_ts_;
  ::google::protobuf::uint32 department_;
  ::google::protobuf::uint32 official_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 token_ts_;
  ::google::protobuf::uint32 daily_refresh_ts_;
  ::google::protobuf::uint32 daily_reward_times_;
  ::google::protobuf::uint32 daily_free_times_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Base* default_instance_;
};
// -------------------------------------------------------------------

class Building : public ::google::protobuf::Message {
 public:
  Building();
  virtual ~Building();

  Building(const Building& from);

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Building& default_instance();

  void Swap(Building* other);

  // implements Message ----------------------------------------------

  Building* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuilding.BuildInfo builds = 1;
  inline int builds_size() const;
  inline void clear_builds();
  static const int kBuildsFieldNumber = 1;
  inline const ::ProtoBuilding::BuildInfo& builds(int index) const;
  inline ::ProtoBuilding::BuildInfo* mutable_builds(int index);
  inline ::ProtoBuilding::BuildInfo* add_builds();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildInfo >&
      builds() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildInfo >*
      mutable_builds();

  // required .ProtoBuilding.BuildQueue queue = 2;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 2;
  inline const ::ProtoBuilding::BuildQueue& queue() const;
  inline ::ProtoBuilding::BuildQueue* mutable_queue();
  inline ::ProtoBuilding::BuildQueue* release_queue();
  inline void set_allocated_queue(::ProtoBuilding::BuildQueue* queue);

  // repeated .ProtoBuilding.BuildYield yield = 3;
  inline int yield_size() const;
  inline void clear_yield();
  static const int kYieldFieldNumber = 3;
  inline const ::ProtoBuilding::BuildYield& yield(int index) const;
  inline ::ProtoBuilding::BuildYield* mutable_yield(int index);
  inline ::ProtoBuilding::BuildYield* add_yield();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildYield >&
      yield() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildYield >*
      mutable_yield();

  // @@protoc_insertion_point(class_scope:User.Building)
 private:
  inline void set_has_queue();
  inline void clear_has_queue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildInfo > builds_;
  ::ProtoBuilding::BuildQueue* queue_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildYield > yield_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Building* default_instance_;
};
// -------------------------------------------------------------------

class Hero : public ::google::protobuf::Message {
 public:
  Hero();
  virtual ~Hero();

  Hero(const Hero& from);

  inline Hero& operator=(const Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hero& default_instance();

  void Swap(Hero* other);

  // implements Message ----------------------------------------------

  Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hero& from);
  void MergeFrom(const Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  inline int hero_size() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  inline const ::ProtoHero::HeroBaseInfoCPP& hero(int index) const;
  inline ::ProtoHero::HeroBaseInfoCPP* mutable_hero(int index);
  inline ::ProtoHero::HeroBaseInfoCPP* add_hero();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >&
      hero() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >*
      mutable_hero();

  // repeated .ProtoHero.HeroSoldiersCPP soldiers = 2;
  inline int soldiers_size() const;
  inline void clear_soldiers();
  static const int kSoldiersFieldNumber = 2;
  inline const ::ProtoHero::HeroSoldiersCPP& soldiers(int index) const;
  inline ::ProtoHero::HeroSoldiersCPP* mutable_soldiers(int index);
  inline ::ProtoHero::HeroSoldiersCPP* add_soldiers();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroSoldiersCPP >&
      soldiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroSoldiersCPP >*
      mutable_soldiers();

  // @@protoc_insertion_point(class_scope:User.Hero)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP > hero_;
  ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroSoldiersCPP > soldiers_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Hero* default_instance_;
};
// -------------------------------------------------------------------

class Science : public ::google::protobuf::Message {
 public:
  Science();
  virtual ~Science();

  Science(const Science& from);

  inline Science& operator=(const Science& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Science& default_instance();

  void Swap(Science* other);

  // implements Message ----------------------------------------------

  Science* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Science& from);
  void MergeFrom(const Science& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoScience.ScienceItemCPP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::ProtoScience::ScienceItemCPP& items(int index) const;
  inline ::ProtoScience::ScienceItemCPP* mutable_items(int index);
  inline ::ProtoScience::ScienceItemCPP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoScience::ScienceItemCPP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoScience::ScienceItemCPP >*
      mutable_items();

  // required uint32 recruit_hero_capacity = 2;
  inline bool has_recruit_hero_capacity() const;
  inline void clear_recruit_hero_capacity();
  static const int kRecruitHeroCapacityFieldNumber = 2;
  inline ::google::protobuf::uint32 recruit_hero_capacity() const;
  inline void set_recruit_hero_capacity(::google::protobuf::uint32 value);

  // required uint32 soldiers_row = 3;
  inline bool has_soldiers_row() const;
  inline void clear_soldiers_row();
  static const int kSoldiersRowFieldNumber = 3;
  inline ::google::protobuf::uint32 soldiers_row() const;
  inline void set_soldiers_row(::google::protobuf::uint32 value);

  // required uint32 soldiers_level = 4;
  inline bool has_soldiers_level() const;
  inline void clear_soldiers_level();
  static const int kSoldiersLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 soldiers_level() const;
  inline void set_soldiers_level(::google::protobuf::uint32 value);

  // required uint32 exploit_box_level = 5;
  inline bool has_exploit_box_level() const;
  inline void clear_exploit_box_level();
  static const int kExploitBoxLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 exploit_box_level() const;
  inline void set_exploit_box_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.Science)
 private:
  inline void set_has_recruit_hero_capacity();
  inline void clear_has_recruit_hero_capacity();
  inline void set_has_soldiers_row();
  inline void clear_has_soldiers_row();
  inline void set_has_soldiers_level();
  inline void clear_has_soldiers_level();
  inline void set_has_exploit_box_level();
  inline void clear_has_exploit_box_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoScience::ScienceItemCPP > items_;
  ::google::protobuf::uint32 recruit_hero_capacity_;
  ::google::protobuf::uint32 soldiers_row_;
  ::google::protobuf::uint32 soldiers_level_;
  ::google::protobuf::uint32 exploit_box_level_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Science* default_instance_;
};
// -------------------------------------------------------------------

class Weapon : public ::google::protobuf::Message {
 public:
  Weapon();
  virtual ~Weapon();

  Weapon(const Weapon& from);

  inline Weapon& operator=(const Weapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weapon& default_instance();

  void Swap(Weapon* other);

  // implements Message ----------------------------------------------

  Weapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Weapon& from);
  void MergeFrom(const Weapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoWeapon.WeaponInfoCPP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::ProtoWeapon::WeaponInfoCPP& items(int index) const;
  inline ::ProtoWeapon::WeaponInfoCPP* mutable_items(int index);
  inline ::ProtoWeapon::WeaponInfoCPP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoWeapon::WeaponInfoCPP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoWeapon::WeaponInfoCPP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:User.Weapon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoWeapon::WeaponInfoCPP > items_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Weapon* default_instance_;
};
// -------------------------------------------------------------------

class NPCPass : public ::google::protobuf::Message {
 public:
  NPCPass();
  virtual ~NPCPass();

  NPCPass(const NPCPass& from);

  inline NPCPass& operator=(const NPCPass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCPass& default_instance();

  void Swap(NPCPass* other);

  // implements Message ----------------------------------------------

  NPCPass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCPass& from);
  void MergeFrom(const NPCPass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoPass.NPCPassRecord items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::ProtoPass::NPCPassRecord& items(int index) const;
  inline ::ProtoPass::NPCPassRecord* mutable_items(int index);
  inline ::ProtoPass::NPCPassRecord* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPass::NPCPassRecord >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPass::NPCPassRecord >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:User.NPCPass)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPass::NPCPassRecord > items_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static NPCPass* default_instance_;
};
// -------------------------------------------------------------------

class ActivityItem : public ::google::protobuf::Message {
 public:
  ActivityItem();
  virtual ~ActivityItem();

  ActivityItem(const ActivityItem& from);

  inline ActivityItem& operator=(const ActivityItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityItem& default_instance();

  void Swap(ActivityItem* other);

  // implements Message ----------------------------------------------

  ActivityItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityItem& from);
  void MergeFrom(const ActivityItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 bts = 2;
  inline bool has_bts() const;
  inline void clear_bts();
  static const int kBtsFieldNumber = 2;
  inline ::google::protobuf::uint32 bts() const;
  inline void set_bts(::google::protobuf::uint32 value);

  // required uint32 ets = 3;
  inline bool has_ets() const;
  inline void clear_ets();
  static const int kEtsFieldNumber = 3;
  inline ::google::protobuf::uint32 ets() const;
  inline void set_ets(::google::protobuf::uint32 value);

  // required uint32 ver = 4;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 4;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.ActivityItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bts();
  inline void clear_has_bts();
  inline void set_has_ets();
  inline void clear_has_ets();
  inline void set_has_ver();
  inline void clear_has_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 bts_;
  ::google::protobuf::uint32 ets_;
  ::google::protobuf::uint32 ver_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static ActivityItem* default_instance_;
};
// -------------------------------------------------------------------

class Activity : public ::google::protobuf::Message {
 public:
  Activity();
  virtual ~Activity();

  Activity(const Activity& from);

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Activity& default_instance();

  void Swap(Activity* other);

  // implements Message ----------------------------------------------

  Activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .User.ActivityItem act = 1;
  inline int act_size() const;
  inline void clear_act();
  static const int kActFieldNumber = 1;
  inline const ::User::ActivityItem& act(int index) const;
  inline ::User::ActivityItem* mutable_act(int index);
  inline ::User::ActivityItem* add_act();
  inline const ::google::protobuf::RepeatedPtrField< ::User::ActivityItem >&
      act() const;
  inline ::google::protobuf::RepeatedPtrField< ::User::ActivityItem >*
      mutable_act();

  // @@protoc_insertion_point(class_scope:User.Activity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::User::ActivityItem > act_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Activity* default_instance_;
};
// -------------------------------------------------------------------

class MineItem : public ::google::protobuf::Message {
 public:
  MineItem();
  virtual ~MineItem();

  MineItem(const MineItem& from);

  inline MineItem& operator=(const MineItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineItem& default_instance();

  void Swap(MineItem* other);

  // implements Message ----------------------------------------------

  MineItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineItem& from);
  void MergeFrom(const MineItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mine_reward_ts = 1;
  inline bool has_mine_reward_ts() const;
  inline void clear_mine_reward_ts();
  static const int kMineRewardTsFieldNumber = 1;
  inline ::google::protobuf::uint32 mine_reward_ts() const;
  inline void set_mine_reward_ts(::google::protobuf::uint32 value);

  // required bool mine_kingdom_status = 2;
  inline bool has_mine_kingdom_status() const;
  inline void clear_mine_kingdom_status();
  static const int kMineKingdomStatusFieldNumber = 2;
  inline bool mine_kingdom_status() const;
  inline void set_mine_kingdom_status(bool value);

  // @@protoc_insertion_point(class_scope:User.MineItem)
 private:
  inline void set_has_mine_reward_ts();
  inline void clear_has_mine_reward_ts();
  inline void set_has_mine_kingdom_status();
  inline void clear_has_mine_kingdom_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mine_reward_ts_;
  bool mine_kingdom_status_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static MineItem* default_instance_;
};
// -------------------------------------------------------------------

class TimeLimtPropItem : public ::google::protobuf::Message {
 public:
  TimeLimtPropItem();
  virtual ~TimeLimtPropItem();

  TimeLimtPropItem(const TimeLimtPropItem& from);

  inline TimeLimtPropItem& operator=(const TimeLimtPropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeLimtPropItem& default_instance();

  void Swap(TimeLimtPropItem* other);

  // implements Message ----------------------------------------------

  TimeLimtPropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeLimtPropItem& from);
  void MergeFrom(const TimeLimtPropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 expire_time = 2;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.TimeLimtPropItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 expire_time_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static TimeLimtPropItem* default_instance_;
};
// -------------------------------------------------------------------

class EliteNPCInfo : public ::google::protobuf::Message {
 public:
  EliteNPCInfo();
  virtual ~EliteNPCInfo();

  EliteNPCInfo(const EliteNPCInfo& from);

  inline EliteNPCInfo& operator=(const EliteNPCInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteNPCInfo& default_instance();

  void Swap(EliteNPCInfo* other);

  // implements Message ----------------------------------------------

  EliteNPCInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteNPCInfo& from);
  void MergeFrom(const EliteNPCInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.EliteNPCInfo)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static EliteNPCInfo* default_instance_;
};
// -------------------------------------------------------------------

class EliteNPCInfoAll : public ::google::protobuf::Message {
 public:
  EliteNPCInfoAll();
  virtual ~EliteNPCInfoAll();

  EliteNPCInfoAll(const EliteNPCInfoAll& from);

  inline EliteNPCInfoAll& operator=(const EliteNPCInfoAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteNPCInfoAll& default_instance();

  void Swap(EliteNPCInfoAll* other);

  // implements Message ----------------------------------------------

  EliteNPCInfoAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteNPCInfoAll& from);
  void MergeFrom(const EliteNPCInfoAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .User.EliteNPCInfo npc = 1;
  inline int npc_size() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 1;
  inline const ::User::EliteNPCInfo& npc(int index) const;
  inline ::User::EliteNPCInfo* mutable_npc(int index);
  inline ::User::EliteNPCInfo* add_npc();
  inline const ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >&
      npc() const;
  inline ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >*
      mutable_npc();

  // @@protoc_insertion_point(class_scope:User.EliteNPCInfoAll)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo > npc_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static EliteNPCInfoAll* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .User.Base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::User::Base& base() const;
  inline ::User::Base* mutable_base();
  inline ::User::Base* release_base();
  inline void set_allocated_base(::User::Base* base);

  // required .User.Building building = 2;
  inline bool has_building() const;
  inline void clear_building();
  static const int kBuildingFieldNumber = 2;
  inline const ::User::Building& building() const;
  inline ::User::Building* mutable_building();
  inline ::User::Building* release_building();
  inline void set_allocated_building(::User::Building* building);

  // required .User.Hero heroes = 3;
  inline bool has_heroes() const;
  inline void clear_heroes();
  static const int kHeroesFieldNumber = 3;
  inline const ::User::Hero& heroes() const;
  inline ::User::Hero* mutable_heroes();
  inline ::User::Hero* release_heroes();
  inline void set_allocated_heroes(::User::Hero* heroes);

  // repeated .DataCommon.EquipmentCPP equip = 4;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 4;
  inline const ::DataCommon::EquipmentCPP& equip(int index) const;
  inline ::DataCommon::EquipmentCPP* mutable_equip(int index);
  inline ::DataCommon::EquipmentCPP* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipmentCPP >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipmentCPP >*
      mutable_equip();

  // repeated .DataCommon.EquipShopCPP equipshop = 5;
  inline int equipshop_size() const;
  inline void clear_equipshop();
  static const int kEquipshopFieldNumber = 5;
  inline const ::DataCommon::EquipShopCPP& equipshop(int index) const;
  inline ::DataCommon::EquipShopCPP* mutable_equipshop(int index);
  inline ::DataCommon::EquipShopCPP* add_equipshop();
  inline const ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipShopCPP >&
      equipshop() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipShopCPP >*
      mutable_equipshop();

  // required .ProtoBattleField.Field field = 6;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 6;
  inline const ::ProtoBattleField::Field& field() const;
  inline ::ProtoBattleField::Field* mutable_field();
  inline ::ProtoBattleField::Field* release_field();
  inline void set_allocated_field(::ProtoBattleField::Field* field);

  // required .ProtoMission.MissionAllCPP mission = 7;
  inline bool has_mission() const;
  inline void clear_mission();
  static const int kMissionFieldNumber = 7;
  inline const ::ProtoMission::MissionAllCPP& mission() const;
  inline ::ProtoMission::MissionAllCPP* mutable_mission();
  inline ::ProtoMission::MissionAllCPP* release_mission();
  inline void set_allocated_mission(::ProtoMission::MissionAllCPP* mission);

  // required .User.Science science = 8;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 8;
  inline const ::User::Science& science() const;
  inline ::User::Science* mutable_science();
  inline ::User::Science* release_science();
  inline void set_allocated_science(::User::Science* science);

  // required uint32 ts = 9;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 9;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // required .ProtoYellowVip.YellowVipCPP yellowvip = 10;
  inline bool has_yellowvip() const;
  inline void clear_yellowvip();
  static const int kYellowvipFieldNumber = 10;
  inline const ::ProtoYellowVip::YellowVipCPP& yellowvip() const;
  inline ::ProtoYellowVip::YellowVipCPP* mutable_yellowvip();
  inline ::ProtoYellowVip::YellowVipCPP* release_yellowvip();
  inline void set_allocated_yellowvip(::ProtoYellowVip::YellowVipCPP* yellowvip);

  // optional .ProtoMarket.MarketCPP market = 11;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 11;
  inline const ::ProtoMarket::MarketCPP& market() const;
  inline ::ProtoMarket::MarketCPP* mutable_market();
  inline ::ProtoMarket::MarketCPP* release_market();
  inline void set_allocated_market(::ProtoMarket::MarketCPP* market);

  // required .ProtoBattleField.ReplyRewardInfo reward = 12;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 12;
  inline const ::ProtoBattleField::ReplyRewardInfo& reward() const;
  inline ::ProtoBattleField::ReplyRewardInfo* mutable_reward();
  inline ::ProtoBattleField::ReplyRewardInfo* release_reward();
  inline void set_allocated_reward(::ProtoBattleField::ReplyRewardInfo* reward);

  // required .User.Weapon weapon = 13;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 13;
  inline const ::User::Weapon& weapon() const;
  inline ::User::Weapon* mutable_weapon();
  inline ::User::Weapon* release_weapon();
  inline void set_allocated_weapon(::User::Weapon* weapon);

  // required .User.NPCPass npcpass = 14;
  inline bool has_npcpass() const;
  inline void clear_npcpass();
  static const int kNpcpassFieldNumber = 14;
  inline const ::User::NPCPass& npcpass() const;
  inline ::User::NPCPass* mutable_npcpass();
  inline ::User::NPCPass* release_npcpass();
  inline void set_allocated_npcpass(::User::NPCPass* npcpass);

  // required .ProtoCumulation.CumulationCPP cumulation = 15;
  inline bool has_cumulation() const;
  inline void clear_cumulation();
  static const int kCumulationFieldNumber = 15;
  inline const ::ProtoCumulation::CumulationCPP& cumulation() const;
  inline ::ProtoCumulation::CumulationCPP* mutable_cumulation();
  inline ::ProtoCumulation::CumulationCPP* release_cumulation();
  inline void set_allocated_cumulation(::ProtoCumulation::CumulationCPP* cumulation);

  // required .User.Activity activity = 16;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 16;
  inline const ::User::Activity& activity() const;
  inline ::User::Activity* mutable_activity();
  inline ::User::Activity* release_activity();
  inline void set_allocated_activity(::User::Activity* activity);

  // repeated .ProtoOfficial.PublishToken token = 17;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 17;
  inline const ::ProtoOfficial::PublishToken& token(int index) const;
  inline ::ProtoOfficial::PublishToken* mutable_token(int index);
  inline ::ProtoOfficial::PublishToken* add_token();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoOfficial::PublishToken >&
      token() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoOfficial::PublishToken >*
      mutable_token();

  // required .ProtoFogGate.FogGateCPPAll foggates = 18;
  inline bool has_foggates() const;
  inline void clear_foggates();
  static const int kFoggatesFieldNumber = 18;
  inline const ::ProtoFogGate::FogGateCPPAll& foggates() const;
  inline ::ProtoFogGate::FogGateCPPAll* mutable_foggates();
  inline ::ProtoFogGate::FogGateCPPAll* release_foggates();
  inline void set_allocated_foggates(::ProtoFogGate::FogGateCPPAll* foggates);

  // required .User.MineItem mine = 19;
  inline bool has_mine() const;
  inline void clear_mine();
  static const int kMineFieldNumber = 19;
  inline const ::User::MineItem& mine() const;
  inline ::User::MineItem* mutable_mine();
  inline ::User::MineItem* release_mine();
  inline void set_allocated_mine(::User::MineItem* mine);

  // required .ProtoDailyMission.DailyMissionAllCPP dailymissions = 20;
  inline bool has_dailymissions() const;
  inline void clear_dailymissions();
  static const int kDailymissionsFieldNumber = 20;
  inline const ::ProtoDailyMission::DailyMissionAllCPP& dailymissions() const;
  inline ::ProtoDailyMission::DailyMissionAllCPP* mutable_dailymissions();
  inline ::ProtoDailyMission::DailyMissionAllCPP* release_dailymissions();
  inline void set_allocated_dailymissions(::ProtoDailyMission::DailyMissionAllCPP* dailymissions);

  // repeated .User.TimeLimtPropItem time_limit_props = 21;
  inline int time_limit_props_size() const;
  inline void clear_time_limit_props();
  static const int kTimeLimitPropsFieldNumber = 21;
  inline const ::User::TimeLimtPropItem& time_limit_props(int index) const;
  inline ::User::TimeLimtPropItem* mutable_time_limit_props(int index);
  inline ::User::TimeLimtPropItem* add_time_limit_props();
  inline const ::google::protobuf::RepeatedPtrField< ::User::TimeLimtPropItem >&
      time_limit_props() const;
  inline ::google::protobuf::RepeatedPtrField< ::User::TimeLimtPropItem >*
      mutable_time_limit_props();

  // required .ProtoComponent.ComponentAllCPP components = 22;
  inline bool has_components() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 22;
  inline const ::ProtoComponent::ComponentAllCPP& components() const;
  inline ::ProtoComponent::ComponentAllCPP* mutable_components();
  inline ::ProtoComponent::ComponentAllCPP* release_components();
  inline void set_allocated_components(::ProtoComponent::ComponentAllCPP* components);

  // required .ProtoComponent.ProduceComponentCPP producecomponent = 23;
  inline bool has_producecomponent() const;
  inline void clear_producecomponent();
  static const int kProducecomponentFieldNumber = 23;
  inline const ::ProtoComponent::ProduceComponentCPP& producecomponent() const;
  inline ::ProtoComponent::ProduceComponentCPP* mutable_producecomponent();
  inline ::ProtoComponent::ProduceComponentCPP* release_producecomponent();
  inline void set_allocated_producecomponent(::ProtoComponent::ProduceComponentCPP* producecomponent);

  // required .ProtoAchievement.AchievementAllCPP achievements = 24;
  inline bool has_achievements() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 24;
  inline const ::ProtoAchievement::AchievementAllCPP& achievements() const;
  inline ::ProtoAchievement::AchievementAllCPP* mutable_achievements();
  inline ::ProtoAchievement::AchievementAllCPP* release_achievements();
  inline void set_allocated_achievements(::ProtoAchievement::AchievementAllCPP* achievements);

  // required .User.EliteNPCInfoAll elitenpcs = 25;
  inline bool has_elitenpcs() const;
  inline void clear_elitenpcs();
  static const int kElitenpcsFieldNumber = 25;
  inline const ::User::EliteNPCInfoAll& elitenpcs() const;
  inline ::User::EliteNPCInfoAll* mutable_elitenpcs();
  inline ::User::EliteNPCInfoAll* release_elitenpcs();
  inline void set_allocated_elitenpcs(::User::EliteNPCInfoAll* elitenpcs);

  // @@protoc_insertion_point(class_scope:User.User)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_building();
  inline void clear_has_building();
  inline void set_has_heroes();
  inline void clear_has_heroes();
  inline void set_has_field();
  inline void clear_has_field();
  inline void set_has_mission();
  inline void clear_has_mission();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_yellowvip();
  inline void clear_has_yellowvip();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_npcpass();
  inline void clear_has_npcpass();
  inline void set_has_cumulation();
  inline void clear_has_cumulation();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_foggates();
  inline void clear_has_foggates();
  inline void set_has_mine();
  inline void clear_has_mine();
  inline void set_has_dailymissions();
  inline void clear_has_dailymissions();
  inline void set_has_components();
  inline void clear_has_components();
  inline void set_has_producecomponent();
  inline void clear_has_producecomponent();
  inline void set_has_achievements();
  inline void clear_has_achievements();
  inline void set_has_elitenpcs();
  inline void clear_has_elitenpcs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::User::Base* base_;
  ::User::Building* building_;
  ::User::Hero* heroes_;
  ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipmentCPP > equip_;
  ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipShopCPP > equipshop_;
  ::ProtoBattleField::Field* field_;
  ::ProtoMission::MissionAllCPP* mission_;
  ::User::Science* science_;
  ::ProtoYellowVip::YellowVipCPP* yellowvip_;
  ::ProtoMarket::MarketCPP* market_;
  ::ProtoBattleField::ReplyRewardInfo* reward_;
  ::User::Weapon* weapon_;
  ::User::NPCPass* npcpass_;
  ::ProtoCumulation::CumulationCPP* cumulation_;
  ::User::Activity* activity_;
  ::google::protobuf::RepeatedPtrField< ::ProtoOfficial::PublishToken > token_;
  ::ProtoFogGate::FogGateCPPAll* foggates_;
  ::User::MineItem* mine_;
  ::ProtoDailyMission::DailyMissionAllCPP* dailymissions_;
  ::google::protobuf::RepeatedPtrField< ::User::TimeLimtPropItem > time_limit_props_;
  ::ProtoComponent::ComponentAllCPP* components_;
  ::ProtoComponent::ProduceComponentCPP* producecomponent_;
  ::ProtoAchievement::AchievementAllCPP* achievements_;
  ::User::EliteNPCInfoAll* elitenpcs_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Tutorial_stage : public ::google::protobuf::Message {
 public:
  Tutorial_stage();
  virtual ~Tutorial_stage();

  Tutorial_stage(const Tutorial_stage& from);

  inline Tutorial_stage& operator=(const Tutorial_stage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tutorial_stage& default_instance();

  void Swap(Tutorial_stage* other);

  // implements Message ----------------------------------------------

  Tutorial_stage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tutorial_stage& from);
  void MergeFrom(const Tutorial_stage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tutorial_stage = 1;
  inline bool has_tutorial_stage() const;
  inline void clear_tutorial_stage();
  static const int kTutorialStageFieldNumber = 1;
  inline ::google::protobuf::uint32 tutorial_stage() const;
  inline void set_tutorial_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.Tutorial_stage)
 private:
  inline void set_has_tutorial_stage();
  inline void clear_has_tutorial_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tutorial_stage_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Tutorial_stage* default_instance_;
};
// -------------------------------------------------------------------

class ServerTime : public ::google::protobuf::Message {
 public:
  ServerTime();
  virtual ~ServerTime();

  ServerTime(const ServerTime& from);

  inline ServerTime& operator=(const ServerTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerTime& default_instance();

  void Swap(ServerTime* other);

  // implements Message ----------------------------------------------

  ServerTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerTime& from);
  void MergeFrom(const ServerTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ts = 1;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 1;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.ServerTime)
 private:
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static ServerTime* default_instance_;
};
// -------------------------------------------------------------------

class CostCashReq : public ::google::protobuf::Message {
 public:
  CostCashReq();
  virtual ~CostCashReq();

  CostCashReq(const CostCashReq& from);

  inline CostCashReq& operator=(const CostCashReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CostCashReq& default_instance();

  void Swap(CostCashReq* other);

  // implements Message ----------------------------------------------

  CostCashReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CostCashReq& from);
  void MergeFrom(const CostCashReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cash = 1;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 1;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // required string op_code = 2;
  inline bool has_op_code() const;
  inline void clear_op_code();
  static const int kOpCodeFieldNumber = 2;
  inline const ::std::string& op_code() const;
  inline void set_op_code(const ::std::string& value);
  inline void set_op_code(const char* value);
  inline void set_op_code(const char* value, size_t size);
  inline ::std::string* mutable_op_code();
  inline ::std::string* release_op_code();
  inline void set_allocated_op_code(::std::string* op_code);

  // required uint32 operation = 3;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::google::protobuf::uint32 operation() const;
  inline void set_operation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.CostCashReq)
 private:
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_op_code();
  inline void clear_has_op_code();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* op_code_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 operation_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static CostCashReq* default_instance_;
};
// -------------------------------------------------------------------

class CostCashResp : public ::google::protobuf::Message {
 public:
  CostCashResp();
  virtual ~CostCashResp();

  CostCashResp(const CostCashResp& from);

  inline CostCashResp& operator=(const CostCashResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CostCashResp& default_instance();

  void Swap(CostCashResp* other);

  // implements Message ----------------------------------------------

  CostCashResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CostCashResp& from);
  void MergeFrom(const CostCashResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cash = 1;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 1;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // required uint32 operation = 2;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 2;
  inline ::google::protobuf::uint32 operation() const;
  inline void set_operation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.CostCashResp)
 private:
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 operation_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static CostCashResp* default_instance_;
};
// -------------------------------------------------------------------

class OpenNormalGifgBagReq : public ::google::protobuf::Message {
 public:
  OpenNormalGifgBagReq();
  virtual ~OpenNormalGifgBagReq();

  OpenNormalGifgBagReq(const OpenNormalGifgBagReq& from);

  inline OpenNormalGifgBagReq& operator=(const OpenNormalGifgBagReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenNormalGifgBagReq& default_instance();

  void Swap(OpenNormalGifgBagReq* other);

  // implements Message ----------------------------------------------

  OpenNormalGifgBagReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenNormalGifgBagReq& from);
  void MergeFrom(const OpenNormalGifgBagReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 equd = 2;
  inline bool has_equd() const;
  inline void clear_equd();
  static const int kEqudFieldNumber = 2;
  inline ::google::protobuf::uint32 equd() const;
  inline void set_equd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.OpenNormalGifgBagReq)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_equd();
  inline void clear_has_equd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 equd_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static OpenNormalGifgBagReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenLuckGifgBagReq : public ::google::protobuf::Message {
 public:
  OpenLuckGifgBagReq();
  virtual ~OpenLuckGifgBagReq();

  OpenLuckGifgBagReq(const OpenLuckGifgBagReq& from);

  inline OpenLuckGifgBagReq& operator=(const OpenLuckGifgBagReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenLuckGifgBagReq& default_instance();

  void Swap(OpenLuckGifgBagReq* other);

  // implements Message ----------------------------------------------

  OpenLuckGifgBagReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenLuckGifgBagReq& from);
  void MergeFrom(const OpenLuckGifgBagReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 equd = 2;
  inline bool has_equd() const;
  inline void clear_equd();
  static const int kEqudFieldNumber = 2;
  inline ::google::protobuf::uint32 equd() const;
  inline void set_equd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.OpenLuckGifgBagReq)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_equd();
  inline void clear_has_equd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 equd_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static OpenLuckGifgBagReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenGifgBagResp : public ::google::protobuf::Message {
 public:
  OpenGifgBagResp();
  virtual ~OpenGifgBagResp();

  OpenGifgBagResp(const OpenGifgBagResp& from);

  inline OpenGifgBagResp& operator=(const OpenGifgBagResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenGifgBagResp& default_instance();

  void Swap(OpenGifgBagResp* other);

  // implements Message ----------------------------------------------

  OpenGifgBagResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenGifgBagResp& from);
  void MergeFrom(const OpenGifgBagResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equd = 1;
  inline bool has_equd() const;
  inline void clear_equd();
  static const int kEqudFieldNumber = 1;
  inline ::google::protobuf::uint32 equd() const;
  inline void set_equd(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required .User.RewardBagInfo bag_info = 3;
  inline bool has_bag_info() const;
  inline void clear_bag_info();
  static const int kBagInfoFieldNumber = 3;
  inline const ::User::RewardBagInfo& bag_info() const;
  inline ::User::RewardBagInfo* mutable_bag_info();
  inline ::User::RewardBagInfo* release_bag_info();
  inline void set_allocated_bag_info(::User::RewardBagInfo* bag_info);

  // @@protoc_insertion_point(class_scope:User.OpenGifgBagResp)
 private:
  inline void set_has_equd();
  inline void clear_has_equd();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_bag_info();
  inline void clear_has_bag_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 equd_;
  ::google::protobuf::uint32 count_;
  ::User::RewardBagInfo* bag_info_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static OpenGifgBagResp* default_instance_;
};
// -------------------------------------------------------------------

class RewardBagInfo : public ::google::protobuf::Message {
 public:
  RewardBagInfo();
  virtual ~RewardBagInfo();

  RewardBagInfo(const RewardBagInfo& from);

  inline RewardBagInfo& operator=(const RewardBagInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardBagInfo& default_instance();

  void Swap(RewardBagInfo* other);

  // implements Message ----------------------------------------------

  RewardBagInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardBagInfo& from);
  void MergeFrom(const RewardBagInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataCommon.EquipmentAllCPP equips = 1;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::DataCommon::EquipmentAllCPP& equips() const;
  inline ::DataCommon::EquipmentAllCPP* mutable_equips();
  inline ::DataCommon::EquipmentAllCPP* release_equips();
  inline void set_allocated_equips(::DataCommon::EquipmentAllCPP* equips);

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::DataCommon::CommonBaseRewardCPP& base() const;
  inline ::DataCommon::CommonBaseRewardCPP* mutable_base();
  inline ::DataCommon::CommonBaseRewardCPP* release_base();
  inline void set_allocated_base(::DataCommon::CommonBaseRewardCPP* base);

  // repeated .ProtoHero.HeroBaseInfoCPP heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  inline const ::ProtoHero::HeroBaseInfoCPP& heros(int index) const;
  inline ::ProtoHero::HeroBaseInfoCPP* mutable_heros(int index);
  inline ::ProtoHero::HeroBaseInfoCPP* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >*
      mutable_heros();

  // repeated .ProtoComponent.ComponentCPP components = 4;
  inline int components_size() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 4;
  inline const ::ProtoComponent::ComponentCPP& components(int index) const;
  inline ::ProtoComponent::ComponentCPP* mutable_components(int index);
  inline ::ProtoComponent::ComponentCPP* add_components();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoComponent::ComponentCPP >&
      components() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoComponent::ComponentCPP >*
      mutable_components();

  // @@protoc_insertion_point(class_scope:User.RewardBagInfo)
 private:
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::EquipmentAllCPP* equips_;
  ::DataCommon::CommonBaseRewardCPP* base_;
  ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP > heros_;
  ::google::protobuf::RepeatedPtrField< ::ProtoComponent::ComponentCPP > components_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static RewardBagInfo* default_instance_;
};
// -------------------------------------------------------------------

class UseTimeLimitPropReq : public ::google::protobuf::Message {
 public:
  UseTimeLimitPropReq();
  virtual ~UseTimeLimitPropReq();

  UseTimeLimitPropReq(const UseTimeLimitPropReq& from);

  inline UseTimeLimitPropReq& operator=(const UseTimeLimitPropReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseTimeLimitPropReq& default_instance();

  void Swap(UseTimeLimitPropReq* other);

  // implements Message ----------------------------------------------

  UseTimeLimitPropReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseTimeLimitPropReq& from);
  void MergeFrom(const UseTimeLimitPropReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 equd = 2;
  inline bool has_equd() const;
  inline void clear_equd();
  static const int kEqudFieldNumber = 2;
  inline ::google::protobuf::uint32 equd() const;
  inline void set_equd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.UseTimeLimitPropReq)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_equd();
  inline void clear_has_equd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 equd_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UseTimeLimitPropReq* default_instance_;
};
// -------------------------------------------------------------------

class UseTimeLimitPropResp : public ::google::protobuf::Message {
 public:
  UseTimeLimitPropResp();
  virtual ~UseTimeLimitPropResp();

  UseTimeLimitPropResp(const UseTimeLimitPropResp& from);

  inline UseTimeLimitPropResp& operator=(const UseTimeLimitPropResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseTimeLimitPropResp& default_instance();

  void Swap(UseTimeLimitPropResp* other);

  // implements Message ----------------------------------------------

  UseTimeLimitPropResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseTimeLimitPropResp& from);
  void MergeFrom(const UseTimeLimitPropResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equd = 1;
  inline bool has_equd() const;
  inline void clear_equd();
  static const int kEqudFieldNumber = 1;
  inline ::google::protobuf::uint32 equd() const;
  inline void set_equd(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required .User.TimeLimtPropItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::User::TimeLimtPropItem& item() const;
  inline ::User::TimeLimtPropItem* mutable_item();
  inline ::User::TimeLimtPropItem* release_item();
  inline void set_allocated_item(::User::TimeLimtPropItem* item);

  // @@protoc_insertion_point(class_scope:User.UseTimeLimitPropResp)
 private:
  inline void set_has_equd();
  inline void clear_has_equd();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 equd_;
  ::google::protobuf::uint32 count_;
  ::User::TimeLimtPropItem* item_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UseTimeLimitPropResp* default_instance_;
};
// -------------------------------------------------------------------

class UseUpdateSmeltPropReq : public ::google::protobuf::Message {
 public:
  UseUpdateSmeltPropReq();
  virtual ~UseUpdateSmeltPropReq();

  UseUpdateSmeltPropReq(const UseUpdateSmeltPropReq& from);

  inline UseUpdateSmeltPropReq& operator=(const UseUpdateSmeltPropReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseUpdateSmeltPropReq& default_instance();

  void Swap(UseUpdateSmeltPropReq* other);

  // implements Message ----------------------------------------------

  UseUpdateSmeltPropReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseUpdateSmeltPropReq& from);
  void MergeFrom(const UseUpdateSmeltPropReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 prop_id = 1;
  inline bool has_prop_id() const;
  inline void clear_prop_id();
  static const int kPropIdFieldNumber = 1;
  inline ::google::protobuf::uint32 prop_id() const;
  inline void set_prop_id(::google::protobuf::uint32 value);

  // required uint32 prop_ud = 2;
  inline bool has_prop_ud() const;
  inline void clear_prop_ud();
  static const int kPropUdFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_ud() const;
  inline void set_prop_ud(::google::protobuf::uint32 value);

  // required uint32 equip_ud = 3;
  inline bool has_equip_ud() const;
  inline void clear_equip_ud();
  static const int kEquipUdFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_ud() const;
  inline void set_equip_ud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.UseUpdateSmeltPropReq)
 private:
  inline void set_has_prop_id();
  inline void clear_has_prop_id();
  inline void set_has_prop_ud();
  inline void clear_has_prop_ud();
  inline void set_has_equip_ud();
  inline void clear_has_equip_ud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::uint32 prop_ud_;
  ::google::protobuf::uint32 equip_ud_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UseUpdateSmeltPropReq* default_instance_;
};
// -------------------------------------------------------------------

class UseUpdateSmeltPropResp : public ::google::protobuf::Message {
 public:
  UseUpdateSmeltPropResp();
  virtual ~UseUpdateSmeltPropResp();

  UseUpdateSmeltPropResp(const UseUpdateSmeltPropResp& from);

  inline UseUpdateSmeltPropResp& operator=(const UseUpdateSmeltPropResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseUpdateSmeltPropResp& default_instance();

  void Swap(UseUpdateSmeltPropResp* other);

  // implements Message ----------------------------------------------

  UseUpdateSmeltPropResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseUpdateSmeltPropResp& from);
  void MergeFrom(const UseUpdateSmeltPropResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 prop_ud = 1;
  inline bool has_prop_ud() const;
  inline void clear_prop_ud();
  static const int kPropUdFieldNumber = 1;
  inline ::google::protobuf::uint32 prop_ud() const;
  inline void set_prop_ud(::google::protobuf::uint32 value);

  // required uint32 prop_cnt = 2;
  inline bool has_prop_cnt() const;
  inline void clear_prop_cnt();
  static const int kPropCntFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_cnt() const;
  inline void set_prop_cnt(::google::protobuf::uint32 value);

  // required .DataCommon.EquipmentCPP equip = 3;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 3;
  inline const ::DataCommon::EquipmentCPP& equip() const;
  inline ::DataCommon::EquipmentCPP* mutable_equip();
  inline ::DataCommon::EquipmentCPP* release_equip();
  inline void set_allocated_equip(::DataCommon::EquipmentCPP* equip);

  // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 4;
  inline const ::ProtoHero::HeroBaseInfoCPP& hero() const;
  inline ::ProtoHero::HeroBaseInfoCPP* mutable_hero();
  inline ::ProtoHero::HeroBaseInfoCPP* release_hero();
  inline void set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero);

  // @@protoc_insertion_point(class_scope:User.UseUpdateSmeltPropResp)
 private:
  inline void set_has_prop_ud();
  inline void clear_has_prop_ud();
  inline void set_has_prop_cnt();
  inline void clear_has_prop_cnt();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 prop_ud_;
  ::google::protobuf::uint32 prop_cnt_;
  ::DataCommon::EquipmentCPP* equip_;
  ::ProtoHero::HeroBaseInfoCPP* hero_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UseUpdateSmeltPropResp* default_instance_;
};
// -------------------------------------------------------------------

class UseSpecificSmeltPropReq : public ::google::protobuf::Message {
 public:
  UseSpecificSmeltPropReq();
  virtual ~UseSpecificSmeltPropReq();

  UseSpecificSmeltPropReq(const UseSpecificSmeltPropReq& from);

  inline UseSpecificSmeltPropReq& operator=(const UseSpecificSmeltPropReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseSpecificSmeltPropReq& default_instance();

  void Swap(UseSpecificSmeltPropReq* other);

  // implements Message ----------------------------------------------

  UseSpecificSmeltPropReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseSpecificSmeltPropReq& from);
  void MergeFrom(const UseSpecificSmeltPropReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 prop_id = 1;
  inline bool has_prop_id() const;
  inline void clear_prop_id();
  static const int kPropIdFieldNumber = 1;
  inline ::google::protobuf::uint32 prop_id() const;
  inline void set_prop_id(::google::protobuf::uint32 value);

  // required uint32 prop_ud = 2;
  inline bool has_prop_ud() const;
  inline void clear_prop_ud();
  static const int kPropUdFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_ud() const;
  inline void set_prop_ud(::google::protobuf::uint32 value);

  // required uint32 equip_ud = 3;
  inline bool has_equip_ud() const;
  inline void clear_equip_ud();
  static const int kEquipUdFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_ud() const;
  inline void set_equip_ud(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:User.UseSpecificSmeltPropReq)
 private:
  inline void set_has_prop_id();
  inline void clear_has_prop_id();
  inline void set_has_prop_ud();
  inline void clear_has_prop_ud();
  inline void set_has_equip_ud();
  inline void clear_has_equip_ud();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::uint32 prop_ud_;
  ::google::protobuf::uint32 equip_ud_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UseSpecificSmeltPropReq* default_instance_;
};
// -------------------------------------------------------------------

class UseSpecificSmeltPropResp : public ::google::protobuf::Message {
 public:
  UseSpecificSmeltPropResp();
  virtual ~UseSpecificSmeltPropResp();

  UseSpecificSmeltPropResp(const UseSpecificSmeltPropResp& from);

  inline UseSpecificSmeltPropResp& operator=(const UseSpecificSmeltPropResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseSpecificSmeltPropResp& default_instance();

  void Swap(UseSpecificSmeltPropResp* other);

  // implements Message ----------------------------------------------

  UseSpecificSmeltPropResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseSpecificSmeltPropResp& from);
  void MergeFrom(const UseSpecificSmeltPropResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 prop_ud = 1;
  inline bool has_prop_ud() const;
  inline void clear_prop_ud();
  static const int kPropUdFieldNumber = 1;
  inline ::google::protobuf::uint32 prop_ud() const;
  inline void set_prop_ud(::google::protobuf::uint32 value);

  // required uint32 prop_cnt = 2;
  inline bool has_prop_cnt() const;
  inline void clear_prop_cnt();
  static const int kPropCntFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_cnt() const;
  inline void set_prop_cnt(::google::protobuf::uint32 value);

  // required .DataCommon.EquipmentCPP equip = 3;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 3;
  inline const ::DataCommon::EquipmentCPP& equip() const;
  inline ::DataCommon::EquipmentCPP* mutable_equip();
  inline ::DataCommon::EquipmentCPP* release_equip();
  inline void set_allocated_equip(::DataCommon::EquipmentCPP* equip);

  // optional .ProtoHero.HeroBaseInfoCPP hero = 4;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 4;
  inline const ::ProtoHero::HeroBaseInfoCPP& hero() const;
  inline ::ProtoHero::HeroBaseInfoCPP* mutable_hero();
  inline ::ProtoHero::HeroBaseInfoCPP* release_hero();
  inline void set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero);

  // @@protoc_insertion_point(class_scope:User.UseSpecificSmeltPropResp)
 private:
  inline void set_has_prop_ud();
  inline void clear_has_prop_ud();
  inline void set_has_prop_cnt();
  inline void clear_has_prop_cnt();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 prop_ud_;
  ::google::protobuf::uint32 prop_cnt_;
  ::DataCommon::EquipmentCPP* equip_;
  ::ProtoHero::HeroBaseInfoCPP* hero_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UseSpecificSmeltPropResp* default_instance_;
};
// -------------------------------------------------------------------

class EliteNPCPushReq : public ::google::protobuf::Message {
 public:
  EliteNPCPushReq();
  virtual ~EliteNPCPushReq();

  EliteNPCPushReq(const EliteNPCPushReq& from);

  inline EliteNPCPushReq& operator=(const EliteNPCPushReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteNPCPushReq& default_instance();

  void Swap(EliteNPCPushReq* other);

  // implements Message ----------------------------------------------

  EliteNPCPushReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteNPCPushReq& from);
  void MergeFrom(const EliteNPCPushReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .User.EliteNPCInfo npcs = 1;
  inline int npcs_size() const;
  inline void clear_npcs();
  static const int kNpcsFieldNumber = 1;
  inline const ::User::EliteNPCInfo& npcs(int index) const;
  inline ::User::EliteNPCInfo* mutable_npcs(int index);
  inline ::User::EliteNPCInfo* add_npcs();
  inline const ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >&
      npcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >*
      mutable_npcs();

  // @@protoc_insertion_point(class_scope:User.EliteNPCPushReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo > npcs_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static EliteNPCPushReq* default_instance_;
};
// ===================================================================


// ===================================================================

// Base

// required uint32 register_platform = 1;
inline bool Base::has_register_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Base::set_has_register_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Base::clear_has_register_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Base::clear_register_platform() {
  register_platform_ = 0u;
  clear_has_register_platform();
}
inline ::google::protobuf::uint32 Base::register_platform() const {
  // @@protoc_insertion_point(field_get:User.Base.register_platform)
  return register_platform_;
}
inline void Base::set_register_platform(::google::protobuf::uint32 value) {
  set_has_register_platform();
  register_platform_ = value;
  // @@protoc_insertion_point(field_set:User.Base.register_platform)
}

// required uint32 register_time = 2;
inline bool Base::has_register_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Base::set_has_register_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Base::clear_has_register_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Base::clear_register_time() {
  register_time_ = 0u;
  clear_has_register_time();
}
inline ::google::protobuf::uint32 Base::register_time() const {
  // @@protoc_insertion_point(field_get:User.Base.register_time)
  return register_time_;
}
inline void Base::set_register_time(::google::protobuf::uint32 value) {
  set_has_register_time();
  register_time_ = value;
  // @@protoc_insertion_point(field_set:User.Base.register_time)
}

// required uint32 invite_uid = 3;
inline bool Base::has_invite_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Base::set_has_invite_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Base::clear_has_invite_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Base::clear_invite_uid() {
  invite_uid_ = 0u;
  clear_has_invite_uid();
}
inline ::google::protobuf::uint32 Base::invite_uid() const {
  // @@protoc_insertion_point(field_get:User.Base.invite_uid)
  return invite_uid_;
}
inline void Base::set_invite_uid(::google::protobuf::uint32 value) {
  set_has_invite_uid();
  invite_uid_ = value;
  // @@protoc_insertion_point(field_set:User.Base.invite_uid)
}

// required uint32 last_login_platform = 4;
inline bool Base::has_last_login_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Base::set_has_last_login_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Base::clear_has_last_login_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Base::clear_last_login_platform() {
  last_login_platform_ = 0u;
  clear_has_last_login_platform();
}
inline ::google::protobuf::uint32 Base::last_login_platform() const {
  // @@protoc_insertion_point(field_get:User.Base.last_login_platform)
  return last_login_platform_;
}
inline void Base::set_last_login_platform(::google::protobuf::uint32 value) {
  set_has_last_login_platform();
  last_login_platform_ = value;
  // @@protoc_insertion_point(field_set:User.Base.last_login_platform)
}

// required uint32 last_login_time = 5;
inline bool Base::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Base::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Base::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Base::clear_last_login_time() {
  last_login_time_ = 0u;
  clear_has_last_login_time();
}
inline ::google::protobuf::uint32 Base::last_login_time() const {
  // @@protoc_insertion_point(field_get:User.Base.last_login_time)
  return last_login_time_;
}
inline void Base::set_last_login_time(::google::protobuf::uint32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
  // @@protoc_insertion_point(field_set:User.Base.last_login_time)
}

// required uint32 login_times = 6;
inline bool Base::has_login_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Base::set_has_login_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Base::clear_has_login_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Base::clear_login_times() {
  login_times_ = 0u;
  clear_has_login_times();
}
inline ::google::protobuf::uint32 Base::login_times() const {
  // @@protoc_insertion_point(field_get:User.Base.login_times)
  return login_times_;
}
inline void Base::set_login_times(::google::protobuf::uint32 value) {
  set_has_login_times();
  login_times_ = value;
  // @@protoc_insertion_point(field_set:User.Base.login_times)
}

// required uint32 login_days = 7;
inline bool Base::has_login_days() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Base::set_has_login_days() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Base::clear_has_login_days() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Base::clear_login_days() {
  login_days_ = 0u;
  clear_has_login_days();
}
inline ::google::protobuf::uint32 Base::login_days() const {
  // @@protoc_insertion_point(field_get:User.Base.login_days)
  return login_days_;
}
inline void Base::set_login_days(::google::protobuf::uint32 value) {
  set_has_login_days();
  login_days_ = value;
  // @@protoc_insertion_point(field_set:User.Base.login_days)
}

// required uint32 last_active_time = 8;
inline bool Base::has_last_active_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Base::set_has_last_active_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Base::clear_has_last_active_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Base::clear_last_active_time() {
  last_active_time_ = 0u;
  clear_has_last_active_time();
}
inline ::google::protobuf::uint32 Base::last_active_time() const {
  // @@protoc_insertion_point(field_get:User.Base.last_active_time)
  return last_active_time_;
}
inline void Base::set_last_active_time(::google::protobuf::uint32 value) {
  set_has_last_active_time();
  last_active_time_ = value;
  // @@protoc_insertion_point(field_set:User.Base.last_active_time)
}

// required uint32 last_off_time = 9;
inline bool Base::has_last_off_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Base::set_has_last_off_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Base::clear_has_last_off_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Base::clear_last_off_time() {
  last_off_time_ = 0u;
  clear_has_last_off_time();
}
inline ::google::protobuf::uint32 Base::last_off_time() const {
  // @@protoc_insertion_point(field_get:User.Base.last_off_time)
  return last_off_time_;
}
inline void Base::set_last_off_time(::google::protobuf::uint32 value) {
  set_has_last_off_time();
  last_off_time_ = value;
  // @@protoc_insertion_point(field_set:User.Base.last_off_time)
}

// required uint32 forbid_ts = 10;
inline bool Base::has_forbid_ts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Base::set_has_forbid_ts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Base::clear_has_forbid_ts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Base::clear_forbid_ts() {
  forbid_ts_ = 0u;
  clear_has_forbid_ts();
}
inline ::google::protobuf::uint32 Base::forbid_ts() const {
  // @@protoc_insertion_point(field_get:User.Base.forbid_ts)
  return forbid_ts_;
}
inline void Base::set_forbid_ts(::google::protobuf::uint32 value) {
  set_has_forbid_ts();
  forbid_ts_ = value;
  // @@protoc_insertion_point(field_set:User.Base.forbid_ts)
}

// required bytes forbid_reason = 11;
inline bool Base::has_forbid_reason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Base::set_has_forbid_reason() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Base::clear_has_forbid_reason() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Base::clear_forbid_reason() {
  if (forbid_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    forbid_reason_->clear();
  }
  clear_has_forbid_reason();
}
inline const ::std::string& Base::forbid_reason() const {
  // @@protoc_insertion_point(field_get:User.Base.forbid_reason)
  return *forbid_reason_;
}
inline void Base::set_forbid_reason(const ::std::string& value) {
  set_has_forbid_reason();
  if (forbid_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    forbid_reason_ = new ::std::string;
  }
  forbid_reason_->assign(value);
  // @@protoc_insertion_point(field_set:User.Base.forbid_reason)
}
inline void Base::set_forbid_reason(const char* value) {
  set_has_forbid_reason();
  if (forbid_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    forbid_reason_ = new ::std::string;
  }
  forbid_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:User.Base.forbid_reason)
}
inline void Base::set_forbid_reason(const void* value, size_t size) {
  set_has_forbid_reason();
  if (forbid_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    forbid_reason_ = new ::std::string;
  }
  forbid_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:User.Base.forbid_reason)
}
inline ::std::string* Base::mutable_forbid_reason() {
  set_has_forbid_reason();
  if (forbid_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    forbid_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:User.Base.forbid_reason)
  return forbid_reason_;
}
inline ::std::string* Base::release_forbid_reason() {
  clear_has_forbid_reason();
  if (forbid_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = forbid_reason_;
    forbid_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Base::set_allocated_forbid_reason(::std::string* forbid_reason) {
  if (forbid_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forbid_reason_;
  }
  if (forbid_reason) {
    set_has_forbid_reason();
    forbid_reason_ = forbid_reason;
  } else {
    clear_has_forbid_reason();
    forbid_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:User.Base.forbid_reason)
}

// required uint32 invite_count = 12;
inline bool Base::has_invite_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Base::set_has_invite_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Base::clear_has_invite_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Base::clear_invite_count() {
  invite_count_ = 0u;
  clear_has_invite_count();
}
inline ::google::protobuf::uint32 Base::invite_count() const {
  // @@protoc_insertion_point(field_get:User.Base.invite_count)
  return invite_count_;
}
inline void Base::set_invite_count(::google::protobuf::uint32 value) {
  set_has_invite_count();
  invite_count_ = value;
  // @@protoc_insertion_point(field_set:User.Base.invite_count)
}

// required uint32 today_invite_count = 13;
inline bool Base::has_today_invite_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Base::set_has_today_invite_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Base::clear_has_today_invite_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Base::clear_today_invite_count() {
  today_invite_count_ = 0u;
  clear_has_today_invite_count();
}
inline ::google::protobuf::uint32 Base::today_invite_count() const {
  // @@protoc_insertion_point(field_get:User.Base.today_invite_count)
  return today_invite_count_;
}
inline void Base::set_today_invite_count(::google::protobuf::uint32 value) {
  set_has_today_invite_count();
  today_invite_count_ = value;
  // @@protoc_insertion_point(field_set:User.Base.today_invite_count)
}

// required uint32 tutorial_stage = 14;
inline bool Base::has_tutorial_stage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Base::set_has_tutorial_stage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Base::clear_has_tutorial_stage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Base::clear_tutorial_stage() {
  tutorial_stage_ = 0u;
  clear_has_tutorial_stage();
}
inline ::google::protobuf::uint32 Base::tutorial_stage() const {
  // @@protoc_insertion_point(field_get:User.Base.tutorial_stage)
  return tutorial_stage_;
}
inline void Base::set_tutorial_stage(::google::protobuf::uint32 value) {
  set_has_tutorial_stage();
  tutorial_stage_ = value;
  // @@protoc_insertion_point(field_set:User.Base.tutorial_stage)
}

// required bytes name = 15;
inline bool Base::has_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Base::set_has_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Base::clear_has_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Base::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Base::name() const {
  // @@protoc_insertion_point(field_get:User.Base.name)
  return *name_;
}
inline void Base::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:User.Base.name)
}
inline void Base::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:User.Base.name)
}
inline void Base::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:User.Base.name)
}
inline ::std::string* Base::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:User.Base.name)
  return name_;
}
inline ::std::string* Base::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Base::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:User.Base.name)
}

// required bytes fig = 16;
inline bool Base::has_fig() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Base::set_has_fig() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Base::clear_has_fig() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Base::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& Base::fig() const {
  // @@protoc_insertion_point(field_get:User.Base.fig)
  return *fig_;
}
inline void Base::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:User.Base.fig)
}
inline void Base::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:User.Base.fig)
}
inline void Base::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:User.Base.fig)
}
inline ::std::string* Base::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:User.Base.fig)
  return fig_;
}
inline ::std::string* Base::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Base::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:User.Base.fig)
}

// required uint32 kingdom = 17;
inline bool Base::has_kingdom() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Base::set_has_kingdom() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Base::clear_has_kingdom() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Base::clear_kingdom() {
  kingdom_ = 0u;
  clear_has_kingdom();
}
inline ::google::protobuf::uint32 Base::kingdom() const {
  // @@protoc_insertion_point(field_get:User.Base.kingdom)
  return kingdom_;
}
inline void Base::set_kingdom(::google::protobuf::uint32 value) {
  set_has_kingdom();
  kingdom_ = value;
  // @@protoc_insertion_point(field_set:User.Base.kingdom)
}

// required uint64 exp = 18;
inline bool Base::has_exp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Base::set_has_exp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Base::clear_has_exp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Base::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 Base::exp() const {
  // @@protoc_insertion_point(field_get:User.Base.exp)
  return exp_;
}
inline void Base::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:User.Base.exp)
}

// required uint32 level = 19;
inline bool Base::has_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Base::set_has_level() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Base::clear_has_level() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Base::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Base::level() const {
  // @@protoc_insertion_point(field_get:User.Base.level)
  return level_;
}
inline void Base::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:User.Base.level)
}

// required uint32 acccharge = 20;
inline bool Base::has_acccharge() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Base::set_has_acccharge() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Base::clear_has_acccharge() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Base::clear_acccharge() {
  acccharge_ = 0u;
  clear_has_acccharge();
}
inline ::google::protobuf::uint32 Base::acccharge() const {
  // @@protoc_insertion_point(field_get:User.Base.acccharge)
  return acccharge_;
}
inline void Base::set_acccharge(::google::protobuf::uint32 value) {
  set_has_acccharge();
  acccharge_ = value;
  // @@protoc_insertion_point(field_set:User.Base.acccharge)
}

// required uint32 viplevel = 21;
inline bool Base::has_viplevel() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Base::set_has_viplevel() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Base::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Base::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 Base::viplevel() const {
  // @@protoc_insertion_point(field_get:User.Base.viplevel)
  return viplevel_;
}
inline void Base::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:User.Base.viplevel)
}

// required uint32 cash = 22;
inline bool Base::has_cash() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Base::set_has_cash() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Base::clear_has_cash() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Base::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 Base::cash() const {
  // @@protoc_insertion_point(field_get:User.Base.cash)
  return cash_;
}
inline void Base::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:User.Base.cash)
}

// required uint32 coin = 23;
inline bool Base::has_coin() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Base::set_has_coin() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Base::clear_has_coin() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Base::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 Base::coin() const {
  // @@protoc_insertion_point(field_get:User.Base.coin)
  return coin_;
}
inline void Base::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:User.Base.coin)
}

// required uint32 wood = 24;
inline bool Base::has_wood() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Base::set_has_wood() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Base::clear_has_wood() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Base::clear_wood() {
  wood_ = 0u;
  clear_has_wood();
}
inline ::google::protobuf::uint32 Base::wood() const {
  // @@protoc_insertion_point(field_get:User.Base.wood)
  return wood_;
}
inline void Base::set_wood(::google::protobuf::uint32 value) {
  set_has_wood();
  wood_ = value;
  // @@protoc_insertion_point(field_set:User.Base.wood)
}

// required uint32 food = 25;
inline bool Base::has_food() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Base::set_has_food() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Base::clear_has_food() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Base::clear_food() {
  food_ = 0u;
  clear_has_food();
}
inline ::google::protobuf::uint32 Base::food() const {
  // @@protoc_insertion_point(field_get:User.Base.food)
  return food_;
}
inline void Base::set_food(::google::protobuf::uint32 value) {
  set_has_food();
  food_ = value;
  // @@protoc_insertion_point(field_set:User.Base.food)
}

// required uint32 iron = 26;
inline bool Base::has_iron() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Base::set_has_iron() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Base::clear_has_iron() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Base::clear_iron() {
  iron_ = 0u;
  clear_has_iron();
}
inline ::google::protobuf::uint32 Base::iron() const {
  // @@protoc_insertion_point(field_get:User.Base.iron)
  return iron_;
}
inline void Base::set_iron(::google::protobuf::uint32 value) {
  set_has_iron();
  iron_ = value;
  // @@protoc_insertion_point(field_set:User.Base.iron)
}

// required uint32 ticket = 27;
inline bool Base::has_ticket() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Base::set_has_ticket() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Base::clear_has_ticket() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Base::clear_ticket() {
  ticket_ = 0u;
  clear_has_ticket();
}
inline ::google::protobuf::uint32 Base::ticket() const {
  // @@protoc_insertion_point(field_get:User.Base.ticket)
  return ticket_;
}
inline void Base::set_ticket(::google::protobuf::uint32 value) {
  set_has_ticket();
  ticket_ = value;
  // @@protoc_insertion_point(field_set:User.Base.ticket)
}

// required uint32 silk = 28;
inline bool Base::has_silk() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Base::set_has_silk() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Base::clear_has_silk() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Base::clear_silk() {
  silk_ = 0u;
  clear_has_silk();
}
inline ::google::protobuf::uint32 Base::silk() const {
  // @@protoc_insertion_point(field_get:User.Base.silk)
  return silk_;
}
inline void Base::set_silk(::google::protobuf::uint32 value) {
  set_has_silk();
  silk_ = value;
  // @@protoc_insertion_point(field_set:User.Base.silk)
}

// required uint32 order = 29;
inline bool Base::has_order() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Base::set_has_order() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Base::clear_has_order() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Base::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 Base::order() const {
  // @@protoc_insertion_point(field_get:User.Base.order)
  return order_;
}
inline void Base::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:User.Base.order)
}

// required uint32 bag = 30;
inline bool Base::has_bag() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Base::set_has_bag() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Base::clear_has_bag() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Base::clear_bag() {
  bag_ = 0u;
  clear_has_bag();
}
inline ::google::protobuf::uint32 Base::bag() const {
  // @@protoc_insertion_point(field_get:User.Base.bag)
  return bag_;
}
inline void Base::set_bag(::google::protobuf::uint32 value) {
  set_has_bag();
  bag_ = value;
  // @@protoc_insertion_point(field_set:User.Base.bag)
}

// required uint32 preward = 31;
inline bool Base::has_preward() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Base::set_has_preward() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Base::clear_has_preward() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Base::clear_preward() {
  preward_ = 0u;
  clear_has_preward();
}
inline ::google::protobuf::uint32 Base::preward() const {
  // @@protoc_insertion_point(field_get:User.Base.preward)
  return preward_;
}
inline void Base::set_preward(::google::protobuf::uint32 value) {
  set_has_preward();
  preward_ = value;
  // @@protoc_insertion_point(field_set:User.Base.preward)
}

// required uint32 loyal = 32;
inline bool Base::has_loyal() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Base::set_has_loyal() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Base::clear_has_loyal() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Base::clear_loyal() {
  loyal_ = 0u;
  clear_has_loyal();
}
inline ::google::protobuf::uint32 Base::loyal() const {
  // @@protoc_insertion_point(field_get:User.Base.loyal)
  return loyal_;
}
inline void Base::set_loyal(::google::protobuf::uint32 value) {
  set_has_loyal();
  loyal_ = value;
  // @@protoc_insertion_point(field_set:User.Base.loyal)
}

// required uint32 sacrifice = 33;
inline bool Base::has_sacrifice() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Base::set_has_sacrifice() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Base::clear_has_sacrifice() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Base::clear_sacrifice() {
  sacrifice_ = 0u;
  clear_has_sacrifice();
}
inline ::google::protobuf::uint32 Base::sacrifice() const {
  // @@protoc_insertion_point(field_get:User.Base.sacrifice)
  return sacrifice_;
}
inline void Base::set_sacrifice(::google::protobuf::uint32 value) {
  set_has_sacrifice();
  sacrifice_ = value;
  // @@protoc_insertion_point(field_set:User.Base.sacrifice)
}

// required uint32 market = 34;
inline bool Base::has_market() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Base::set_has_market() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Base::clear_has_market() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Base::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 Base::market() const {
  // @@protoc_insertion_point(field_get:User.Base.market)
  return market_;
}
inline void Base::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:User.Base.market)
}

// required uint32 bmarketcd = 35;
inline bool Base::has_bmarketcd() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Base::set_has_bmarketcd() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Base::clear_has_bmarketcd() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Base::clear_bmarketcd() {
  bmarketcd_ = 0u;
  clear_has_bmarketcd();
}
inline ::google::protobuf::uint32 Base::bmarketcd() const {
  // @@protoc_insertion_point(field_get:User.Base.bmarketcd)
  return bmarketcd_;
}
inline void Base::set_bmarketcd(::google::protobuf::uint32 value) {
  set_has_bmarketcd();
  bmarketcd_ = value;
  // @@protoc_insertion_point(field_set:User.Base.bmarketcd)
}

// required uint32 banquet = 36;
inline bool Base::has_banquet() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Base::set_has_banquet() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Base::clear_has_banquet() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Base::clear_banquet() {
  banquet_ = 0u;
  clear_has_banquet();
}
inline ::google::protobuf::uint32 Base::banquet() const {
  // @@protoc_insertion_point(field_get:User.Base.banquet)
  return banquet_;
}
inline void Base::set_banquet(::google::protobuf::uint32 value) {
  set_has_banquet();
  banquet_ = value;
  // @@protoc_insertion_point(field_set:User.Base.banquet)
}

// required uint32 eshopintimacy = 37;
inline bool Base::has_eshopintimacy() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Base::set_has_eshopintimacy() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Base::clear_has_eshopintimacy() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Base::clear_eshopintimacy() {
  eshopintimacy_ = 0u;
  clear_has_eshopintimacy();
}
inline ::google::protobuf::uint32 Base::eshopintimacy() const {
  // @@protoc_insertion_point(field_get:User.Base.eshopintimacy)
  return eshopintimacy_;
}
inline void Base::set_eshopintimacy(::google::protobuf::uint32 value) {
  set_has_eshopintimacy();
  eshopintimacy_ = value;
  // @@protoc_insertion_point(field_set:User.Base.eshopintimacy)
}

// required uint32 eshopcd = 38;
inline bool Base::has_eshopcd() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Base::set_has_eshopcd() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Base::clear_has_eshopcd() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Base::clear_eshopcd() {
  eshopcd_ = 0u;
  clear_has_eshopcd();
}
inline ::google::protobuf::uint32 Base::eshopcd() const {
  // @@protoc_insertion_point(field_get:User.Base.eshopcd)
  return eshopcd_;
}
inline void Base::set_eshopcd(::google::protobuf::uint32 value) {
  set_has_eshopcd();
  eshopcd_ = value;
  // @@protoc_insertion_point(field_set:User.Base.eshopcd)
}

// required uint32 refresh = 39;
inline bool Base::has_refresh() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Base::set_has_refresh() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Base::clear_has_refresh() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Base::clear_refresh() {
  refresh_ = 0u;
  clear_has_refresh();
}
inline ::google::protobuf::uint32 Base::refresh() const {
  // @@protoc_insertion_point(field_get:User.Base.refresh)
  return refresh_;
}
inline void Base::set_refresh(::google::protobuf::uint32 value) {
  set_has_refresh();
  refresh_ = value;
  // @@protoc_insertion_point(field_set:User.Base.refresh)
}

// required uint32 arefresh = 40;
inline bool Base::has_arefresh() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Base::set_has_arefresh() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Base::clear_has_arefresh() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Base::clear_arefresh() {
  arefresh_ = 0u;
  clear_has_arefresh();
}
inline ::google::protobuf::uint32 Base::arefresh() const {
  // @@protoc_insertion_point(field_get:User.Base.arefresh)
  return arefresh_;
}
inline void Base::set_arefresh(::google::protobuf::uint32 value) {
  set_has_arefresh();
  arefresh_ = value;
  // @@protoc_insertion_point(field_set:User.Base.arefresh)
}

// required uint32 harmmer = 41;
inline bool Base::has_harmmer() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Base::set_has_harmmer() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Base::clear_has_harmmer() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Base::clear_harmmer() {
  harmmer_ = 0u;
  clear_has_harmmer();
}
inline ::google::protobuf::uint32 Base::harmmer() const {
  // @@protoc_insertion_point(field_get:User.Base.harmmer)
  return harmmer_;
}
inline void Base::set_harmmer(::google::protobuf::uint32 value) {
  set_has_harmmer();
  harmmer_ = value;
  // @@protoc_insertion_point(field_set:User.Base.harmmer)
}

// required uint32 shadow = 42;
inline bool Base::has_shadow() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Base::set_has_shadow() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Base::clear_has_shadow() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Base::clear_shadow() {
  shadow_ = 0u;
  clear_has_shadow();
}
inline ::google::protobuf::uint32 Base::shadow() const {
  // @@protoc_insertion_point(field_get:User.Base.shadow)
  return shadow_;
}
inline void Base::set_shadow(::google::protobuf::uint32 value) {
  set_has_shadow();
  shadow_ = value;
  // @@protoc_insertion_point(field_set:User.Base.shadow)
}

// required uint32 up_res_time = 43;
inline bool Base::has_up_res_time() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Base::set_has_up_res_time() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Base::clear_has_up_res_time() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Base::clear_up_res_time() {
  up_res_time_ = 0u;
  clear_has_up_res_time();
}
inline ::google::protobuf::uint32 Base::up_res_time() const {
  // @@protoc_insertion_point(field_get:User.Base.up_res_time)
  return up_res_time_;
}
inline void Base::set_up_res_time(::google::protobuf::uint32 value) {
  set_has_up_res_time();
  up_res_time_ = value;
  // @@protoc_insertion_point(field_set:User.Base.up_res_time)
}

// required uint32 rests = 44;
inline bool Base::has_rests() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Base::set_has_rests() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Base::clear_has_rests() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Base::clear_rests() {
  rests_ = 0u;
  clear_has_rests();
}
inline ::google::protobuf::uint32 Base::rests() const {
  // @@protoc_insertion_point(field_get:User.Base.rests)
  return rests_;
}
inline void Base::set_rests(::google::protobuf::uint32 value) {
  set_has_rests();
  rests_ = value;
  // @@protoc_insertion_point(field_set:User.Base.rests)
}

// required uint32 mp1 = 45;
inline bool Base::has_mp1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Base::set_has_mp1() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Base::clear_has_mp1() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Base::clear_mp1() {
  mp1_ = 0u;
  clear_has_mp1();
}
inline ::google::protobuf::uint32 Base::mp1() const {
  // @@protoc_insertion_point(field_get:User.Base.mp1)
  return mp1_;
}
inline void Base::set_mp1(::google::protobuf::uint32 value) {
  set_has_mp1();
  mp1_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mp1)
}

// required uint32 mp2 = 46;
inline bool Base::has_mp2() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Base::set_has_mp2() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Base::clear_has_mp2() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Base::clear_mp2() {
  mp2_ = 0u;
  clear_has_mp2();
}
inline ::google::protobuf::uint32 Base::mp2() const {
  // @@protoc_insertion_point(field_get:User.Base.mp2)
  return mp2_;
}
inline void Base::set_mp2(::google::protobuf::uint32 value) {
  set_has_mp2();
  mp2_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mp2)
}

// required uint32 mk1 = 47;
inline bool Base::has_mk1() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Base::set_has_mk1() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Base::clear_has_mk1() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Base::clear_mk1() {
  mk1_ = 0u;
  clear_has_mk1();
}
inline ::google::protobuf::uint32 Base::mk1() const {
  // @@protoc_insertion_point(field_get:User.Base.mk1)
  return mk1_;
}
inline void Base::set_mk1(::google::protobuf::uint32 value) {
  set_has_mk1();
  mk1_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mk1)
}

// required uint32 mk2 = 48;
inline bool Base::has_mk2() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Base::set_has_mk2() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Base::clear_has_mk2() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Base::clear_mk2() {
  mk2_ = 0u;
  clear_has_mk2();
}
inline ::google::protobuf::uint32 Base::mk2() const {
  // @@protoc_insertion_point(field_get:User.Base.mk2)
  return mk2_;
}
inline void Base::set_mk2(::google::protobuf::uint32 value) {
  set_has_mk2();
  mk2_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mk2)
}

// required uint32 rewardb = 49;
inline bool Base::has_rewardb() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Base::set_has_rewardb() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Base::clear_has_rewardb() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Base::clear_rewardb() {
  rewardb_ = 0u;
  clear_has_rewardb();
}
inline ::google::protobuf::uint32 Base::rewardb() const {
  // @@protoc_insertion_point(field_get:User.Base.rewardb)
  return rewardb_;
}
inline void Base::set_rewardb(::google::protobuf::uint32 value) {
  set_has_rewardb();
  rewardb_ = value;
  // @@protoc_insertion_point(field_set:User.Base.rewardb)
}

// required uint32 mp3 = 50;
inline bool Base::has_mp3() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Base::set_has_mp3() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Base::clear_has_mp3() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Base::clear_mp3() {
  mp3_ = 0u;
  clear_has_mp3();
}
inline ::google::protobuf::uint32 Base::mp3() const {
  // @@protoc_insertion_point(field_get:User.Base.mp3)
  return mp3_;
}
inline void Base::set_mp3(::google::protobuf::uint32 value) {
  set_has_mp3();
  mp3_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mp3)
}

// required uint32 npc_pass = 51;
inline bool Base::has_npc_pass() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Base::set_has_npc_pass() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Base::clear_has_npc_pass() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Base::clear_npc_pass() {
  npc_pass_ = 0u;
  clear_has_npc_pass();
}
inline ::google::protobuf::uint32 Base::npc_pass() const {
  // @@protoc_insertion_point(field_get:User.Base.npc_pass)
  return npc_pass_;
}
inline void Base::set_npc_pass(::google::protobuf::uint32 value) {
  set_has_npc_pass();
  npc_pass_ = value;
  // @@protoc_insertion_point(field_set:User.Base.npc_pass)
}

// required uint32 flamen_coins_cnt = 52;
inline bool Base::has_flamen_coins_cnt() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Base::set_has_flamen_coins_cnt() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Base::clear_has_flamen_coins_cnt() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Base::clear_flamen_coins_cnt() {
  flamen_coins_cnt_ = 0u;
  clear_has_flamen_coins_cnt();
}
inline ::google::protobuf::uint32 Base::flamen_coins_cnt() const {
  // @@protoc_insertion_point(field_get:User.Base.flamen_coins_cnt)
  return flamen_coins_cnt_;
}
inline void Base::set_flamen_coins_cnt(::google::protobuf::uint32 value) {
  set_has_flamen_coins_cnt();
  flamen_coins_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.Base.flamen_coins_cnt)
}

// required uint32 flamem_wood_cnt = 53;
inline bool Base::has_flamem_wood_cnt() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Base::set_has_flamem_wood_cnt() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Base::clear_has_flamem_wood_cnt() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Base::clear_flamem_wood_cnt() {
  flamem_wood_cnt_ = 0u;
  clear_has_flamem_wood_cnt();
}
inline ::google::protobuf::uint32 Base::flamem_wood_cnt() const {
  // @@protoc_insertion_point(field_get:User.Base.flamem_wood_cnt)
  return flamem_wood_cnt_;
}
inline void Base::set_flamem_wood_cnt(::google::protobuf::uint32 value) {
  set_has_flamem_wood_cnt();
  flamem_wood_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.Base.flamem_wood_cnt)
}

// required uint32 flamem_food_cnt = 54;
inline bool Base::has_flamem_food_cnt() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Base::set_has_flamem_food_cnt() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Base::clear_has_flamem_food_cnt() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Base::clear_flamem_food_cnt() {
  flamem_food_cnt_ = 0u;
  clear_has_flamem_food_cnt();
}
inline ::google::protobuf::uint32 Base::flamem_food_cnt() const {
  // @@protoc_insertion_point(field_get:User.Base.flamem_food_cnt)
  return flamem_food_cnt_;
}
inline void Base::set_flamem_food_cnt(::google::protobuf::uint32 value) {
  set_has_flamem_food_cnt();
  flamem_food_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.Base.flamem_food_cnt)
}

// required uint32 flamem_iron_cnt = 55;
inline bool Base::has_flamem_iron_cnt() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Base::set_has_flamem_iron_cnt() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Base::clear_has_flamem_iron_cnt() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Base::clear_flamem_iron_cnt() {
  flamem_iron_cnt_ = 0u;
  clear_has_flamem_iron_cnt();
}
inline ::google::protobuf::uint32 Base::flamem_iron_cnt() const {
  // @@protoc_insertion_point(field_get:User.Base.flamem_iron_cnt)
  return flamem_iron_cnt_;
}
inline void Base::set_flamem_iron_cnt(::google::protobuf::uint32 value) {
  set_has_flamem_iron_cnt();
  flamem_iron_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.Base.flamem_iron_cnt)
}

// required uint32 first_recharge = 56;
inline bool Base::has_first_recharge() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Base::set_has_first_recharge() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Base::clear_has_first_recharge() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Base::clear_first_recharge() {
  first_recharge_ = 0u;
  clear_has_first_recharge();
}
inline ::google::protobuf::uint32 Base::first_recharge() const {
  // @@protoc_insertion_point(field_get:User.Base.first_recharge)
  return first_recharge_;
}
inline void Base::set_first_recharge(::google::protobuf::uint32 value) {
  set_has_first_recharge();
  first_recharge_ = value;
  // @@protoc_insertion_point(field_set:User.Base.first_recharge)
}

// required uint32 auto_build_flag = 57;
inline bool Base::has_auto_build_flag() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Base::set_has_auto_build_flag() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Base::clear_has_auto_build_flag() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Base::clear_auto_build_flag() {
  auto_build_flag_ = 0u;
  clear_has_auto_build_flag();
}
inline ::google::protobuf::uint32 Base::auto_build_flag() const {
  // @@protoc_insertion_point(field_get:User.Base.auto_build_flag)
  return auto_build_flag_;
}
inline void Base::set_auto_build_flag(::google::protobuf::uint32 value) {
  set_has_auto_build_flag();
  auto_build_flag_ = value;
  // @@protoc_insertion_point(field_set:User.Base.auto_build_flag)
}

// required uint32 integral_time_cnt = 58;
inline bool Base::has_integral_time_cnt() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Base::set_has_integral_time_cnt() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Base::clear_has_integral_time_cnt() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Base::clear_integral_time_cnt() {
  integral_time_cnt_ = 0u;
  clear_has_integral_time_cnt();
}
inline ::google::protobuf::uint32 Base::integral_time_cnt() const {
  // @@protoc_insertion_point(field_get:User.Base.integral_time_cnt)
  return integral_time_cnt_;
}
inline void Base::set_integral_time_cnt(::google::protobuf::uint32 value) {
  set_has_integral_time_cnt();
  integral_time_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.Base.integral_time_cnt)
}

// required uint32 mission_time = 59;
inline bool Base::has_mission_time() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Base::set_has_mission_time() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Base::clear_has_mission_time() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Base::clear_mission_time() {
  mission_time_ = 0u;
  clear_has_mission_time();
}
inline ::google::protobuf::uint32 Base::mission_time() const {
  // @@protoc_insertion_point(field_get:User.Base.mission_time)
  return mission_time_;
}
inline void Base::set_mission_time(::google::protobuf::uint32 value) {
  set_has_mission_time();
  mission_time_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mission_time)
}

// required uint32 mission_id = 60;
inline bool Base::has_mission_id() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Base::set_has_mission_id() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Base::clear_has_mission_id() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Base::clear_mission_id() {
  mission_id_ = 0u;
  clear_has_mission_id();
}
inline ::google::protobuf::uint32 Base::mission_id() const {
  // @@protoc_insertion_point(field_get:User.Base.mission_id)
  return mission_id_;
}
inline void Base::set_mission_id(::google::protobuf::uint32 value) {
  set_has_mission_id();
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:User.Base.mission_id)
}

// required uint32 vip_reward = 61;
inline bool Base::has_vip_reward() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Base::set_has_vip_reward() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Base::clear_has_vip_reward() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Base::clear_vip_reward() {
  vip_reward_ = 0u;
  clear_has_vip_reward();
}
inline ::google::protobuf::uint32 Base::vip_reward() const {
  // @@protoc_insertion_point(field_get:User.Base.vip_reward)
  return vip_reward_;
}
inline void Base::set_vip_reward(::google::protobuf::uint32 value) {
  set_has_vip_reward();
  vip_reward_ = value;
  // @@protoc_insertion_point(field_set:User.Base.vip_reward)
}

// required uint32 ladder = 62;
inline bool Base::has_ladder() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Base::set_has_ladder() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Base::clear_has_ladder() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Base::clear_ladder() {
  ladder_ = 0u;
  clear_has_ladder();
}
inline ::google::protobuf::uint32 Base::ladder() const {
  // @@protoc_insertion_point(field_get:User.Base.ladder)
  return ladder_;
}
inline void Base::set_ladder(::google::protobuf::uint32 value) {
  set_has_ladder();
  ladder_ = value;
  // @@protoc_insertion_point(field_set:User.Base.ladder)
}

// required uint32 ladder_ts = 63;
inline bool Base::has_ladder_ts() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Base::set_has_ladder_ts() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Base::clear_has_ladder_ts() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Base::clear_ladder_ts() {
  ladder_ts_ = 0u;
  clear_has_ladder_ts();
}
inline ::google::protobuf::uint32 Base::ladder_ts() const {
  // @@protoc_insertion_point(field_get:User.Base.ladder_ts)
  return ladder_ts_;
}
inline void Base::set_ladder_ts(::google::protobuf::uint32 value) {
  set_has_ladder_ts();
  ladder_ts_ = value;
  // @@protoc_insertion_point(field_set:User.Base.ladder_ts)
}

// required uint32 job_reward_ts = 64;
inline bool Base::has_job_reward_ts() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Base::set_has_job_reward_ts() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Base::clear_has_job_reward_ts() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Base::clear_job_reward_ts() {
  job_reward_ts_ = 0u;
  clear_has_job_reward_ts();
}
inline ::google::protobuf::uint32 Base::job_reward_ts() const {
  // @@protoc_insertion_point(field_get:User.Base.job_reward_ts)
  return job_reward_ts_;
}
inline void Base::set_job_reward_ts(::google::protobuf::uint32 value) {
  set_has_job_reward_ts();
  job_reward_ts_ = value;
  // @@protoc_insertion_point(field_set:User.Base.job_reward_ts)
}

// required uint32 department = 65;
inline bool Base::has_department() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Base::set_has_department() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Base::clear_has_department() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Base::clear_department() {
  department_ = 0u;
  clear_has_department();
}
inline ::google::protobuf::uint32 Base::department() const {
  // @@protoc_insertion_point(field_get:User.Base.department)
  return department_;
}
inline void Base::set_department(::google::protobuf::uint32 value) {
  set_has_department();
  department_ = value;
  // @@protoc_insertion_point(field_set:User.Base.department)
}

// required uint32 official = 66;
inline bool Base::has_official() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Base::set_has_official() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Base::clear_has_official() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Base::clear_official() {
  official_ = 0u;
  clear_has_official();
}
inline ::google::protobuf::uint32 Base::official() const {
  // @@protoc_insertion_point(field_get:User.Base.official)
  return official_;
}
inline void Base::set_official(::google::protobuf::uint32 value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:User.Base.official)
}

// optional uint32 prestige = 67;
inline bool Base::has_prestige() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Base::set_has_prestige() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Base::clear_has_prestige() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Base::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 Base::prestige() const {
  // @@protoc_insertion_point(field_get:User.Base.prestige)
  return prestige_;
}
inline void Base::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
  // @@protoc_insertion_point(field_set:User.Base.prestige)
}

// required uint32 token_ts = 68;
inline bool Base::has_token_ts() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Base::set_has_token_ts() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Base::clear_has_token_ts() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Base::clear_token_ts() {
  token_ts_ = 0u;
  clear_has_token_ts();
}
inline ::google::protobuf::uint32 Base::token_ts() const {
  // @@protoc_insertion_point(field_get:User.Base.token_ts)
  return token_ts_;
}
inline void Base::set_token_ts(::google::protobuf::uint32 value) {
  set_has_token_ts();
  token_ts_ = value;
  // @@protoc_insertion_point(field_set:User.Base.token_ts)
}

// required uint32 daily_refresh_ts = 69;
inline bool Base::has_daily_refresh_ts() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Base::set_has_daily_refresh_ts() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Base::clear_has_daily_refresh_ts() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Base::clear_daily_refresh_ts() {
  daily_refresh_ts_ = 0u;
  clear_has_daily_refresh_ts();
}
inline ::google::protobuf::uint32 Base::daily_refresh_ts() const {
  // @@protoc_insertion_point(field_get:User.Base.daily_refresh_ts)
  return daily_refresh_ts_;
}
inline void Base::set_daily_refresh_ts(::google::protobuf::uint32 value) {
  set_has_daily_refresh_ts();
  daily_refresh_ts_ = value;
  // @@protoc_insertion_point(field_set:User.Base.daily_refresh_ts)
}

// required uint32 daily_reward_times = 70;
inline bool Base::has_daily_reward_times() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Base::set_has_daily_reward_times() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Base::clear_has_daily_reward_times() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Base::clear_daily_reward_times() {
  daily_reward_times_ = 0u;
  clear_has_daily_reward_times();
}
inline ::google::protobuf::uint32 Base::daily_reward_times() const {
  // @@protoc_insertion_point(field_get:User.Base.daily_reward_times)
  return daily_reward_times_;
}
inline void Base::set_daily_reward_times(::google::protobuf::uint32 value) {
  set_has_daily_reward_times();
  daily_reward_times_ = value;
  // @@protoc_insertion_point(field_set:User.Base.daily_reward_times)
}

// required uint32 daily_free_times = 71;
inline bool Base::has_daily_free_times() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Base::set_has_daily_free_times() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Base::clear_has_daily_free_times() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Base::clear_daily_free_times() {
  daily_free_times_ = 0u;
  clear_has_daily_free_times();
}
inline ::google::protobuf::uint32 Base::daily_free_times() const {
  // @@protoc_insertion_point(field_get:User.Base.daily_free_times)
  return daily_free_times_;
}
inline void Base::set_daily_free_times(::google::protobuf::uint32 value) {
  set_has_daily_free_times();
  daily_free_times_ = value;
  // @@protoc_insertion_point(field_set:User.Base.daily_free_times)
}

// -------------------------------------------------------------------

// Building

// repeated .ProtoBuilding.BuildInfo builds = 1;
inline int Building::builds_size() const {
  return builds_.size();
}
inline void Building::clear_builds() {
  builds_.Clear();
}
inline const ::ProtoBuilding::BuildInfo& Building::builds(int index) const {
  // @@protoc_insertion_point(field_get:User.Building.builds)
  return builds_.Get(index);
}
inline ::ProtoBuilding::BuildInfo* Building::mutable_builds(int index) {
  // @@protoc_insertion_point(field_mutable:User.Building.builds)
  return builds_.Mutable(index);
}
inline ::ProtoBuilding::BuildInfo* Building::add_builds() {
  // @@protoc_insertion_point(field_add:User.Building.builds)
  return builds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildInfo >&
Building::builds() const {
  // @@protoc_insertion_point(field_list:User.Building.builds)
  return builds_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildInfo >*
Building::mutable_builds() {
  // @@protoc_insertion_point(field_mutable_list:User.Building.builds)
  return &builds_;
}

// required .ProtoBuilding.BuildQueue queue = 2;
inline bool Building::has_queue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Building::set_has_queue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Building::clear_has_queue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Building::clear_queue() {
  if (queue_ != NULL) queue_->::ProtoBuilding::BuildQueue::Clear();
  clear_has_queue();
}
inline const ::ProtoBuilding::BuildQueue& Building::queue() const {
  // @@protoc_insertion_point(field_get:User.Building.queue)
  return queue_ != NULL ? *queue_ : *default_instance_->queue_;
}
inline ::ProtoBuilding::BuildQueue* Building::mutable_queue() {
  set_has_queue();
  if (queue_ == NULL) queue_ = new ::ProtoBuilding::BuildQueue;
  // @@protoc_insertion_point(field_mutable:User.Building.queue)
  return queue_;
}
inline ::ProtoBuilding::BuildQueue* Building::release_queue() {
  clear_has_queue();
  ::ProtoBuilding::BuildQueue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline void Building::set_allocated_queue(::ProtoBuilding::BuildQueue* queue) {
  delete queue_;
  queue_ = queue;
  if (queue) {
    set_has_queue();
  } else {
    clear_has_queue();
  }
  // @@protoc_insertion_point(field_set_allocated:User.Building.queue)
}

// repeated .ProtoBuilding.BuildYield yield = 3;
inline int Building::yield_size() const {
  return yield_.size();
}
inline void Building::clear_yield() {
  yield_.Clear();
}
inline const ::ProtoBuilding::BuildYield& Building::yield(int index) const {
  // @@protoc_insertion_point(field_get:User.Building.yield)
  return yield_.Get(index);
}
inline ::ProtoBuilding::BuildYield* Building::mutable_yield(int index) {
  // @@protoc_insertion_point(field_mutable:User.Building.yield)
  return yield_.Mutable(index);
}
inline ::ProtoBuilding::BuildYield* Building::add_yield() {
  // @@protoc_insertion_point(field_add:User.Building.yield)
  return yield_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildYield >&
Building::yield() const {
  // @@protoc_insertion_point(field_list:User.Building.yield)
  return yield_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuilding::BuildYield >*
Building::mutable_yield() {
  // @@protoc_insertion_point(field_mutable_list:User.Building.yield)
  return &yield_;
}

// -------------------------------------------------------------------

// Hero

// repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
inline int Hero::hero_size() const {
  return hero_.size();
}
inline void Hero::clear_hero() {
  hero_.Clear();
}
inline const ::ProtoHero::HeroBaseInfoCPP& Hero::hero(int index) const {
  // @@protoc_insertion_point(field_get:User.Hero.hero)
  return hero_.Get(index);
}
inline ::ProtoHero::HeroBaseInfoCPP* Hero::mutable_hero(int index) {
  // @@protoc_insertion_point(field_mutable:User.Hero.hero)
  return hero_.Mutable(index);
}
inline ::ProtoHero::HeroBaseInfoCPP* Hero::add_hero() {
  // @@protoc_insertion_point(field_add:User.Hero.hero)
  return hero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >&
Hero::hero() const {
  // @@protoc_insertion_point(field_list:User.Hero.hero)
  return hero_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >*
Hero::mutable_hero() {
  // @@protoc_insertion_point(field_mutable_list:User.Hero.hero)
  return &hero_;
}

// repeated .ProtoHero.HeroSoldiersCPP soldiers = 2;
inline int Hero::soldiers_size() const {
  return soldiers_.size();
}
inline void Hero::clear_soldiers() {
  soldiers_.Clear();
}
inline const ::ProtoHero::HeroSoldiersCPP& Hero::soldiers(int index) const {
  // @@protoc_insertion_point(field_get:User.Hero.soldiers)
  return soldiers_.Get(index);
}
inline ::ProtoHero::HeroSoldiersCPP* Hero::mutable_soldiers(int index) {
  // @@protoc_insertion_point(field_mutable:User.Hero.soldiers)
  return soldiers_.Mutable(index);
}
inline ::ProtoHero::HeroSoldiersCPP* Hero::add_soldiers() {
  // @@protoc_insertion_point(field_add:User.Hero.soldiers)
  return soldiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroSoldiersCPP >&
Hero::soldiers() const {
  // @@protoc_insertion_point(field_list:User.Hero.soldiers)
  return soldiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroSoldiersCPP >*
Hero::mutable_soldiers() {
  // @@protoc_insertion_point(field_mutable_list:User.Hero.soldiers)
  return &soldiers_;
}

// -------------------------------------------------------------------

// Science

// repeated .ProtoScience.ScienceItemCPP items = 1;
inline int Science::items_size() const {
  return items_.size();
}
inline void Science::clear_items() {
  items_.Clear();
}
inline const ::ProtoScience::ScienceItemCPP& Science::items(int index) const {
  // @@protoc_insertion_point(field_get:User.Science.items)
  return items_.Get(index);
}
inline ::ProtoScience::ScienceItemCPP* Science::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:User.Science.items)
  return items_.Mutable(index);
}
inline ::ProtoScience::ScienceItemCPP* Science::add_items() {
  // @@protoc_insertion_point(field_add:User.Science.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoScience::ScienceItemCPP >&
Science::items() const {
  // @@protoc_insertion_point(field_list:User.Science.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoScience::ScienceItemCPP >*
Science::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:User.Science.items)
  return &items_;
}

// required uint32 recruit_hero_capacity = 2;
inline bool Science::has_recruit_hero_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Science::set_has_recruit_hero_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Science::clear_has_recruit_hero_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Science::clear_recruit_hero_capacity() {
  recruit_hero_capacity_ = 0u;
  clear_has_recruit_hero_capacity();
}
inline ::google::protobuf::uint32 Science::recruit_hero_capacity() const {
  // @@protoc_insertion_point(field_get:User.Science.recruit_hero_capacity)
  return recruit_hero_capacity_;
}
inline void Science::set_recruit_hero_capacity(::google::protobuf::uint32 value) {
  set_has_recruit_hero_capacity();
  recruit_hero_capacity_ = value;
  // @@protoc_insertion_point(field_set:User.Science.recruit_hero_capacity)
}

// required uint32 soldiers_row = 3;
inline bool Science::has_soldiers_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Science::set_has_soldiers_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Science::clear_has_soldiers_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Science::clear_soldiers_row() {
  soldiers_row_ = 0u;
  clear_has_soldiers_row();
}
inline ::google::protobuf::uint32 Science::soldiers_row() const {
  // @@protoc_insertion_point(field_get:User.Science.soldiers_row)
  return soldiers_row_;
}
inline void Science::set_soldiers_row(::google::protobuf::uint32 value) {
  set_has_soldiers_row();
  soldiers_row_ = value;
  // @@protoc_insertion_point(field_set:User.Science.soldiers_row)
}

// required uint32 soldiers_level = 4;
inline bool Science::has_soldiers_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Science::set_has_soldiers_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Science::clear_has_soldiers_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Science::clear_soldiers_level() {
  soldiers_level_ = 0u;
  clear_has_soldiers_level();
}
inline ::google::protobuf::uint32 Science::soldiers_level() const {
  // @@protoc_insertion_point(field_get:User.Science.soldiers_level)
  return soldiers_level_;
}
inline void Science::set_soldiers_level(::google::protobuf::uint32 value) {
  set_has_soldiers_level();
  soldiers_level_ = value;
  // @@protoc_insertion_point(field_set:User.Science.soldiers_level)
}

// required uint32 exploit_box_level = 5;
inline bool Science::has_exploit_box_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Science::set_has_exploit_box_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Science::clear_has_exploit_box_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Science::clear_exploit_box_level() {
  exploit_box_level_ = 0u;
  clear_has_exploit_box_level();
}
inline ::google::protobuf::uint32 Science::exploit_box_level() const {
  // @@protoc_insertion_point(field_get:User.Science.exploit_box_level)
  return exploit_box_level_;
}
inline void Science::set_exploit_box_level(::google::protobuf::uint32 value) {
  set_has_exploit_box_level();
  exploit_box_level_ = value;
  // @@protoc_insertion_point(field_set:User.Science.exploit_box_level)
}

// -------------------------------------------------------------------

// Weapon

// repeated .ProtoWeapon.WeaponInfoCPP items = 1;
inline int Weapon::items_size() const {
  return items_.size();
}
inline void Weapon::clear_items() {
  items_.Clear();
}
inline const ::ProtoWeapon::WeaponInfoCPP& Weapon::items(int index) const {
  // @@protoc_insertion_point(field_get:User.Weapon.items)
  return items_.Get(index);
}
inline ::ProtoWeapon::WeaponInfoCPP* Weapon::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:User.Weapon.items)
  return items_.Mutable(index);
}
inline ::ProtoWeapon::WeaponInfoCPP* Weapon::add_items() {
  // @@protoc_insertion_point(field_add:User.Weapon.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoWeapon::WeaponInfoCPP >&
Weapon::items() const {
  // @@protoc_insertion_point(field_list:User.Weapon.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoWeapon::WeaponInfoCPP >*
Weapon::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:User.Weapon.items)
  return &items_;
}

// -------------------------------------------------------------------

// NPCPass

// repeated .ProtoPass.NPCPassRecord items = 1;
inline int NPCPass::items_size() const {
  return items_.size();
}
inline void NPCPass::clear_items() {
  items_.Clear();
}
inline const ::ProtoPass::NPCPassRecord& NPCPass::items(int index) const {
  // @@protoc_insertion_point(field_get:User.NPCPass.items)
  return items_.Get(index);
}
inline ::ProtoPass::NPCPassRecord* NPCPass::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:User.NPCPass.items)
  return items_.Mutable(index);
}
inline ::ProtoPass::NPCPassRecord* NPCPass::add_items() {
  // @@protoc_insertion_point(field_add:User.NPCPass.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPass::NPCPassRecord >&
NPCPass::items() const {
  // @@protoc_insertion_point(field_list:User.NPCPass.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPass::NPCPassRecord >*
NPCPass::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:User.NPCPass.items)
  return &items_;
}

// -------------------------------------------------------------------

// ActivityItem

// required uint32 id = 1;
inline bool ActivityItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ActivityItem::id() const {
  // @@protoc_insertion_point(field_get:User.ActivityItem.id)
  return id_;
}
inline void ActivityItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:User.ActivityItem.id)
}

// required uint32 bts = 2;
inline bool ActivityItem::has_bts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityItem::set_has_bts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityItem::clear_has_bts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityItem::clear_bts() {
  bts_ = 0u;
  clear_has_bts();
}
inline ::google::protobuf::uint32 ActivityItem::bts() const {
  // @@protoc_insertion_point(field_get:User.ActivityItem.bts)
  return bts_;
}
inline void ActivityItem::set_bts(::google::protobuf::uint32 value) {
  set_has_bts();
  bts_ = value;
  // @@protoc_insertion_point(field_set:User.ActivityItem.bts)
}

// required uint32 ets = 3;
inline bool ActivityItem::has_ets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityItem::set_has_ets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityItem::clear_has_ets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityItem::clear_ets() {
  ets_ = 0u;
  clear_has_ets();
}
inline ::google::protobuf::uint32 ActivityItem::ets() const {
  // @@protoc_insertion_point(field_get:User.ActivityItem.ets)
  return ets_;
}
inline void ActivityItem::set_ets(::google::protobuf::uint32 value) {
  set_has_ets();
  ets_ = value;
  // @@protoc_insertion_point(field_set:User.ActivityItem.ets)
}

// required uint32 ver = 4;
inline bool ActivityItem::has_ver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityItem::set_has_ver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityItem::clear_has_ver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityItem::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 ActivityItem::ver() const {
  // @@protoc_insertion_point(field_get:User.ActivityItem.ver)
  return ver_;
}
inline void ActivityItem::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:User.ActivityItem.ver)
}

// -------------------------------------------------------------------

// Activity

// repeated .User.ActivityItem act = 1;
inline int Activity::act_size() const {
  return act_.size();
}
inline void Activity::clear_act() {
  act_.Clear();
}
inline const ::User::ActivityItem& Activity::act(int index) const {
  // @@protoc_insertion_point(field_get:User.Activity.act)
  return act_.Get(index);
}
inline ::User::ActivityItem* Activity::mutable_act(int index) {
  // @@protoc_insertion_point(field_mutable:User.Activity.act)
  return act_.Mutable(index);
}
inline ::User::ActivityItem* Activity::add_act() {
  // @@protoc_insertion_point(field_add:User.Activity.act)
  return act_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User::ActivityItem >&
Activity::act() const {
  // @@protoc_insertion_point(field_list:User.Activity.act)
  return act_;
}
inline ::google::protobuf::RepeatedPtrField< ::User::ActivityItem >*
Activity::mutable_act() {
  // @@protoc_insertion_point(field_mutable_list:User.Activity.act)
  return &act_;
}

// -------------------------------------------------------------------

// MineItem

// required uint32 mine_reward_ts = 1;
inline bool MineItem::has_mine_reward_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineItem::set_has_mine_reward_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineItem::clear_has_mine_reward_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineItem::clear_mine_reward_ts() {
  mine_reward_ts_ = 0u;
  clear_has_mine_reward_ts();
}
inline ::google::protobuf::uint32 MineItem::mine_reward_ts() const {
  // @@protoc_insertion_point(field_get:User.MineItem.mine_reward_ts)
  return mine_reward_ts_;
}
inline void MineItem::set_mine_reward_ts(::google::protobuf::uint32 value) {
  set_has_mine_reward_ts();
  mine_reward_ts_ = value;
  // @@protoc_insertion_point(field_set:User.MineItem.mine_reward_ts)
}

// required bool mine_kingdom_status = 2;
inline bool MineItem::has_mine_kingdom_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineItem::set_has_mine_kingdom_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineItem::clear_has_mine_kingdom_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineItem::clear_mine_kingdom_status() {
  mine_kingdom_status_ = false;
  clear_has_mine_kingdom_status();
}
inline bool MineItem::mine_kingdom_status() const {
  // @@protoc_insertion_point(field_get:User.MineItem.mine_kingdom_status)
  return mine_kingdom_status_;
}
inline void MineItem::set_mine_kingdom_status(bool value) {
  set_has_mine_kingdom_status();
  mine_kingdom_status_ = value;
  // @@protoc_insertion_point(field_set:User.MineItem.mine_kingdom_status)
}

// -------------------------------------------------------------------

// TimeLimtPropItem

// required uint32 id = 1;
inline bool TimeLimtPropItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeLimtPropItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeLimtPropItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeLimtPropItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TimeLimtPropItem::id() const {
  // @@protoc_insertion_point(field_get:User.TimeLimtPropItem.id)
  return id_;
}
inline void TimeLimtPropItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:User.TimeLimtPropItem.id)
}

// required uint32 expire_time = 2;
inline bool TimeLimtPropItem::has_expire_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeLimtPropItem::set_has_expire_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeLimtPropItem::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeLimtPropItem::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 TimeLimtPropItem::expire_time() const {
  // @@protoc_insertion_point(field_get:User.TimeLimtPropItem.expire_time)
  return expire_time_;
}
inline void TimeLimtPropItem::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:User.TimeLimtPropItem.expire_time)
}

// -------------------------------------------------------------------

// EliteNPCInfo

// required uint32 cid = 1;
inline bool EliteNPCInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EliteNPCInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EliteNPCInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EliteNPCInfo::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 EliteNPCInfo::cid() const {
  // @@protoc_insertion_point(field_get:User.EliteNPCInfo.cid)
  return cid_;
}
inline void EliteNPCInfo::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:User.EliteNPCInfo.cid)
}

// required uint32 type = 2;
inline bool EliteNPCInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EliteNPCInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EliteNPCInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EliteNPCInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EliteNPCInfo::type() const {
  // @@protoc_insertion_point(field_get:User.EliteNPCInfo.type)
  return type_;
}
inline void EliteNPCInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:User.EliteNPCInfo.type)
}

// -------------------------------------------------------------------

// EliteNPCInfoAll

// repeated .User.EliteNPCInfo npc = 1;
inline int EliteNPCInfoAll::npc_size() const {
  return npc_.size();
}
inline void EliteNPCInfoAll::clear_npc() {
  npc_.Clear();
}
inline const ::User::EliteNPCInfo& EliteNPCInfoAll::npc(int index) const {
  // @@protoc_insertion_point(field_get:User.EliteNPCInfoAll.npc)
  return npc_.Get(index);
}
inline ::User::EliteNPCInfo* EliteNPCInfoAll::mutable_npc(int index) {
  // @@protoc_insertion_point(field_mutable:User.EliteNPCInfoAll.npc)
  return npc_.Mutable(index);
}
inline ::User::EliteNPCInfo* EliteNPCInfoAll::add_npc() {
  // @@protoc_insertion_point(field_add:User.EliteNPCInfoAll.npc)
  return npc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >&
EliteNPCInfoAll::npc() const {
  // @@protoc_insertion_point(field_list:User.EliteNPCInfoAll.npc)
  return npc_;
}
inline ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >*
EliteNPCInfoAll::mutable_npc() {
  // @@protoc_insertion_point(field_mutable_list:User.EliteNPCInfoAll.npc)
  return &npc_;
}

// -------------------------------------------------------------------

// User

// required .User.Base base = 1;
inline bool User::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_base() {
  if (base_ != NULL) base_->::User::Base::Clear();
  clear_has_base();
}
inline const ::User::Base& User::base() const {
  // @@protoc_insertion_point(field_get:User.User.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::User::Base* User::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::User::Base;
  // @@protoc_insertion_point(field_mutable:User.User.base)
  return base_;
}
inline ::User::Base* User::release_base() {
  clear_has_base();
  ::User::Base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void User::set_allocated_base(::User::Base* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.base)
}

// required .User.Building building = 2;
inline bool User::has_building() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_building() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_building() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_building() {
  if (building_ != NULL) building_->::User::Building::Clear();
  clear_has_building();
}
inline const ::User::Building& User::building() const {
  // @@protoc_insertion_point(field_get:User.User.building)
  return building_ != NULL ? *building_ : *default_instance_->building_;
}
inline ::User::Building* User::mutable_building() {
  set_has_building();
  if (building_ == NULL) building_ = new ::User::Building;
  // @@protoc_insertion_point(field_mutable:User.User.building)
  return building_;
}
inline ::User::Building* User::release_building() {
  clear_has_building();
  ::User::Building* temp = building_;
  building_ = NULL;
  return temp;
}
inline void User::set_allocated_building(::User::Building* building) {
  delete building_;
  building_ = building;
  if (building) {
    set_has_building();
  } else {
    clear_has_building();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.building)
}

// required .User.Hero heroes = 3;
inline bool User::has_heroes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_heroes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_heroes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_heroes() {
  if (heroes_ != NULL) heroes_->::User::Hero::Clear();
  clear_has_heroes();
}
inline const ::User::Hero& User::heroes() const {
  // @@protoc_insertion_point(field_get:User.User.heroes)
  return heroes_ != NULL ? *heroes_ : *default_instance_->heroes_;
}
inline ::User::Hero* User::mutable_heroes() {
  set_has_heroes();
  if (heroes_ == NULL) heroes_ = new ::User::Hero;
  // @@protoc_insertion_point(field_mutable:User.User.heroes)
  return heroes_;
}
inline ::User::Hero* User::release_heroes() {
  clear_has_heroes();
  ::User::Hero* temp = heroes_;
  heroes_ = NULL;
  return temp;
}
inline void User::set_allocated_heroes(::User::Hero* heroes) {
  delete heroes_;
  heroes_ = heroes;
  if (heroes) {
    set_has_heroes();
  } else {
    clear_has_heroes();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.heroes)
}

// repeated .DataCommon.EquipmentCPP equip = 4;
inline int User::equip_size() const {
  return equip_.size();
}
inline void User::clear_equip() {
  equip_.Clear();
}
inline const ::DataCommon::EquipmentCPP& User::equip(int index) const {
  // @@protoc_insertion_point(field_get:User.User.equip)
  return equip_.Get(index);
}
inline ::DataCommon::EquipmentCPP* User::mutable_equip(int index) {
  // @@protoc_insertion_point(field_mutable:User.User.equip)
  return equip_.Mutable(index);
}
inline ::DataCommon::EquipmentCPP* User::add_equip() {
  // @@protoc_insertion_point(field_add:User.User.equip)
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipmentCPP >&
User::equip() const {
  // @@protoc_insertion_point(field_list:User.User.equip)
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipmentCPP >*
User::mutable_equip() {
  // @@protoc_insertion_point(field_mutable_list:User.User.equip)
  return &equip_;
}

// repeated .DataCommon.EquipShopCPP equipshop = 5;
inline int User::equipshop_size() const {
  return equipshop_.size();
}
inline void User::clear_equipshop() {
  equipshop_.Clear();
}
inline const ::DataCommon::EquipShopCPP& User::equipshop(int index) const {
  // @@protoc_insertion_point(field_get:User.User.equipshop)
  return equipshop_.Get(index);
}
inline ::DataCommon::EquipShopCPP* User::mutable_equipshop(int index) {
  // @@protoc_insertion_point(field_mutable:User.User.equipshop)
  return equipshop_.Mutable(index);
}
inline ::DataCommon::EquipShopCPP* User::add_equipshop() {
  // @@protoc_insertion_point(field_add:User.User.equipshop)
  return equipshop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipShopCPP >&
User::equipshop() const {
  // @@protoc_insertion_point(field_list:User.User.equipshop)
  return equipshop_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataCommon::EquipShopCPP >*
User::mutable_equipshop() {
  // @@protoc_insertion_point(field_mutable_list:User.User.equipshop)
  return &equipshop_;
}

// required .ProtoBattleField.Field field = 6;
inline bool User::has_field() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_field() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_field() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_field() {
  if (field_ != NULL) field_->::ProtoBattleField::Field::Clear();
  clear_has_field();
}
inline const ::ProtoBattleField::Field& User::field() const {
  // @@protoc_insertion_point(field_get:User.User.field)
  return field_ != NULL ? *field_ : *default_instance_->field_;
}
inline ::ProtoBattleField::Field* User::mutable_field() {
  set_has_field();
  if (field_ == NULL) field_ = new ::ProtoBattleField::Field;
  // @@protoc_insertion_point(field_mutable:User.User.field)
  return field_;
}
inline ::ProtoBattleField::Field* User::release_field() {
  clear_has_field();
  ::ProtoBattleField::Field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void User::set_allocated_field(::ProtoBattleField::Field* field) {
  delete field_;
  field_ = field;
  if (field) {
    set_has_field();
  } else {
    clear_has_field();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.field)
}

// required .ProtoMission.MissionAllCPP mission = 7;
inline bool User::has_mission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_mission() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_mission() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_mission() {
  if (mission_ != NULL) mission_->::ProtoMission::MissionAllCPP::Clear();
  clear_has_mission();
}
inline const ::ProtoMission::MissionAllCPP& User::mission() const {
  // @@protoc_insertion_point(field_get:User.User.mission)
  return mission_ != NULL ? *mission_ : *default_instance_->mission_;
}
inline ::ProtoMission::MissionAllCPP* User::mutable_mission() {
  set_has_mission();
  if (mission_ == NULL) mission_ = new ::ProtoMission::MissionAllCPP;
  // @@protoc_insertion_point(field_mutable:User.User.mission)
  return mission_;
}
inline ::ProtoMission::MissionAllCPP* User::release_mission() {
  clear_has_mission();
  ::ProtoMission::MissionAllCPP* temp = mission_;
  mission_ = NULL;
  return temp;
}
inline void User::set_allocated_mission(::ProtoMission::MissionAllCPP* mission) {
  delete mission_;
  mission_ = mission;
  if (mission) {
    set_has_mission();
  } else {
    clear_has_mission();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.mission)
}

// required .User.Science science = 8;
inline bool User::has_science() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::set_has_science() {
  _has_bits_[0] |= 0x00000080u;
}
inline void User::clear_has_science() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void User::clear_science() {
  if (science_ != NULL) science_->::User::Science::Clear();
  clear_has_science();
}
inline const ::User::Science& User::science() const {
  // @@protoc_insertion_point(field_get:User.User.science)
  return science_ != NULL ? *science_ : *default_instance_->science_;
}
inline ::User::Science* User::mutable_science() {
  set_has_science();
  if (science_ == NULL) science_ = new ::User::Science;
  // @@protoc_insertion_point(field_mutable:User.User.science)
  return science_;
}
inline ::User::Science* User::release_science() {
  clear_has_science();
  ::User::Science* temp = science_;
  science_ = NULL;
  return temp;
}
inline void User::set_allocated_science(::User::Science* science) {
  delete science_;
  science_ = science;
  if (science) {
    set_has_science();
  } else {
    clear_has_science();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.science)
}

// required uint32 ts = 9;
inline bool User::has_ts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void User::set_has_ts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void User::clear_has_ts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void User::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 User::ts() const {
  // @@protoc_insertion_point(field_get:User.User.ts)
  return ts_;
}
inline void User::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:User.User.ts)
}

// required .ProtoYellowVip.YellowVipCPP yellowvip = 10;
inline bool User::has_yellowvip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void User::set_has_yellowvip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void User::clear_has_yellowvip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void User::clear_yellowvip() {
  if (yellowvip_ != NULL) yellowvip_->::ProtoYellowVip::YellowVipCPP::Clear();
  clear_has_yellowvip();
}
inline const ::ProtoYellowVip::YellowVipCPP& User::yellowvip() const {
  // @@protoc_insertion_point(field_get:User.User.yellowvip)
  return yellowvip_ != NULL ? *yellowvip_ : *default_instance_->yellowvip_;
}
inline ::ProtoYellowVip::YellowVipCPP* User::mutable_yellowvip() {
  set_has_yellowvip();
  if (yellowvip_ == NULL) yellowvip_ = new ::ProtoYellowVip::YellowVipCPP;
  // @@protoc_insertion_point(field_mutable:User.User.yellowvip)
  return yellowvip_;
}
inline ::ProtoYellowVip::YellowVipCPP* User::release_yellowvip() {
  clear_has_yellowvip();
  ::ProtoYellowVip::YellowVipCPP* temp = yellowvip_;
  yellowvip_ = NULL;
  return temp;
}
inline void User::set_allocated_yellowvip(::ProtoYellowVip::YellowVipCPP* yellowvip) {
  delete yellowvip_;
  yellowvip_ = yellowvip;
  if (yellowvip) {
    set_has_yellowvip();
  } else {
    clear_has_yellowvip();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.yellowvip)
}

// optional .ProtoMarket.MarketCPP market = 11;
inline bool User::has_market() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void User::set_has_market() {
  _has_bits_[0] |= 0x00000400u;
}
inline void User::clear_has_market() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void User::clear_market() {
  if (market_ != NULL) market_->::ProtoMarket::MarketCPP::Clear();
  clear_has_market();
}
inline const ::ProtoMarket::MarketCPP& User::market() const {
  // @@protoc_insertion_point(field_get:User.User.market)
  return market_ != NULL ? *market_ : *default_instance_->market_;
}
inline ::ProtoMarket::MarketCPP* User::mutable_market() {
  set_has_market();
  if (market_ == NULL) market_ = new ::ProtoMarket::MarketCPP;
  // @@protoc_insertion_point(field_mutable:User.User.market)
  return market_;
}
inline ::ProtoMarket::MarketCPP* User::release_market() {
  clear_has_market();
  ::ProtoMarket::MarketCPP* temp = market_;
  market_ = NULL;
  return temp;
}
inline void User::set_allocated_market(::ProtoMarket::MarketCPP* market) {
  delete market_;
  market_ = market;
  if (market) {
    set_has_market();
  } else {
    clear_has_market();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.market)
}

// required .ProtoBattleField.ReplyRewardInfo reward = 12;
inline bool User::has_reward() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void User::set_has_reward() {
  _has_bits_[0] |= 0x00000800u;
}
inline void User::clear_has_reward() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void User::clear_reward() {
  if (reward_ != NULL) reward_->::ProtoBattleField::ReplyRewardInfo::Clear();
  clear_has_reward();
}
inline const ::ProtoBattleField::ReplyRewardInfo& User::reward() const {
  // @@protoc_insertion_point(field_get:User.User.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::ProtoBattleField::ReplyRewardInfo* User::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::ProtoBattleField::ReplyRewardInfo;
  // @@protoc_insertion_point(field_mutable:User.User.reward)
  return reward_;
}
inline ::ProtoBattleField::ReplyRewardInfo* User::release_reward() {
  clear_has_reward();
  ::ProtoBattleField::ReplyRewardInfo* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void User::set_allocated_reward(::ProtoBattleField::ReplyRewardInfo* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.reward)
}

// required .User.Weapon weapon = 13;
inline bool User::has_weapon() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void User::set_has_weapon() {
  _has_bits_[0] |= 0x00001000u;
}
inline void User::clear_has_weapon() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void User::clear_weapon() {
  if (weapon_ != NULL) weapon_->::User::Weapon::Clear();
  clear_has_weapon();
}
inline const ::User::Weapon& User::weapon() const {
  // @@protoc_insertion_point(field_get:User.User.weapon)
  return weapon_ != NULL ? *weapon_ : *default_instance_->weapon_;
}
inline ::User::Weapon* User::mutable_weapon() {
  set_has_weapon();
  if (weapon_ == NULL) weapon_ = new ::User::Weapon;
  // @@protoc_insertion_point(field_mutable:User.User.weapon)
  return weapon_;
}
inline ::User::Weapon* User::release_weapon() {
  clear_has_weapon();
  ::User::Weapon* temp = weapon_;
  weapon_ = NULL;
  return temp;
}
inline void User::set_allocated_weapon(::User::Weapon* weapon) {
  delete weapon_;
  weapon_ = weapon;
  if (weapon) {
    set_has_weapon();
  } else {
    clear_has_weapon();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.weapon)
}

// required .User.NPCPass npcpass = 14;
inline bool User::has_npcpass() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void User::set_has_npcpass() {
  _has_bits_[0] |= 0x00002000u;
}
inline void User::clear_has_npcpass() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void User::clear_npcpass() {
  if (npcpass_ != NULL) npcpass_->::User::NPCPass::Clear();
  clear_has_npcpass();
}
inline const ::User::NPCPass& User::npcpass() const {
  // @@protoc_insertion_point(field_get:User.User.npcpass)
  return npcpass_ != NULL ? *npcpass_ : *default_instance_->npcpass_;
}
inline ::User::NPCPass* User::mutable_npcpass() {
  set_has_npcpass();
  if (npcpass_ == NULL) npcpass_ = new ::User::NPCPass;
  // @@protoc_insertion_point(field_mutable:User.User.npcpass)
  return npcpass_;
}
inline ::User::NPCPass* User::release_npcpass() {
  clear_has_npcpass();
  ::User::NPCPass* temp = npcpass_;
  npcpass_ = NULL;
  return temp;
}
inline void User::set_allocated_npcpass(::User::NPCPass* npcpass) {
  delete npcpass_;
  npcpass_ = npcpass;
  if (npcpass) {
    set_has_npcpass();
  } else {
    clear_has_npcpass();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.npcpass)
}

// required .ProtoCumulation.CumulationCPP cumulation = 15;
inline bool User::has_cumulation() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void User::set_has_cumulation() {
  _has_bits_[0] |= 0x00004000u;
}
inline void User::clear_has_cumulation() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void User::clear_cumulation() {
  if (cumulation_ != NULL) cumulation_->::ProtoCumulation::CumulationCPP::Clear();
  clear_has_cumulation();
}
inline const ::ProtoCumulation::CumulationCPP& User::cumulation() const {
  // @@protoc_insertion_point(field_get:User.User.cumulation)
  return cumulation_ != NULL ? *cumulation_ : *default_instance_->cumulation_;
}
inline ::ProtoCumulation::CumulationCPP* User::mutable_cumulation() {
  set_has_cumulation();
  if (cumulation_ == NULL) cumulation_ = new ::ProtoCumulation::CumulationCPP;
  // @@protoc_insertion_point(field_mutable:User.User.cumulation)
  return cumulation_;
}
inline ::ProtoCumulation::CumulationCPP* User::release_cumulation() {
  clear_has_cumulation();
  ::ProtoCumulation::CumulationCPP* temp = cumulation_;
  cumulation_ = NULL;
  return temp;
}
inline void User::set_allocated_cumulation(::ProtoCumulation::CumulationCPP* cumulation) {
  delete cumulation_;
  cumulation_ = cumulation;
  if (cumulation) {
    set_has_cumulation();
  } else {
    clear_has_cumulation();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.cumulation)
}

// required .User.Activity activity = 16;
inline bool User::has_activity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void User::set_has_activity() {
  _has_bits_[0] |= 0x00008000u;
}
inline void User::clear_has_activity() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void User::clear_activity() {
  if (activity_ != NULL) activity_->::User::Activity::Clear();
  clear_has_activity();
}
inline const ::User::Activity& User::activity() const {
  // @@protoc_insertion_point(field_get:User.User.activity)
  return activity_ != NULL ? *activity_ : *default_instance_->activity_;
}
inline ::User::Activity* User::mutable_activity() {
  set_has_activity();
  if (activity_ == NULL) activity_ = new ::User::Activity;
  // @@protoc_insertion_point(field_mutable:User.User.activity)
  return activity_;
}
inline ::User::Activity* User::release_activity() {
  clear_has_activity();
  ::User::Activity* temp = activity_;
  activity_ = NULL;
  return temp;
}
inline void User::set_allocated_activity(::User::Activity* activity) {
  delete activity_;
  activity_ = activity;
  if (activity) {
    set_has_activity();
  } else {
    clear_has_activity();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.activity)
}

// repeated .ProtoOfficial.PublishToken token = 17;
inline int User::token_size() const {
  return token_.size();
}
inline void User::clear_token() {
  token_.Clear();
}
inline const ::ProtoOfficial::PublishToken& User::token(int index) const {
  // @@protoc_insertion_point(field_get:User.User.token)
  return token_.Get(index);
}
inline ::ProtoOfficial::PublishToken* User::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:User.User.token)
  return token_.Mutable(index);
}
inline ::ProtoOfficial::PublishToken* User::add_token() {
  // @@protoc_insertion_point(field_add:User.User.token)
  return token_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoOfficial::PublishToken >&
User::token() const {
  // @@protoc_insertion_point(field_list:User.User.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoOfficial::PublishToken >*
User::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:User.User.token)
  return &token_;
}

// required .ProtoFogGate.FogGateCPPAll foggates = 18;
inline bool User::has_foggates() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void User::set_has_foggates() {
  _has_bits_[0] |= 0x00020000u;
}
inline void User::clear_has_foggates() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void User::clear_foggates() {
  if (foggates_ != NULL) foggates_->::ProtoFogGate::FogGateCPPAll::Clear();
  clear_has_foggates();
}
inline const ::ProtoFogGate::FogGateCPPAll& User::foggates() const {
  // @@protoc_insertion_point(field_get:User.User.foggates)
  return foggates_ != NULL ? *foggates_ : *default_instance_->foggates_;
}
inline ::ProtoFogGate::FogGateCPPAll* User::mutable_foggates() {
  set_has_foggates();
  if (foggates_ == NULL) foggates_ = new ::ProtoFogGate::FogGateCPPAll;
  // @@protoc_insertion_point(field_mutable:User.User.foggates)
  return foggates_;
}
inline ::ProtoFogGate::FogGateCPPAll* User::release_foggates() {
  clear_has_foggates();
  ::ProtoFogGate::FogGateCPPAll* temp = foggates_;
  foggates_ = NULL;
  return temp;
}
inline void User::set_allocated_foggates(::ProtoFogGate::FogGateCPPAll* foggates) {
  delete foggates_;
  foggates_ = foggates;
  if (foggates) {
    set_has_foggates();
  } else {
    clear_has_foggates();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.foggates)
}

// required .User.MineItem mine = 19;
inline bool User::has_mine() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void User::set_has_mine() {
  _has_bits_[0] |= 0x00040000u;
}
inline void User::clear_has_mine() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void User::clear_mine() {
  if (mine_ != NULL) mine_->::User::MineItem::Clear();
  clear_has_mine();
}
inline const ::User::MineItem& User::mine() const {
  // @@protoc_insertion_point(field_get:User.User.mine)
  return mine_ != NULL ? *mine_ : *default_instance_->mine_;
}
inline ::User::MineItem* User::mutable_mine() {
  set_has_mine();
  if (mine_ == NULL) mine_ = new ::User::MineItem;
  // @@protoc_insertion_point(field_mutable:User.User.mine)
  return mine_;
}
inline ::User::MineItem* User::release_mine() {
  clear_has_mine();
  ::User::MineItem* temp = mine_;
  mine_ = NULL;
  return temp;
}
inline void User::set_allocated_mine(::User::MineItem* mine) {
  delete mine_;
  mine_ = mine;
  if (mine) {
    set_has_mine();
  } else {
    clear_has_mine();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.mine)
}

// required .ProtoDailyMission.DailyMissionAllCPP dailymissions = 20;
inline bool User::has_dailymissions() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void User::set_has_dailymissions() {
  _has_bits_[0] |= 0x00080000u;
}
inline void User::clear_has_dailymissions() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void User::clear_dailymissions() {
  if (dailymissions_ != NULL) dailymissions_->::ProtoDailyMission::DailyMissionAllCPP::Clear();
  clear_has_dailymissions();
}
inline const ::ProtoDailyMission::DailyMissionAllCPP& User::dailymissions() const {
  // @@protoc_insertion_point(field_get:User.User.dailymissions)
  return dailymissions_ != NULL ? *dailymissions_ : *default_instance_->dailymissions_;
}
inline ::ProtoDailyMission::DailyMissionAllCPP* User::mutable_dailymissions() {
  set_has_dailymissions();
  if (dailymissions_ == NULL) dailymissions_ = new ::ProtoDailyMission::DailyMissionAllCPP;
  // @@protoc_insertion_point(field_mutable:User.User.dailymissions)
  return dailymissions_;
}
inline ::ProtoDailyMission::DailyMissionAllCPP* User::release_dailymissions() {
  clear_has_dailymissions();
  ::ProtoDailyMission::DailyMissionAllCPP* temp = dailymissions_;
  dailymissions_ = NULL;
  return temp;
}
inline void User::set_allocated_dailymissions(::ProtoDailyMission::DailyMissionAllCPP* dailymissions) {
  delete dailymissions_;
  dailymissions_ = dailymissions;
  if (dailymissions) {
    set_has_dailymissions();
  } else {
    clear_has_dailymissions();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.dailymissions)
}

// repeated .User.TimeLimtPropItem time_limit_props = 21;
inline int User::time_limit_props_size() const {
  return time_limit_props_.size();
}
inline void User::clear_time_limit_props() {
  time_limit_props_.Clear();
}
inline const ::User::TimeLimtPropItem& User::time_limit_props(int index) const {
  // @@protoc_insertion_point(field_get:User.User.time_limit_props)
  return time_limit_props_.Get(index);
}
inline ::User::TimeLimtPropItem* User::mutable_time_limit_props(int index) {
  // @@protoc_insertion_point(field_mutable:User.User.time_limit_props)
  return time_limit_props_.Mutable(index);
}
inline ::User::TimeLimtPropItem* User::add_time_limit_props() {
  // @@protoc_insertion_point(field_add:User.User.time_limit_props)
  return time_limit_props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User::TimeLimtPropItem >&
User::time_limit_props() const {
  // @@protoc_insertion_point(field_list:User.User.time_limit_props)
  return time_limit_props_;
}
inline ::google::protobuf::RepeatedPtrField< ::User::TimeLimtPropItem >*
User::mutable_time_limit_props() {
  // @@protoc_insertion_point(field_mutable_list:User.User.time_limit_props)
  return &time_limit_props_;
}

// required .ProtoComponent.ComponentAllCPP components = 22;
inline bool User::has_components() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void User::set_has_components() {
  _has_bits_[0] |= 0x00200000u;
}
inline void User::clear_has_components() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void User::clear_components() {
  if (components_ != NULL) components_->::ProtoComponent::ComponentAllCPP::Clear();
  clear_has_components();
}
inline const ::ProtoComponent::ComponentAllCPP& User::components() const {
  // @@protoc_insertion_point(field_get:User.User.components)
  return components_ != NULL ? *components_ : *default_instance_->components_;
}
inline ::ProtoComponent::ComponentAllCPP* User::mutable_components() {
  set_has_components();
  if (components_ == NULL) components_ = new ::ProtoComponent::ComponentAllCPP;
  // @@protoc_insertion_point(field_mutable:User.User.components)
  return components_;
}
inline ::ProtoComponent::ComponentAllCPP* User::release_components() {
  clear_has_components();
  ::ProtoComponent::ComponentAllCPP* temp = components_;
  components_ = NULL;
  return temp;
}
inline void User::set_allocated_components(::ProtoComponent::ComponentAllCPP* components) {
  delete components_;
  components_ = components;
  if (components) {
    set_has_components();
  } else {
    clear_has_components();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.components)
}

// required .ProtoComponent.ProduceComponentCPP producecomponent = 23;
inline bool User::has_producecomponent() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void User::set_has_producecomponent() {
  _has_bits_[0] |= 0x00400000u;
}
inline void User::clear_has_producecomponent() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void User::clear_producecomponent() {
  if (producecomponent_ != NULL) producecomponent_->::ProtoComponent::ProduceComponentCPP::Clear();
  clear_has_producecomponent();
}
inline const ::ProtoComponent::ProduceComponentCPP& User::producecomponent() const {
  // @@protoc_insertion_point(field_get:User.User.producecomponent)
  return producecomponent_ != NULL ? *producecomponent_ : *default_instance_->producecomponent_;
}
inline ::ProtoComponent::ProduceComponentCPP* User::mutable_producecomponent() {
  set_has_producecomponent();
  if (producecomponent_ == NULL) producecomponent_ = new ::ProtoComponent::ProduceComponentCPP;
  // @@protoc_insertion_point(field_mutable:User.User.producecomponent)
  return producecomponent_;
}
inline ::ProtoComponent::ProduceComponentCPP* User::release_producecomponent() {
  clear_has_producecomponent();
  ::ProtoComponent::ProduceComponentCPP* temp = producecomponent_;
  producecomponent_ = NULL;
  return temp;
}
inline void User::set_allocated_producecomponent(::ProtoComponent::ProduceComponentCPP* producecomponent) {
  delete producecomponent_;
  producecomponent_ = producecomponent;
  if (producecomponent) {
    set_has_producecomponent();
  } else {
    clear_has_producecomponent();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.producecomponent)
}

// required .ProtoAchievement.AchievementAllCPP achievements = 24;
inline bool User::has_achievements() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void User::set_has_achievements() {
  _has_bits_[0] |= 0x00800000u;
}
inline void User::clear_has_achievements() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void User::clear_achievements() {
  if (achievements_ != NULL) achievements_->::ProtoAchievement::AchievementAllCPP::Clear();
  clear_has_achievements();
}
inline const ::ProtoAchievement::AchievementAllCPP& User::achievements() const {
  // @@protoc_insertion_point(field_get:User.User.achievements)
  return achievements_ != NULL ? *achievements_ : *default_instance_->achievements_;
}
inline ::ProtoAchievement::AchievementAllCPP* User::mutable_achievements() {
  set_has_achievements();
  if (achievements_ == NULL) achievements_ = new ::ProtoAchievement::AchievementAllCPP;
  // @@protoc_insertion_point(field_mutable:User.User.achievements)
  return achievements_;
}
inline ::ProtoAchievement::AchievementAllCPP* User::release_achievements() {
  clear_has_achievements();
  ::ProtoAchievement::AchievementAllCPP* temp = achievements_;
  achievements_ = NULL;
  return temp;
}
inline void User::set_allocated_achievements(::ProtoAchievement::AchievementAllCPP* achievements) {
  delete achievements_;
  achievements_ = achievements;
  if (achievements) {
    set_has_achievements();
  } else {
    clear_has_achievements();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.achievements)
}

// required .User.EliteNPCInfoAll elitenpcs = 25;
inline bool User::has_elitenpcs() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void User::set_has_elitenpcs() {
  _has_bits_[0] |= 0x01000000u;
}
inline void User::clear_has_elitenpcs() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void User::clear_elitenpcs() {
  if (elitenpcs_ != NULL) elitenpcs_->::User::EliteNPCInfoAll::Clear();
  clear_has_elitenpcs();
}
inline const ::User::EliteNPCInfoAll& User::elitenpcs() const {
  // @@protoc_insertion_point(field_get:User.User.elitenpcs)
  return elitenpcs_ != NULL ? *elitenpcs_ : *default_instance_->elitenpcs_;
}
inline ::User::EliteNPCInfoAll* User::mutable_elitenpcs() {
  set_has_elitenpcs();
  if (elitenpcs_ == NULL) elitenpcs_ = new ::User::EliteNPCInfoAll;
  // @@protoc_insertion_point(field_mutable:User.User.elitenpcs)
  return elitenpcs_;
}
inline ::User::EliteNPCInfoAll* User::release_elitenpcs() {
  clear_has_elitenpcs();
  ::User::EliteNPCInfoAll* temp = elitenpcs_;
  elitenpcs_ = NULL;
  return temp;
}
inline void User::set_allocated_elitenpcs(::User::EliteNPCInfoAll* elitenpcs) {
  delete elitenpcs_;
  elitenpcs_ = elitenpcs;
  if (elitenpcs) {
    set_has_elitenpcs();
  } else {
    clear_has_elitenpcs();
  }
  // @@protoc_insertion_point(field_set_allocated:User.User.elitenpcs)
}

// -------------------------------------------------------------------

// Tutorial_stage

// required uint32 tutorial_stage = 1;
inline bool Tutorial_stage::has_tutorial_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tutorial_stage::set_has_tutorial_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tutorial_stage::clear_has_tutorial_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tutorial_stage::clear_tutorial_stage() {
  tutorial_stage_ = 0u;
  clear_has_tutorial_stage();
}
inline ::google::protobuf::uint32 Tutorial_stage::tutorial_stage() const {
  // @@protoc_insertion_point(field_get:User.Tutorial_stage.tutorial_stage)
  return tutorial_stage_;
}
inline void Tutorial_stage::set_tutorial_stage(::google::protobuf::uint32 value) {
  set_has_tutorial_stage();
  tutorial_stage_ = value;
  // @@protoc_insertion_point(field_set:User.Tutorial_stage.tutorial_stage)
}

// -------------------------------------------------------------------

// ServerTime

// required uint32 ts = 1;
inline bool ServerTime::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerTime::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerTime::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerTime::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 ServerTime::ts() const {
  // @@protoc_insertion_point(field_get:User.ServerTime.ts)
  return ts_;
}
inline void ServerTime::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:User.ServerTime.ts)
}

// -------------------------------------------------------------------

// CostCashReq

// required uint32 cash = 1;
inline bool CostCashReq::has_cash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CostCashReq::set_has_cash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CostCashReq::clear_has_cash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CostCashReq::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 CostCashReq::cash() const {
  // @@protoc_insertion_point(field_get:User.CostCashReq.cash)
  return cash_;
}
inline void CostCashReq::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:User.CostCashReq.cash)
}

// required string op_code = 2;
inline bool CostCashReq::has_op_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CostCashReq::set_has_op_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CostCashReq::clear_has_op_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CostCashReq::clear_op_code() {
  if (op_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_code_->clear();
  }
  clear_has_op_code();
}
inline const ::std::string& CostCashReq::op_code() const {
  // @@protoc_insertion_point(field_get:User.CostCashReq.op_code)
  return *op_code_;
}
inline void CostCashReq::set_op_code(const ::std::string& value) {
  set_has_op_code();
  if (op_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_code_ = new ::std::string;
  }
  op_code_->assign(value);
  // @@protoc_insertion_point(field_set:User.CostCashReq.op_code)
}
inline void CostCashReq::set_op_code(const char* value) {
  set_has_op_code();
  if (op_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_code_ = new ::std::string;
  }
  op_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:User.CostCashReq.op_code)
}
inline void CostCashReq::set_op_code(const char* value, size_t size) {
  set_has_op_code();
  if (op_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_code_ = new ::std::string;
  }
  op_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:User.CostCashReq.op_code)
}
inline ::std::string* CostCashReq::mutable_op_code() {
  set_has_op_code();
  if (op_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:User.CostCashReq.op_code)
  return op_code_;
}
inline ::std::string* CostCashReq::release_op_code() {
  clear_has_op_code();
  if (op_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = op_code_;
    op_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CostCashReq::set_allocated_op_code(::std::string* op_code) {
  if (op_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_code_;
  }
  if (op_code) {
    set_has_op_code();
    op_code_ = op_code;
  } else {
    clear_has_op_code();
    op_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:User.CostCashReq.op_code)
}

// required uint32 operation = 3;
inline bool CostCashReq::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CostCashReq::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CostCashReq::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CostCashReq::clear_operation() {
  operation_ = 0u;
  clear_has_operation();
}
inline ::google::protobuf::uint32 CostCashReq::operation() const {
  // @@protoc_insertion_point(field_get:User.CostCashReq.operation)
  return operation_;
}
inline void CostCashReq::set_operation(::google::protobuf::uint32 value) {
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:User.CostCashReq.operation)
}

// -------------------------------------------------------------------

// CostCashResp

// required uint32 cash = 1;
inline bool CostCashResp::has_cash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CostCashResp::set_has_cash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CostCashResp::clear_has_cash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CostCashResp::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 CostCashResp::cash() const {
  // @@protoc_insertion_point(field_get:User.CostCashResp.cash)
  return cash_;
}
inline void CostCashResp::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:User.CostCashResp.cash)
}

// required uint32 operation = 2;
inline bool CostCashResp::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CostCashResp::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CostCashResp::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CostCashResp::clear_operation() {
  operation_ = 0u;
  clear_has_operation();
}
inline ::google::protobuf::uint32 CostCashResp::operation() const {
  // @@protoc_insertion_point(field_get:User.CostCashResp.operation)
  return operation_;
}
inline void CostCashResp::set_operation(::google::protobuf::uint32 value) {
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:User.CostCashResp.operation)
}

// -------------------------------------------------------------------

// OpenNormalGifgBagReq

// required uint32 eqid = 1;
inline bool OpenNormalGifgBagReq::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenNormalGifgBagReq::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenNormalGifgBagReq::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenNormalGifgBagReq::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 OpenNormalGifgBagReq::eqid() const {
  // @@protoc_insertion_point(field_get:User.OpenNormalGifgBagReq.eqid)
  return eqid_;
}
inline void OpenNormalGifgBagReq::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:User.OpenNormalGifgBagReq.eqid)
}

// required uint32 equd = 2;
inline bool OpenNormalGifgBagReq::has_equd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenNormalGifgBagReq::set_has_equd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenNormalGifgBagReq::clear_has_equd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenNormalGifgBagReq::clear_equd() {
  equd_ = 0u;
  clear_has_equd();
}
inline ::google::protobuf::uint32 OpenNormalGifgBagReq::equd() const {
  // @@protoc_insertion_point(field_get:User.OpenNormalGifgBagReq.equd)
  return equd_;
}
inline void OpenNormalGifgBagReq::set_equd(::google::protobuf::uint32 value) {
  set_has_equd();
  equd_ = value;
  // @@protoc_insertion_point(field_set:User.OpenNormalGifgBagReq.equd)
}

// -------------------------------------------------------------------

// OpenLuckGifgBagReq

// required uint32 eqid = 1;
inline bool OpenLuckGifgBagReq::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenLuckGifgBagReq::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenLuckGifgBagReq::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenLuckGifgBagReq::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 OpenLuckGifgBagReq::eqid() const {
  // @@protoc_insertion_point(field_get:User.OpenLuckGifgBagReq.eqid)
  return eqid_;
}
inline void OpenLuckGifgBagReq::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:User.OpenLuckGifgBagReq.eqid)
}

// required uint32 equd = 2;
inline bool OpenLuckGifgBagReq::has_equd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenLuckGifgBagReq::set_has_equd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenLuckGifgBagReq::clear_has_equd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenLuckGifgBagReq::clear_equd() {
  equd_ = 0u;
  clear_has_equd();
}
inline ::google::protobuf::uint32 OpenLuckGifgBagReq::equd() const {
  // @@protoc_insertion_point(field_get:User.OpenLuckGifgBagReq.equd)
  return equd_;
}
inline void OpenLuckGifgBagReq::set_equd(::google::protobuf::uint32 value) {
  set_has_equd();
  equd_ = value;
  // @@protoc_insertion_point(field_set:User.OpenLuckGifgBagReq.equd)
}

// -------------------------------------------------------------------

// OpenGifgBagResp

// required uint32 equd = 1;
inline bool OpenGifgBagResp::has_equd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenGifgBagResp::set_has_equd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenGifgBagResp::clear_has_equd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenGifgBagResp::clear_equd() {
  equd_ = 0u;
  clear_has_equd();
}
inline ::google::protobuf::uint32 OpenGifgBagResp::equd() const {
  // @@protoc_insertion_point(field_get:User.OpenGifgBagResp.equd)
  return equd_;
}
inline void OpenGifgBagResp::set_equd(::google::protobuf::uint32 value) {
  set_has_equd();
  equd_ = value;
  // @@protoc_insertion_point(field_set:User.OpenGifgBagResp.equd)
}

// required uint32 count = 2;
inline bool OpenGifgBagResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenGifgBagResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenGifgBagResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenGifgBagResp::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 OpenGifgBagResp::count() const {
  // @@protoc_insertion_point(field_get:User.OpenGifgBagResp.count)
  return count_;
}
inline void OpenGifgBagResp::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:User.OpenGifgBagResp.count)
}

// required .User.RewardBagInfo bag_info = 3;
inline bool OpenGifgBagResp::has_bag_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenGifgBagResp::set_has_bag_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenGifgBagResp::clear_has_bag_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenGifgBagResp::clear_bag_info() {
  if (bag_info_ != NULL) bag_info_->::User::RewardBagInfo::Clear();
  clear_has_bag_info();
}
inline const ::User::RewardBagInfo& OpenGifgBagResp::bag_info() const {
  // @@protoc_insertion_point(field_get:User.OpenGifgBagResp.bag_info)
  return bag_info_ != NULL ? *bag_info_ : *default_instance_->bag_info_;
}
inline ::User::RewardBagInfo* OpenGifgBagResp::mutable_bag_info() {
  set_has_bag_info();
  if (bag_info_ == NULL) bag_info_ = new ::User::RewardBagInfo;
  // @@protoc_insertion_point(field_mutable:User.OpenGifgBagResp.bag_info)
  return bag_info_;
}
inline ::User::RewardBagInfo* OpenGifgBagResp::release_bag_info() {
  clear_has_bag_info();
  ::User::RewardBagInfo* temp = bag_info_;
  bag_info_ = NULL;
  return temp;
}
inline void OpenGifgBagResp::set_allocated_bag_info(::User::RewardBagInfo* bag_info) {
  delete bag_info_;
  bag_info_ = bag_info;
  if (bag_info) {
    set_has_bag_info();
  } else {
    clear_has_bag_info();
  }
  // @@protoc_insertion_point(field_set_allocated:User.OpenGifgBagResp.bag_info)
}

// -------------------------------------------------------------------

// RewardBagInfo

// optional .DataCommon.EquipmentAllCPP equips = 1;
inline bool RewardBagInfo::has_equips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardBagInfo::set_has_equips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardBagInfo::clear_has_equips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardBagInfo::clear_equips() {
  if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
  clear_has_equips();
}
inline const ::DataCommon::EquipmentAllCPP& RewardBagInfo::equips() const {
  // @@protoc_insertion_point(field_get:User.RewardBagInfo.equips)
  return equips_ != NULL ? *equips_ : *default_instance_->equips_;
}
inline ::DataCommon::EquipmentAllCPP* RewardBagInfo::mutable_equips() {
  set_has_equips();
  if (equips_ == NULL) equips_ = new ::DataCommon::EquipmentAllCPP;
  // @@protoc_insertion_point(field_mutable:User.RewardBagInfo.equips)
  return equips_;
}
inline ::DataCommon::EquipmentAllCPP* RewardBagInfo::release_equips() {
  clear_has_equips();
  ::DataCommon::EquipmentAllCPP* temp = equips_;
  equips_ = NULL;
  return temp;
}
inline void RewardBagInfo::set_allocated_equips(::DataCommon::EquipmentAllCPP* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
  // @@protoc_insertion_point(field_set_allocated:User.RewardBagInfo.equips)
}

// optional .DataCommon.CommonBaseRewardCPP base = 2;
inline bool RewardBagInfo::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardBagInfo::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardBagInfo::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardBagInfo::clear_base() {
  if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
  clear_has_base();
}
inline const ::DataCommon::CommonBaseRewardCPP& RewardBagInfo::base() const {
  // @@protoc_insertion_point(field_get:User.RewardBagInfo.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::DataCommon::CommonBaseRewardCPP* RewardBagInfo::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::DataCommon::CommonBaseRewardCPP;
  // @@protoc_insertion_point(field_mutable:User.RewardBagInfo.base)
  return base_;
}
inline ::DataCommon::CommonBaseRewardCPP* RewardBagInfo::release_base() {
  clear_has_base();
  ::DataCommon::CommonBaseRewardCPP* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RewardBagInfo::set_allocated_base(::DataCommon::CommonBaseRewardCPP* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:User.RewardBagInfo.base)
}

// repeated .ProtoHero.HeroBaseInfoCPP heros = 3;
inline int RewardBagInfo::heros_size() const {
  return heros_.size();
}
inline void RewardBagInfo::clear_heros() {
  heros_.Clear();
}
inline const ::ProtoHero::HeroBaseInfoCPP& RewardBagInfo::heros(int index) const {
  // @@protoc_insertion_point(field_get:User.RewardBagInfo.heros)
  return heros_.Get(index);
}
inline ::ProtoHero::HeroBaseInfoCPP* RewardBagInfo::mutable_heros(int index) {
  // @@protoc_insertion_point(field_mutable:User.RewardBagInfo.heros)
  return heros_.Mutable(index);
}
inline ::ProtoHero::HeroBaseInfoCPP* RewardBagInfo::add_heros() {
  // @@protoc_insertion_point(field_add:User.RewardBagInfo.heros)
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >&
RewardBagInfo::heros() const {
  // @@protoc_insertion_point(field_list:User.RewardBagInfo.heros)
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoHero::HeroBaseInfoCPP >*
RewardBagInfo::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:User.RewardBagInfo.heros)
  return &heros_;
}

// repeated .ProtoComponent.ComponentCPP components = 4;
inline int RewardBagInfo::components_size() const {
  return components_.size();
}
inline void RewardBagInfo::clear_components() {
  components_.Clear();
}
inline const ::ProtoComponent::ComponentCPP& RewardBagInfo::components(int index) const {
  // @@protoc_insertion_point(field_get:User.RewardBagInfo.components)
  return components_.Get(index);
}
inline ::ProtoComponent::ComponentCPP* RewardBagInfo::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:User.RewardBagInfo.components)
  return components_.Mutable(index);
}
inline ::ProtoComponent::ComponentCPP* RewardBagInfo::add_components() {
  // @@protoc_insertion_point(field_add:User.RewardBagInfo.components)
  return components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoComponent::ComponentCPP >&
RewardBagInfo::components() const {
  // @@protoc_insertion_point(field_list:User.RewardBagInfo.components)
  return components_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoComponent::ComponentCPP >*
RewardBagInfo::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:User.RewardBagInfo.components)
  return &components_;
}

// -------------------------------------------------------------------

// UseTimeLimitPropReq

// required uint32 eqid = 1;
inline bool UseTimeLimitPropReq::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseTimeLimitPropReq::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseTimeLimitPropReq::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseTimeLimitPropReq::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 UseTimeLimitPropReq::eqid() const {
  // @@protoc_insertion_point(field_get:User.UseTimeLimitPropReq.eqid)
  return eqid_;
}
inline void UseTimeLimitPropReq::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:User.UseTimeLimitPropReq.eqid)
}

// required uint32 equd = 2;
inline bool UseTimeLimitPropReq::has_equd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseTimeLimitPropReq::set_has_equd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseTimeLimitPropReq::clear_has_equd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseTimeLimitPropReq::clear_equd() {
  equd_ = 0u;
  clear_has_equd();
}
inline ::google::protobuf::uint32 UseTimeLimitPropReq::equd() const {
  // @@protoc_insertion_point(field_get:User.UseTimeLimitPropReq.equd)
  return equd_;
}
inline void UseTimeLimitPropReq::set_equd(::google::protobuf::uint32 value) {
  set_has_equd();
  equd_ = value;
  // @@protoc_insertion_point(field_set:User.UseTimeLimitPropReq.equd)
}

// -------------------------------------------------------------------

// UseTimeLimitPropResp

// required uint32 equd = 1;
inline bool UseTimeLimitPropResp::has_equd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseTimeLimitPropResp::set_has_equd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseTimeLimitPropResp::clear_has_equd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseTimeLimitPropResp::clear_equd() {
  equd_ = 0u;
  clear_has_equd();
}
inline ::google::protobuf::uint32 UseTimeLimitPropResp::equd() const {
  // @@protoc_insertion_point(field_get:User.UseTimeLimitPropResp.equd)
  return equd_;
}
inline void UseTimeLimitPropResp::set_equd(::google::protobuf::uint32 value) {
  set_has_equd();
  equd_ = value;
  // @@protoc_insertion_point(field_set:User.UseTimeLimitPropResp.equd)
}

// required uint32 count = 2;
inline bool UseTimeLimitPropResp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseTimeLimitPropResp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseTimeLimitPropResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseTimeLimitPropResp::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 UseTimeLimitPropResp::count() const {
  // @@protoc_insertion_point(field_get:User.UseTimeLimitPropResp.count)
  return count_;
}
inline void UseTimeLimitPropResp::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:User.UseTimeLimitPropResp.count)
}

// required .User.TimeLimtPropItem item = 3;
inline bool UseTimeLimitPropResp::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseTimeLimitPropResp::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseTimeLimitPropResp::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseTimeLimitPropResp::clear_item() {
  if (item_ != NULL) item_->::User::TimeLimtPropItem::Clear();
  clear_has_item();
}
inline const ::User::TimeLimtPropItem& UseTimeLimitPropResp::item() const {
  // @@protoc_insertion_point(field_get:User.UseTimeLimitPropResp.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::User::TimeLimtPropItem* UseTimeLimitPropResp::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::User::TimeLimtPropItem;
  // @@protoc_insertion_point(field_mutable:User.UseTimeLimitPropResp.item)
  return item_;
}
inline ::User::TimeLimtPropItem* UseTimeLimitPropResp::release_item() {
  clear_has_item();
  ::User::TimeLimtPropItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void UseTimeLimitPropResp::set_allocated_item(::User::TimeLimtPropItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:User.UseTimeLimitPropResp.item)
}

// -------------------------------------------------------------------

// UseUpdateSmeltPropReq

// required uint32 prop_id = 1;
inline bool UseUpdateSmeltPropReq::has_prop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseUpdateSmeltPropReq::set_has_prop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseUpdateSmeltPropReq::clear_has_prop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseUpdateSmeltPropReq::clear_prop_id() {
  prop_id_ = 0u;
  clear_has_prop_id();
}
inline ::google::protobuf::uint32 UseUpdateSmeltPropReq::prop_id() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropReq.prop_id)
  return prop_id_;
}
inline void UseUpdateSmeltPropReq::set_prop_id(::google::protobuf::uint32 value) {
  set_has_prop_id();
  prop_id_ = value;
  // @@protoc_insertion_point(field_set:User.UseUpdateSmeltPropReq.prop_id)
}

// required uint32 prop_ud = 2;
inline bool UseUpdateSmeltPropReq::has_prop_ud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseUpdateSmeltPropReq::set_has_prop_ud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseUpdateSmeltPropReq::clear_has_prop_ud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseUpdateSmeltPropReq::clear_prop_ud() {
  prop_ud_ = 0u;
  clear_has_prop_ud();
}
inline ::google::protobuf::uint32 UseUpdateSmeltPropReq::prop_ud() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropReq.prop_ud)
  return prop_ud_;
}
inline void UseUpdateSmeltPropReq::set_prop_ud(::google::protobuf::uint32 value) {
  set_has_prop_ud();
  prop_ud_ = value;
  // @@protoc_insertion_point(field_set:User.UseUpdateSmeltPropReq.prop_ud)
}

// required uint32 equip_ud = 3;
inline bool UseUpdateSmeltPropReq::has_equip_ud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseUpdateSmeltPropReq::set_has_equip_ud() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseUpdateSmeltPropReq::clear_has_equip_ud() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseUpdateSmeltPropReq::clear_equip_ud() {
  equip_ud_ = 0u;
  clear_has_equip_ud();
}
inline ::google::protobuf::uint32 UseUpdateSmeltPropReq::equip_ud() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropReq.equip_ud)
  return equip_ud_;
}
inline void UseUpdateSmeltPropReq::set_equip_ud(::google::protobuf::uint32 value) {
  set_has_equip_ud();
  equip_ud_ = value;
  // @@protoc_insertion_point(field_set:User.UseUpdateSmeltPropReq.equip_ud)
}

// -------------------------------------------------------------------

// UseUpdateSmeltPropResp

// required uint32 prop_ud = 1;
inline bool UseUpdateSmeltPropResp::has_prop_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseUpdateSmeltPropResp::set_has_prop_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseUpdateSmeltPropResp::clear_has_prop_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseUpdateSmeltPropResp::clear_prop_ud() {
  prop_ud_ = 0u;
  clear_has_prop_ud();
}
inline ::google::protobuf::uint32 UseUpdateSmeltPropResp::prop_ud() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropResp.prop_ud)
  return prop_ud_;
}
inline void UseUpdateSmeltPropResp::set_prop_ud(::google::protobuf::uint32 value) {
  set_has_prop_ud();
  prop_ud_ = value;
  // @@protoc_insertion_point(field_set:User.UseUpdateSmeltPropResp.prop_ud)
}

// required uint32 prop_cnt = 2;
inline bool UseUpdateSmeltPropResp::has_prop_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseUpdateSmeltPropResp::set_has_prop_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseUpdateSmeltPropResp::clear_has_prop_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseUpdateSmeltPropResp::clear_prop_cnt() {
  prop_cnt_ = 0u;
  clear_has_prop_cnt();
}
inline ::google::protobuf::uint32 UseUpdateSmeltPropResp::prop_cnt() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropResp.prop_cnt)
  return prop_cnt_;
}
inline void UseUpdateSmeltPropResp::set_prop_cnt(::google::protobuf::uint32 value) {
  set_has_prop_cnt();
  prop_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.UseUpdateSmeltPropResp.prop_cnt)
}

// required .DataCommon.EquipmentCPP equip = 3;
inline bool UseUpdateSmeltPropResp::has_equip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseUpdateSmeltPropResp::set_has_equip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseUpdateSmeltPropResp::clear_has_equip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseUpdateSmeltPropResp::clear_equip() {
  if (equip_ != NULL) equip_->::DataCommon::EquipmentCPP::Clear();
  clear_has_equip();
}
inline const ::DataCommon::EquipmentCPP& UseUpdateSmeltPropResp::equip() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropResp.equip)
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::DataCommon::EquipmentCPP* UseUpdateSmeltPropResp::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::DataCommon::EquipmentCPP;
  // @@protoc_insertion_point(field_mutable:User.UseUpdateSmeltPropResp.equip)
  return equip_;
}
inline ::DataCommon::EquipmentCPP* UseUpdateSmeltPropResp::release_equip() {
  clear_has_equip();
  ::DataCommon::EquipmentCPP* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void UseUpdateSmeltPropResp::set_allocated_equip(::DataCommon::EquipmentCPP* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
  // @@protoc_insertion_point(field_set_allocated:User.UseUpdateSmeltPropResp.equip)
}

// optional .ProtoHero.HeroBaseInfoCPP hero = 4;
inline bool UseUpdateSmeltPropResp::has_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseUpdateSmeltPropResp::set_has_hero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseUpdateSmeltPropResp::clear_has_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseUpdateSmeltPropResp::clear_hero() {
  if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
  clear_has_hero();
}
inline const ::ProtoHero::HeroBaseInfoCPP& UseUpdateSmeltPropResp::hero() const {
  // @@protoc_insertion_point(field_get:User.UseUpdateSmeltPropResp.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* UseUpdateSmeltPropResp::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::ProtoHero::HeroBaseInfoCPP;
  // @@protoc_insertion_point(field_mutable:User.UseUpdateSmeltPropResp.hero)
  return hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* UseUpdateSmeltPropResp::release_hero() {
  clear_has_hero();
  ::ProtoHero::HeroBaseInfoCPP* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void UseUpdateSmeltPropResp::set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:User.UseUpdateSmeltPropResp.hero)
}

// -------------------------------------------------------------------

// UseSpecificSmeltPropReq

// required uint32 prop_id = 1;
inline bool UseSpecificSmeltPropReq::has_prop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseSpecificSmeltPropReq::set_has_prop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseSpecificSmeltPropReq::clear_has_prop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseSpecificSmeltPropReq::clear_prop_id() {
  prop_id_ = 0u;
  clear_has_prop_id();
}
inline ::google::protobuf::uint32 UseSpecificSmeltPropReq::prop_id() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropReq.prop_id)
  return prop_id_;
}
inline void UseSpecificSmeltPropReq::set_prop_id(::google::protobuf::uint32 value) {
  set_has_prop_id();
  prop_id_ = value;
  // @@protoc_insertion_point(field_set:User.UseSpecificSmeltPropReq.prop_id)
}

// required uint32 prop_ud = 2;
inline bool UseSpecificSmeltPropReq::has_prop_ud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseSpecificSmeltPropReq::set_has_prop_ud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseSpecificSmeltPropReq::clear_has_prop_ud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseSpecificSmeltPropReq::clear_prop_ud() {
  prop_ud_ = 0u;
  clear_has_prop_ud();
}
inline ::google::protobuf::uint32 UseSpecificSmeltPropReq::prop_ud() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropReq.prop_ud)
  return prop_ud_;
}
inline void UseSpecificSmeltPropReq::set_prop_ud(::google::protobuf::uint32 value) {
  set_has_prop_ud();
  prop_ud_ = value;
  // @@protoc_insertion_point(field_set:User.UseSpecificSmeltPropReq.prop_ud)
}

// required uint32 equip_ud = 3;
inline bool UseSpecificSmeltPropReq::has_equip_ud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseSpecificSmeltPropReq::set_has_equip_ud() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseSpecificSmeltPropReq::clear_has_equip_ud() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseSpecificSmeltPropReq::clear_equip_ud() {
  equip_ud_ = 0u;
  clear_has_equip_ud();
}
inline ::google::protobuf::uint32 UseSpecificSmeltPropReq::equip_ud() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropReq.equip_ud)
  return equip_ud_;
}
inline void UseSpecificSmeltPropReq::set_equip_ud(::google::protobuf::uint32 value) {
  set_has_equip_ud();
  equip_ud_ = value;
  // @@protoc_insertion_point(field_set:User.UseSpecificSmeltPropReq.equip_ud)
}

// required uint32 type = 4;
inline bool UseSpecificSmeltPropReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseSpecificSmeltPropReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseSpecificSmeltPropReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseSpecificSmeltPropReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 UseSpecificSmeltPropReq::type() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropReq.type)
  return type_;
}
inline void UseSpecificSmeltPropReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:User.UseSpecificSmeltPropReq.type)
}

// -------------------------------------------------------------------

// UseSpecificSmeltPropResp

// required uint32 prop_ud = 1;
inline bool UseSpecificSmeltPropResp::has_prop_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseSpecificSmeltPropResp::set_has_prop_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseSpecificSmeltPropResp::clear_has_prop_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseSpecificSmeltPropResp::clear_prop_ud() {
  prop_ud_ = 0u;
  clear_has_prop_ud();
}
inline ::google::protobuf::uint32 UseSpecificSmeltPropResp::prop_ud() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropResp.prop_ud)
  return prop_ud_;
}
inline void UseSpecificSmeltPropResp::set_prop_ud(::google::protobuf::uint32 value) {
  set_has_prop_ud();
  prop_ud_ = value;
  // @@protoc_insertion_point(field_set:User.UseSpecificSmeltPropResp.prop_ud)
}

// required uint32 prop_cnt = 2;
inline bool UseSpecificSmeltPropResp::has_prop_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseSpecificSmeltPropResp::set_has_prop_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseSpecificSmeltPropResp::clear_has_prop_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseSpecificSmeltPropResp::clear_prop_cnt() {
  prop_cnt_ = 0u;
  clear_has_prop_cnt();
}
inline ::google::protobuf::uint32 UseSpecificSmeltPropResp::prop_cnt() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropResp.prop_cnt)
  return prop_cnt_;
}
inline void UseSpecificSmeltPropResp::set_prop_cnt(::google::protobuf::uint32 value) {
  set_has_prop_cnt();
  prop_cnt_ = value;
  // @@protoc_insertion_point(field_set:User.UseSpecificSmeltPropResp.prop_cnt)
}

// required .DataCommon.EquipmentCPP equip = 3;
inline bool UseSpecificSmeltPropResp::has_equip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseSpecificSmeltPropResp::set_has_equip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseSpecificSmeltPropResp::clear_has_equip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseSpecificSmeltPropResp::clear_equip() {
  if (equip_ != NULL) equip_->::DataCommon::EquipmentCPP::Clear();
  clear_has_equip();
}
inline const ::DataCommon::EquipmentCPP& UseSpecificSmeltPropResp::equip() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropResp.equip)
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::DataCommon::EquipmentCPP* UseSpecificSmeltPropResp::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::DataCommon::EquipmentCPP;
  // @@protoc_insertion_point(field_mutable:User.UseSpecificSmeltPropResp.equip)
  return equip_;
}
inline ::DataCommon::EquipmentCPP* UseSpecificSmeltPropResp::release_equip() {
  clear_has_equip();
  ::DataCommon::EquipmentCPP* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void UseSpecificSmeltPropResp::set_allocated_equip(::DataCommon::EquipmentCPP* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
  // @@protoc_insertion_point(field_set_allocated:User.UseSpecificSmeltPropResp.equip)
}

// optional .ProtoHero.HeroBaseInfoCPP hero = 4;
inline bool UseSpecificSmeltPropResp::has_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseSpecificSmeltPropResp::set_has_hero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseSpecificSmeltPropResp::clear_has_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseSpecificSmeltPropResp::clear_hero() {
  if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
  clear_has_hero();
}
inline const ::ProtoHero::HeroBaseInfoCPP& UseSpecificSmeltPropResp::hero() const {
  // @@protoc_insertion_point(field_get:User.UseSpecificSmeltPropResp.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* UseSpecificSmeltPropResp::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::ProtoHero::HeroBaseInfoCPP;
  // @@protoc_insertion_point(field_mutable:User.UseSpecificSmeltPropResp.hero)
  return hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* UseSpecificSmeltPropResp::release_hero() {
  clear_has_hero();
  ::ProtoHero::HeroBaseInfoCPP* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void UseSpecificSmeltPropResp::set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:User.UseSpecificSmeltPropResp.hero)
}

// -------------------------------------------------------------------

// EliteNPCPushReq

// repeated .User.EliteNPCInfo npcs = 1;
inline int EliteNPCPushReq::npcs_size() const {
  return npcs_.size();
}
inline void EliteNPCPushReq::clear_npcs() {
  npcs_.Clear();
}
inline const ::User::EliteNPCInfo& EliteNPCPushReq::npcs(int index) const {
  // @@protoc_insertion_point(field_get:User.EliteNPCPushReq.npcs)
  return npcs_.Get(index);
}
inline ::User::EliteNPCInfo* EliteNPCPushReq::mutable_npcs(int index) {
  // @@protoc_insertion_point(field_mutable:User.EliteNPCPushReq.npcs)
  return npcs_.Mutable(index);
}
inline ::User::EliteNPCInfo* EliteNPCPushReq::add_npcs() {
  // @@protoc_insertion_point(field_add:User.EliteNPCPushReq.npcs)
  return npcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >&
EliteNPCPushReq::npcs() const {
  // @@protoc_insertion_point(field_list:User.EliteNPCPushReq.npcs)
  return npcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::User::EliteNPCInfo >*
EliteNPCPushReq::mutable_npcs() {
  // @@protoc_insertion_point(field_mutable_list:User.EliteNPCPushReq.npcs)
  return &npcs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace User

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_User_2eproto__INCLUDED
