// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Common {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Kick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Kick_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyPay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyPay_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticePay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticePay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutDown_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Common_2eproto() {
  protobuf_AddDesc_Common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Common.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, ttss_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, ttss_level_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, ttss_grow_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, ttss_grow_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, is_blue_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, is_blue_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, is_super_blue_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, blue_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, yellow_vip_level_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  Kick_descriptor_ = file->message_type(1);
  static const int Kick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kick, reason_),
  };
  Kick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Kick_descriptor_,
      Kick::default_instance_,
      Kick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Kick));
  ChangeName_descriptor_ = file->message_type(2);
  static const int ChangeName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, name_),
  };
  ChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeName_descriptor_,
      ChangeName::default_instance_,
      ChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeName));
  ReplyChangeName_descriptor_ = file->message_type(3);
  static const int ReplyChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChangeName, name_),
  };
  ReplyChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyChangeName_descriptor_,
      ReplyChangeName::default_instance_,
      ReplyChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyChangeName));
  Pay_descriptor_ = file->message_type(4);
  static const int Pay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay, ts_),
  };
  Pay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pay_descriptor_,
      Pay::default_instance_,
      Pay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pay));
  ReplyPay_descriptor_ = file->message_type(5);
  static const int ReplyPay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPay, ret_),
  };
  ReplyPay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyPay_descriptor_,
      ReplyPay::default_instance_,
      ReplyPay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyPay));
  NoticePay_descriptor_ = file->message_type(6);
  static const int NoticePay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticePay, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticePay, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticePay, acc_recharge_),
  };
  NoticePay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticePay_descriptor_,
      NoticePay::default_instance_,
      NoticePay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticePay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticePay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticePay));
  ShutDown_descriptor_ = file->message_type(7);
  static const int ShutDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutDown, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutDown, sign_),
  };
  ShutDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutDown_descriptor_,
      ShutDown::default_instance_,
      ShutDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutDown));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Kick_descriptor_, &Kick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeName_descriptor_, &ChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyChangeName_descriptor_, &ReplyChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pay_descriptor_, &Pay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyPay_descriptor_, &ReplyPay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticePay_descriptor_, &NoticePay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutDown_descriptor_, &ShutDown::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Common_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete Kick::default_instance_;
  delete Kick_reflection_;
  delete ChangeName::default_instance_;
  delete ChangeName_reflection_;
  delete ReplyChangeName::default_instance_;
  delete ReplyChangeName_reflection_;
  delete Pay::default_instance_;
  delete Pay_reflection_;
  delete ReplyPay::default_instance_;
  delete ReplyPay_reflection_;
  delete NoticePay::default_instance_;
  delete NoticePay_reflection_;
  delete ShutDown::default_instance_;
  delete ShutDown_reflection_;
}

void protobuf_AddDesc_Common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Common.proto\022\006Common\"\213\003\n\005Login\022\013\n\003uid\030"
    "\001 \002(\r\022\017\n\007openkey\030\002 \002(\t\022\n\n\002ts\030\003 \002(\r\022\013\n\003si"
    "g\030\004 \002(\t\022\013\n\003fig\030\005 \001(\t\022\r\n\005isnew\030\006 \002(\010\022\017\n\007k"
    "ingdom\030\007 \002(\r\022\020\n\010platform\030\010 \002(\r\022\022\n\nttss_l"
    "evel\030\t \001(\r\022\027\n\017ttss_level_name\030\n \001(\t\022\027\n\017t"
    "tss_grow_level\030\013 \001(\r\022\027\n\017ttss_grow_value\030"
    "\014 \001(\r\022\023\n\013is_blue_vip\030\r \001(\r\022\030\n\020is_blue_ye"
    "ar_vip\030\016 \001(\r\022\031\n\021is_super_blue_vip\030\017 \001(\r\022"
    "\026\n\016blue_vip_level\030\020 \001(\r\022\025\n\ris_yellow_vip"
    "\030\021 \001(\r\022\032\n\022is_yellow_year_vip\030\022 \001(\r\022\030\n\020ye"
    "llow_vip_level\030\023 \001(\r\"\026\n\004Kick\022\016\n\006reason\030\001"
    " \002(\t\"\'\n\nChangeName\022\013\n\003uid\030\001 \002(\r\022\014\n\004name\030"
    "\002 \002(\014\"\037\n\017ReplyChangeName\022\014\n\004name\030\001 \002(\014\","
    "\n\003Pay\022\013\n\003uid\030\001 \002(\r\022\014\n\004cash\030\002 \002(\r\022\n\n\002ts\030\003"
    " \002(\r\"\027\n\010ReplyPay\022\013\n\003ret\030\001 \002(\r\"B\n\tNoticeP"
    "ay\022\014\n\004cash\030\001 \002(\r\022\021\n\tvip_level\030\002 \002(\r\022\024\n\014a"
    "cc_recharge\030\003 \002(\r\"$\n\010ShutDown\022\n\n\002ts\030\001 \002("
    "\r\022\014\n\004sign\030\002 \002(\t", 695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  Kick::default_instance_ = new Kick();
  ChangeName::default_instance_ = new ChangeName();
  ReplyChangeName::default_instance_ = new ReplyChangeName();
  Pay::default_instance_ = new Pay();
  ReplyPay::default_instance_ = new ReplyPay();
  NoticePay::default_instance_ = new NoticePay();
  ShutDown::default_instance_ = new ShutDown();
  Login::default_instance_->InitAsDefaultInstance();
  Kick::default_instance_->InitAsDefaultInstance();
  ChangeName::default_instance_->InitAsDefaultInstance();
  ReplyChangeName::default_instance_->InitAsDefaultInstance();
  Pay::default_instance_->InitAsDefaultInstance();
  ReplyPay::default_instance_->InitAsDefaultInstance();
  NoticePay::default_instance_->InitAsDefaultInstance();
  ShutDown::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Common_2eproto {
  StaticDescriptorInitializer_Common_2eproto() {
    protobuf_AddDesc_Common_2eproto();
  }
} static_descriptor_initializer_Common_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Login::kUidFieldNumber;
const int Login::kOpenkeyFieldNumber;
const int Login::kTsFieldNumber;
const int Login::kSigFieldNumber;
const int Login::kFigFieldNumber;
const int Login::kIsnewFieldNumber;
const int Login::kKingdomFieldNumber;
const int Login::kPlatformFieldNumber;
const int Login::kTtssLevelFieldNumber;
const int Login::kTtssLevelNameFieldNumber;
const int Login::kTtssGrowLevelFieldNumber;
const int Login::kTtssGrowValueFieldNumber;
const int Login::kIsBlueVipFieldNumber;
const int Login::kIsBlueYearVipFieldNumber;
const int Login::kIsSuperBlueVipFieldNumber;
const int Login::kBlueVipLevelFieldNumber;
const int Login::kIsYellowVipFieldNumber;
const int Login::kIsYellowYearVipFieldNumber;
const int Login::kYellowVipLevelFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.Login)
}

void Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = 0u;
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isnew_ = false;
  kingdom_ = 0u;
  platform_ = 0u;
  ttss_level_ = 0u;
  ttss_level_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttss_grow_level_ = 0u;
  ttss_grow_value_ = 0u;
  is_blue_vip_ = 0u;
  is_blue_year_vip_ = 0u;
  is_super_blue_vip_ = 0u;
  blue_vip_level_ = 0u;
  is_yellow_vip_ = 0u;
  is_yellow_year_vip_ = 0u;
  yellow_vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Common.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (openkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openkey_;
  }
  if (sig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sig_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (ttss_level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ttss_level_name_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Login*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, ts_);
    ZR_(isnew_, platform_);
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openkey_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sig_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ttss_grow_level_, blue_vip_level_);
    ttss_level_ = 0u;
    if (has_ttss_level_name()) {
      if (ttss_level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ttss_level_name_->clear();
      }
    }
  }
  ZR_(is_yellow_vip_, yellow_vip_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openkey;
        break;
      }

      // required string openkey = 2;
      case 2: {
        if (tag == 18) {
         parse_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sig;
        break;
      }

      // required string sig = 4;
      case 4: {
        if (tag == 34) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fig;
        break;
      }

      // optional string fig = 5;
      case 5: {
        if (tag == 42) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isnew;
        break;
      }

      // required bool isnew = 6;
      case 6: {
        if (tag == 48) {
         parse_isnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kingdom;
        break;
      }

      // required uint32 kingdom = 7;
      case 7: {
        if (tag == 56) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_platform;
        break;
      }

      // required uint32 platform = 8;
      case 8: {
        if (tag == 64) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ttss_level;
        break;
      }

      // optional uint32 ttss_level = 9;
      case 9: {
        if (tag == 72) {
         parse_ttss_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttss_level_)));
          set_has_ttss_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ttss_level_name;
        break;
      }

      // optional string ttss_level_name = 10;
      case 10: {
        if (tag == 82) {
         parse_ttss_level_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ttss_level_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ttss_level_name().data(), this->ttss_level_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ttss_level_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ttss_grow_level;
        break;
      }

      // optional uint32 ttss_grow_level = 11;
      case 11: {
        if (tag == 88) {
         parse_ttss_grow_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttss_grow_level_)));
          set_has_ttss_grow_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ttss_grow_value;
        break;
      }

      // optional uint32 ttss_grow_value = 12;
      case 12: {
        if (tag == 96) {
         parse_ttss_grow_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttss_grow_value_)));
          set_has_ttss_grow_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_blue_vip;
        break;
      }

      // optional uint32 is_blue_vip = 13;
      case 13: {
        if (tag == 104) {
         parse_is_blue_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_blue_vip_)));
          set_has_is_blue_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_blue_year_vip;
        break;
      }

      // optional uint32 is_blue_year_vip = 14;
      case 14: {
        if (tag == 112) {
         parse_is_blue_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_blue_year_vip_)));
          set_has_is_blue_year_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_super_blue_vip;
        break;
      }

      // optional uint32 is_super_blue_vip = 15;
      case 15: {
        if (tag == 120) {
         parse_is_super_blue_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_super_blue_vip_)));
          set_has_is_super_blue_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_blue_vip_level;
        break;
      }

      // optional uint32 blue_vip_level = 16;
      case 16: {
        if (tag == 128) {
         parse_blue_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_vip_level_)));
          set_has_blue_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_yellow_vip;
        break;
      }

      // optional uint32 is_yellow_vip = 17;
      case 17: {
        if (tag == 136) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_is_yellow_year_vip;
        break;
      }

      // optional uint32 is_yellow_year_vip = 18;
      case 18: {
        if (tag == 144) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_yellow_vip_level;
        break;
      }

      // optional uint32 yellow_vip_level = 19;
      case 19: {
        if (tag == 152) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.Login)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string openkey = 2;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openkey(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  // required string sig = 4;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sig(), output);
  }

  // optional string fig = 5;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fig(), output);
  }

  // required bool isnew = 6;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnew(), output);
  }

  // required uint32 kingdom = 7;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kingdom(), output);
  }

  // required uint32 platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->platform(), output);
  }

  // optional uint32 ttss_level = 9;
  if (has_ttss_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ttss_level(), output);
  }

  // optional string ttss_level_name = 10;
  if (has_ttss_level_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ttss_level_name().data(), this->ttss_level_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ttss_level_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ttss_level_name(), output);
  }

  // optional uint32 ttss_grow_level = 11;
  if (has_ttss_grow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ttss_grow_level(), output);
  }

  // optional uint32 ttss_grow_value = 12;
  if (has_ttss_grow_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ttss_grow_value(), output);
  }

  // optional uint32 is_blue_vip = 13;
  if (has_is_blue_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->is_blue_vip(), output);
  }

  // optional uint32 is_blue_year_vip = 14;
  if (has_is_blue_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->is_blue_year_vip(), output);
  }

  // optional uint32 is_super_blue_vip = 15;
  if (has_is_super_blue_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->is_super_blue_vip(), output);
  }

  // optional uint32 blue_vip_level = 16;
  if (has_blue_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->blue_vip_level(), output);
  }

  // optional uint32 is_yellow_vip = 17;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->is_yellow_vip(), output);
  }

  // optional uint32 is_yellow_year_vip = 18;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->is_yellow_year_vip(), output);
  }

  // optional uint32 yellow_vip_level = 19;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->yellow_vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Login)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string openkey = 2;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openkey(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  // required string sig = 4;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sig(), target);
  }

  // optional string fig = 5;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fig(), target);
  }

  // required bool isnew = 6;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnew(), target);
  }

  // required uint32 kingdom = 7;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kingdom(), target);
  }

  // required uint32 platform = 8;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->platform(), target);
  }

  // optional uint32 ttss_level = 9;
  if (has_ttss_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ttss_level(), target);
  }

  // optional string ttss_level_name = 10;
  if (has_ttss_level_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ttss_level_name().data(), this->ttss_level_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ttss_level_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ttss_level_name(), target);
  }

  // optional uint32 ttss_grow_level = 11;
  if (has_ttss_grow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ttss_grow_level(), target);
  }

  // optional uint32 ttss_grow_value = 12;
  if (has_ttss_grow_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ttss_grow_value(), target);
  }

  // optional uint32 is_blue_vip = 13;
  if (has_is_blue_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->is_blue_vip(), target);
  }

  // optional uint32 is_blue_year_vip = 14;
  if (has_is_blue_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->is_blue_year_vip(), target);
  }

  // optional uint32 is_super_blue_vip = 15;
  if (has_is_super_blue_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->is_super_blue_vip(), target);
  }

  // optional uint32 blue_vip_level = 16;
  if (has_blue_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->blue_vip_level(), target);
  }

  // optional uint32 is_yellow_vip = 17;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->is_yellow_vip(), target);
  }

  // optional uint32 is_yellow_year_vip = 18;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->is_yellow_year_vip(), target);
  }

  // optional uint32 yellow_vip_level = 19;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->yellow_vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string openkey = 2;
    if (has_openkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required string sig = 4;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

    // optional string fig = 5;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }

    // required bool isnew = 6;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // required uint32 kingdom = 7;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

    // required uint32 platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ttss_level = 9;
    if (has_ttss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttss_level());
    }

    // optional string ttss_level_name = 10;
    if (has_ttss_level_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ttss_level_name());
    }

    // optional uint32 ttss_grow_level = 11;
    if (has_ttss_grow_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttss_grow_level());
    }

    // optional uint32 ttss_grow_value = 12;
    if (has_ttss_grow_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttss_grow_value());
    }

    // optional uint32 is_blue_vip = 13;
    if (has_is_blue_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_blue_vip());
    }

    // optional uint32 is_blue_year_vip = 14;
    if (has_is_blue_year_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_blue_year_vip());
    }

    // optional uint32 is_super_blue_vip = 15;
    if (has_is_super_blue_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_super_blue_vip());
    }

    // optional uint32 blue_vip_level = 16;
    if (has_blue_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue_vip_level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 is_yellow_vip = 17;
    if (has_is_yellow_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_vip());
    }

    // optional uint32 is_yellow_year_vip = 18;
    if (has_is_yellow_year_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_year_vip());
    }

    // optional uint32 yellow_vip_level = 19;
    if (has_yellow_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ttss_level()) {
      set_ttss_level(from.ttss_level());
    }
    if (from.has_ttss_level_name()) {
      set_ttss_level_name(from.ttss_level_name());
    }
    if (from.has_ttss_grow_level()) {
      set_ttss_grow_level(from.ttss_grow_level());
    }
    if (from.has_ttss_grow_value()) {
      set_ttss_grow_value(from.ttss_grow_value());
    }
    if (from.has_is_blue_vip()) {
      set_is_blue_vip(from.is_blue_vip());
    }
    if (from.has_is_blue_year_vip()) {
      set_is_blue_year_vip(from.is_blue_year_vip());
    }
    if (from.has_is_super_blue_vip()) {
      set_is_super_blue_vip(from.is_super_blue_vip());
    }
    if (from.has_blue_vip_level()) {
      set_blue_vip_level(from.blue_vip_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ef) != 0x000000ef) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(openkey_, other->openkey_);
    std::swap(ts_, other->ts_);
    std::swap(sig_, other->sig_);
    std::swap(fig_, other->fig_);
    std::swap(isnew_, other->isnew_);
    std::swap(kingdom_, other->kingdom_);
    std::swap(platform_, other->platform_);
    std::swap(ttss_level_, other->ttss_level_);
    std::swap(ttss_level_name_, other->ttss_level_name_);
    std::swap(ttss_grow_level_, other->ttss_grow_level_);
    std::swap(ttss_grow_value_, other->ttss_grow_value_);
    std::swap(is_blue_vip_, other->is_blue_vip_);
    std::swap(is_blue_year_vip_, other->is_blue_year_vip_);
    std::swap(is_super_blue_vip_, other->is_super_blue_vip_);
    std::swap(blue_vip_level_, other->blue_vip_level_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Kick::kReasonFieldNumber;
#endif  // !_MSC_VER

Kick::Kick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.Kick)
}

void Kick::InitAsDefaultInstance() {
}

Kick::Kick(const Kick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.Kick)
}

void Kick::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Kick::~Kick() {
  // @@protoc_insertion_point(destructor:Common.Kick)
  SharedDtor();
}

void Kick::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void Kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Kick_descriptor_;
}

const Kick& Kick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

Kick* Kick::default_instance_ = NULL;

Kick* Kick::New() const {
  return new Kick;
}

void Kick::Clear() {
  if (has_reason()) {
    if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      reason_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.Kick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.Kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.Kick)
  return false;
#undef DO_
}

void Kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.Kick)
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.Kick)
}

::google::protobuf::uint8* Kick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Kick)
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Kick)
  return target;
}

int Kick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Kick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Kick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Kick::MergeFrom(const Kick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Kick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kick::CopyFrom(const Kick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Kick::Swap(Kick* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Kick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Kick_descriptor_;
  metadata.reflection = Kick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeName::kUidFieldNumber;
const int ChangeName::kNameFieldNumber;
#endif  // !_MSC_VER

ChangeName::ChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.ChangeName)
}

void ChangeName::InitAsDefaultInstance() {
}

ChangeName::ChangeName(const ChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.ChangeName)
}

void ChangeName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeName::~ChangeName() {
  // @@protoc_insertion_point(destructor:Common.ChangeName)
  SharedDtor();
}

void ChangeName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeName_descriptor_;
}

const ChangeName& ChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

ChangeName* ChangeName::default_instance_ = NULL;

ChangeName* ChangeName::New() const {
  return new ChangeName;
}

void ChangeName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.ChangeName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.ChangeName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.ChangeName)
  return false;
#undef DO_
}

void ChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.ChangeName)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.ChangeName)
}

::google::protobuf::uint8* ChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.ChangeName)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.ChangeName)
  return target;
}

int ChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeName::MergeFrom(const ChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeName::CopyFrom(const ChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeName::Swap(ChangeName* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeName_descriptor_;
  metadata.reflection = ChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyChangeName::kNameFieldNumber;
#endif  // !_MSC_VER

ReplyChangeName::ReplyChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.ReplyChangeName)
}

void ReplyChangeName::InitAsDefaultInstance() {
}

ReplyChangeName::ReplyChangeName(const ReplyChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.ReplyChangeName)
}

void ReplyChangeName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyChangeName::~ReplyChangeName() {
  // @@protoc_insertion_point(destructor:Common.ReplyChangeName)
  SharedDtor();
}

void ReplyChangeName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReplyChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyChangeName_descriptor_;
}

const ReplyChangeName& ReplyChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

ReplyChangeName* ReplyChangeName::default_instance_ = NULL;

ReplyChangeName* ReplyChangeName::New() const {
  return new ReplyChangeName;
}

void ReplyChangeName::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.ReplyChangeName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.ReplyChangeName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.ReplyChangeName)
  return false;
#undef DO_
}

void ReplyChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.ReplyChangeName)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.ReplyChangeName)
}

::google::protobuf::uint8* ReplyChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.ReplyChangeName)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.ReplyChangeName)
  return target;
}

int ReplyChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyChangeName::MergeFrom(const ReplyChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyChangeName::CopyFrom(const ReplyChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyChangeName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReplyChangeName::Swap(ReplyChangeName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyChangeName_descriptor_;
  metadata.reflection = ReplyChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pay::kUidFieldNumber;
const int Pay::kCashFieldNumber;
const int Pay::kTsFieldNumber;
#endif  // !_MSC_VER

Pay::Pay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.Pay)
}

void Pay::InitAsDefaultInstance() {
}

Pay::Pay(const Pay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.Pay)
}

void Pay::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cash_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pay::~Pay() {
  // @@protoc_insertion_point(destructor:Common.Pay)
  SharedDtor();
}

void Pay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay_descriptor_;
}

const Pay& Pay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

Pay* Pay::default_instance_ = NULL;

Pay* Pay::New() const {
  return new Pay;
}

void Pay::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pay*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.Pay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.Pay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.Pay)
  return false;
#undef DO_
}

void Pay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.Pay)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.Pay)
}

::google::protobuf::uint8* Pay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Pay)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Pay)
  return target;
}

int Pay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pay::MergeFrom(const Pay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pay::CopyFrom(const Pay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Pay::Swap(Pay* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cash_, other->cash_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pay_descriptor_;
  metadata.reflection = Pay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyPay::kRetFieldNumber;
#endif  // !_MSC_VER

ReplyPay::ReplyPay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.ReplyPay)
}

void ReplyPay::InitAsDefaultInstance() {
}

ReplyPay::ReplyPay(const ReplyPay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.ReplyPay)
}

void ReplyPay::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyPay::~ReplyPay() {
  // @@protoc_insertion_point(destructor:Common.ReplyPay)
  SharedDtor();
}

void ReplyPay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyPay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyPay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyPay_descriptor_;
}

const ReplyPay& ReplyPay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

ReplyPay* ReplyPay::default_instance_ = NULL;

ReplyPay* ReplyPay::New() const {
  return new ReplyPay;
}

void ReplyPay::Clear() {
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyPay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.ReplyPay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.ReplyPay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.ReplyPay)
  return false;
#undef DO_
}

void ReplyPay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.ReplyPay)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.ReplyPay)
}

::google::protobuf::uint8* ReplyPay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.ReplyPay)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.ReplyPay)
  return target;
}

int ReplyPay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyPay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyPay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyPay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyPay::MergeFrom(const ReplyPay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyPay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyPay::CopyFrom(const ReplyPay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyPay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReplyPay::Swap(ReplyPay* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyPay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyPay_descriptor_;
  metadata.reflection = ReplyPay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticePay::kCashFieldNumber;
const int NoticePay::kVipLevelFieldNumber;
const int NoticePay::kAccRechargeFieldNumber;
#endif  // !_MSC_VER

NoticePay::NoticePay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.NoticePay)
}

void NoticePay::InitAsDefaultInstance() {
}

NoticePay::NoticePay(const NoticePay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.NoticePay)
}

void NoticePay::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  vip_level_ = 0u;
  acc_recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticePay::~NoticePay() {
  // @@protoc_insertion_point(destructor:Common.NoticePay)
  SharedDtor();
}

void NoticePay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoticePay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticePay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticePay_descriptor_;
}

const NoticePay& NoticePay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

NoticePay* NoticePay::default_instance_ = NULL;

NoticePay* NoticePay::New() const {
  return new NoticePay;
}

void NoticePay::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NoticePay*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cash_, acc_recharge_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticePay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.NoticePay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 2;
      case 2: {
        if (tag == 16) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_acc_recharge;
        break;
      }

      // required uint32 acc_recharge = 3;
      case 3: {
        if (tag == 24) {
         parse_acc_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_recharge_)));
          set_has_acc_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.NoticePay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.NoticePay)
  return false;
#undef DO_
}

void NoticePay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.NoticePay)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required uint32 vip_level = 2;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vip_level(), output);
  }

  // required uint32 acc_recharge = 3;
  if (has_acc_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->acc_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.NoticePay)
}

::google::protobuf::uint8* NoticePay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.NoticePay)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required uint32 vip_level = 2;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vip_level(), target);
  }

  // required uint32 acc_recharge = 3;
  if (has_acc_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->acc_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.NoticePay)
  return target;
}

int NoticePay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 vip_level = 2;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // required uint32 acc_recharge = 3;
    if (has_acc_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_recharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticePay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticePay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticePay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticePay::MergeFrom(const NoticePay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_acc_recharge()) {
      set_acc_recharge(from.acc_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticePay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticePay::CopyFrom(const NoticePay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticePay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NoticePay::Swap(NoticePay* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(acc_recharge_, other->acc_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticePay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticePay_descriptor_;
  metadata.reflection = NoticePay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutDown::kTsFieldNumber;
const int ShutDown::kSignFieldNumber;
#endif  // !_MSC_VER

ShutDown::ShutDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common.ShutDown)
}

void ShutDown::InitAsDefaultInstance() {
}

ShutDown::ShutDown(const ShutDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Common.ShutDown)
}

void ShutDown::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ts_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutDown::~ShutDown() {
  // @@protoc_insertion_point(destructor:Common.ShutDown)
  SharedDtor();
}

void ShutDown::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void ShutDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutDown_descriptor_;
}

const ShutDown& ShutDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

ShutDown* ShutDown::default_instance_ = NULL;

ShutDown* ShutDown::New() const {
  return new ShutDown;
}

void ShutDown::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ts_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common.ShutDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign;
        break;
      }

      // required string sign = 2;
      case 2: {
        if (tag == 18) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common.ShutDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common.ShutDown)
  return false;
#undef DO_
}

void ShutDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common.ShutDown)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  // required string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Common.ShutDown)
}

::google::protobuf::uint8* ShutDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.ShutDown)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  // required string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.ShutDown)
  return target;
}

int ShutDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required string sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutDown::MergeFrom(const ShutDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutDown::CopyFrom(const ShutDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShutDown::Swap(ShutDown* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutDown_descriptor_;
  metadata.reflection = ShutDown_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common

// @@protoc_insertion_point(global_scope)
